/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.akeyless);
  }
}(this, function(expect, akeyless) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new akeyless.CertificateInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CertificateInfo', function() {
    it('should create an instance of CertificateInfo', function() {
      // uncomment below and update the code to test CertificateInfo
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be.a(akeyless.CertificateInfo);
    });

    it('should have the property extKeyUsage (base name: "ExtKeyUsage")', function() {
      // uncomment below and update the code to test the property extKeyUsage
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property keyUsage (base name: "KeyUsage")', function() {
      // uncomment below and update the code to test the property keyUsage
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property dnsNames (base name: "dns_names")', function() {
      // uncomment below and update the code to test the property dnsNames
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property emailAddresses (base name: "email_addresses")', function() {
      // uncomment below and update the code to test the property emailAddresses
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property extensions (base name: "extensions")', function() {
      // uncomment below and update the code to test the property extensions
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property ipAddresses (base name: "ip_addresses")', function() {
      // uncomment below and update the code to test the property ipAddresses
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property isCa (base name: "is_ca")', function() {
      // uncomment below and update the code to test the property isCa
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property issuer (base name: "issuer")', function() {
      // uncomment below and update the code to test the property issuer
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property issuingCertificateUrl (base name: "issuing_certificate_url")', function() {
      // uncomment below and update the code to test the property issuingCertificateUrl
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property keySize (base name: "key_size")', function() {
      // uncomment below and update the code to test the property keySize
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property notAfter (base name: "not_after")', function() {
      // uncomment below and update the code to test the property notAfter
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property notBefore (base name: "not_before")', function() {
      // uncomment below and update the code to test the property notBefore
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property ocspServer (base name: "ocsp_server")', function() {
      // uncomment below and update the code to test the property ocspServer
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property publicKeyAlgorithmName (base name: "public_key_algorithm_name")', function() {
      // uncomment below and update the code to test the property publicKeyAlgorithmName
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property serialNumber (base name: "serial_number")', function() {
      // uncomment below and update the code to test the property serialNumber
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property sha1Fingerprint (base name: "sha_1_fingerprint")', function() {
      // uncomment below and update the code to test the property sha1Fingerprint
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property sha256Fingerprint (base name: "sha_256_fingerprint")', function() {
      // uncomment below and update the code to test the property sha256Fingerprint
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property signature (base name: "signature")', function() {
      // uncomment below and update the code to test the property signature
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property signatureAlgorithmName (base name: "signature_algorithm_name")', function() {
      // uncomment below and update the code to test the property signatureAlgorithmName
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property subject (base name: "subject")', function() {
      // uncomment below and update the code to test the property subject
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property subjectPublicKey (base name: "subject_public_key")', function() {
      // uncomment below and update the code to test the property subjectPublicKey
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property uris (base name: "uris")', function() {
      // uncomment below and update the code to test the property uris
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instane = new akeyless.CertificateInfo();
      //expect(instance).to.be();
    });

  });

}));
