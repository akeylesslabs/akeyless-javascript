/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.akeyless);
  }
}(this, function(expect, akeyless) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new akeyless.ActiveDirectoryPayload();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ActiveDirectoryPayload', function() {
    it('should create an instance of ActiveDirectoryPayload', function() {
      // uncomment below and update the code to test ActiveDirectoryPayload
      //var instane = new akeyless.ActiveDirectoryPayload();
      //expect(instance).to.be.a(akeyless.ActiveDirectoryPayload);
    });

    it('should have the property activeDirectoryTargetId (base name: "active_directory_target_id")', function() {
      // uncomment below and update the code to test the property activeDirectoryTargetId
      //var instane = new akeyless.ActiveDirectoryPayload();
      //expect(instance).to.be();
    });

    it('should have the property autoRotate (base name: "auto_rotate")', function() {
      // uncomment below and update the code to test the property autoRotate
      //var instane = new akeyless.ActiveDirectoryPayload();
      //expect(instance).to.be();
    });

    it('should have the property autoRotateIntervalInDays (base name: "auto_rotate_interval_in_days")', function() {
      // uncomment below and update the code to test the property autoRotateIntervalInDays
      //var instane = new akeyless.ActiveDirectoryPayload();
      //expect(instance).to.be();
    });

    it('should have the property autoRotateRotationHour (base name: "auto_rotate_rotation_hour")', function() {
      // uncomment below and update the code to test the property autoRotateRotationHour
      //var instane = new akeyless.ActiveDirectoryPayload();
      //expect(instance).to.be();
    });

    it('should have the property computerBaseDn (base name: "computer_base_dn")', function() {
      // uncomment below and update the code to test the property computerBaseDn
      //var instane = new akeyless.ActiveDirectoryPayload();
      //expect(instance).to.be();
    });

    it('should have the property discoverLocalUsers (base name: "discover_local_users")', function() {
      // uncomment below and update the code to test the property discoverLocalUsers
      //var instane = new akeyless.ActiveDirectoryPayload();
      //expect(instance).to.be();
    });

    it('should have the property domainName (base name: "domain_name")', function() {
      // uncomment below and update the code to test the property domainName
      //var instane = new akeyless.ActiveDirectoryPayload();
      //expect(instance).to.be();
    });

    it('should have the property domainServerTargetsPathTemplate (base name: "domain_server_targets_path_template")', function() {
      // uncomment below and update the code to test the property domainServerTargetsPathTemplate
      //var instane = new akeyless.ActiveDirectoryPayload();
      //expect(instance).to.be();
    });

    it('should have the property domainUsersRotatedSecretsPathTemplate (base name: "domain_users_rotated_secrets_path_template")', function() {
      // uncomment below and update the code to test the property domainUsersRotatedSecretsPathTemplate
      //var instane = new akeyless.ActiveDirectoryPayload();
      //expect(instance).to.be();
    });

    it('should have the property enableRdpSra (base name: "enable_rdp_sra")', function() {
      // uncomment below and update the code to test the property enableRdpSra
      //var instane = new akeyless.ActiveDirectoryPayload();
      //expect(instance).to.be();
    });

    it('should have the property localUsersIgnoreList (base name: "local_users_ignore_list")', function() {
      // uncomment below and update the code to test the property localUsersIgnoreList
      //var instane = new akeyless.ActiveDirectoryPayload();
      //expect(instance).to.be();
    });

    it('should have the property localUsersRotatedSecretsPathTemplate (base name: "local_users_rotated_secrets_path_template")', function() {
      // uncomment below and update the code to test the property localUsersRotatedSecretsPathTemplate
      //var instane = new akeyless.ActiveDirectoryPayload();
      //expect(instance).to.be();
    });

    it('should have the property sshPort (base name: "ssh_port")', function() {
      // uncomment below and update the code to test the property sshPort
      //var instane = new akeyless.ActiveDirectoryPayload();
      //expect(instance).to.be();
    });

    it('should have the property userBaseDn (base name: "user_base_dn")', function() {
      // uncomment below and update the code to test the property userBaseDn
      //var instane = new akeyless.ActiveDirectoryPayload();
      //expect(instance).to.be();
    });

    it('should have the property userGroups (base name: "user_groups")', function() {
      // uncomment below and update the code to test the property userGroups
      //var instane = new akeyless.ActiveDirectoryPayload();
      //expect(instance).to.be();
    });

  });

}));
