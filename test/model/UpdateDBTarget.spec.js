/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.akeyless);
  }
}(this, function(expect, akeyless) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new akeyless.UpdateDBTarget();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UpdateDBTarget', function() {
    it('should create an instance of UpdateDBTarget', function() {
      // uncomment below and update the code to test UpdateDBTarget
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be.a(akeyless.UpdateDBTarget);
    });

    it('should have the property comment (base name: "comment")', function() {
      // uncomment below and update the code to test the property comment
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property dbName (base name: "db-name")', function() {
      // uncomment below and update the code to test the property dbName
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property dbServerCertificates (base name: "db-server-certificates")', function() {
      // uncomment below and update the code to test the property dbServerCertificates
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property dbServerName (base name: "db-server-name")', function() {
      // uncomment below and update the code to test the property dbServerName
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property dbType (base name: "db-type")', function() {
      // uncomment below and update the code to test the property dbType
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property host (base name: "host")', function() {
      // uncomment below and update the code to test the property host
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property key (base name: "key")', function() {
      // uncomment below and update the code to test the property key
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property mongodbAtlas (base name: "mongodb-atlas")', function() {
      // uncomment below and update the code to test the property mongodbAtlas
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property mongodbAtlasApiPrivateKey (base name: "mongodb-atlas-api-private-key")', function() {
      // uncomment below and update the code to test the property mongodbAtlasApiPrivateKey
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property mongodbAtlasApiPublicKey (base name: "mongodb-atlas-api-public-key")', function() {
      // uncomment below and update the code to test the property mongodbAtlasApiPublicKey
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property mongodbAtlasProjectId (base name: "mongodb-atlas-project-id")', function() {
      // uncomment below and update the code to test the property mongodbAtlasProjectId
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property mongodbDefaultAuthDb (base name: "mongodb-default-auth-db")', function() {
      // uncomment below and update the code to test the property mongodbDefaultAuthDb
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property mongodbHostPort (base name: "mongodb-host-port")', function() {
      // uncomment below and update the code to test the property mongodbHostPort
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property mongodbPassword (base name: "mongodb-password")', function() {
      // uncomment below and update the code to test the property mongodbPassword
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property mongodbServerUri (base name: "mongodb-server-uri")', function() {
      // uncomment below and update the code to test the property mongodbServerUri
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property mongodbUriOptions (base name: "mongodb-uri-options")', function() {
      // uncomment below and update the code to test the property mongodbUriOptions
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property mongodbUsername (base name: "mongodb-username")', function() {
      // uncomment below and update the code to test the property mongodbUsername
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property newName (base name: "new-name")', function() {
      // uncomment below and update the code to test the property newName
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "port")', function() {
      // uncomment below and update the code to test the property port
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property pwd (base name: "pwd")', function() {
      // uncomment below and update the code to test the property pwd
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property snowflakeAccount (base name: "snowflake-account")', function() {
      // uncomment below and update the code to test the property snowflakeAccount
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property token (base name: "token")', function() {
      // uncomment below and update the code to test the property token
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property uidToken (base name: "uid-token")', function() {
      // uncomment below and update the code to test the property uidToken
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property updateVersion (base name: "update-version")', function() {
      // uncomment below and update the code to test the property updateVersion
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property userName (base name: "user-name")', function() {
      // uncomment below and update the code to test the property userName
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instane = new akeyless.UpdateDBTarget();
      //expect(instance).to.be();
    });

  });

}));
