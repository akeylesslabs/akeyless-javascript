/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.akeyless);
  }
}(this, function(expect, akeyless) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new akeyless.DSProducerDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DSProducerDetails', function() {
    it('should create an instance of DSProducerDetails', function() {
      // uncomment below and update the code to test DSProducerDetails
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be.a(akeyless.DSProducerDetails);
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property adminName (base name: "admin_name")', function() {
      // uncomment below and update the code to test the property adminName
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property adminPwd (base name: "admin_pwd")', function() {
      // uncomment below and update the code to test the property adminPwd
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property adminRotationIntervalDays (base name: "admin_rotation_interval_days")', function() {
      // uncomment below and update the code to test the property adminRotationIntervalDays
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property allowSubdomains (base name: "allow_subdomains")', function() {
      // uncomment below and update the code to test the property allowSubdomains
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property allowedDomains (base name: "allowed_domains")', function() {
      // uncomment below and update the code to test the property allowedDomains
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property artifactoryAdminApikey (base name: "artifactory_admin_apikey")', function() {
      // uncomment below and update the code to test the property artifactoryAdminApikey
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property artifactoryAdminUsername (base name: "artifactory_admin_username")', function() {
      // uncomment below and update the code to test the property artifactoryAdminUsername
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property artifactoryBaseUrl (base name: "artifactory_base_url")', function() {
      // uncomment below and update the code to test the property artifactoryBaseUrl
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property artifactoryTokenAudience (base name: "artifactory_token_audience")', function() {
      // uncomment below and update the code to test the property artifactoryTokenAudience
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property artifactoryTokenScope (base name: "artifactory_token_scope")', function() {
      // uncomment below and update the code to test the property artifactoryTokenScope
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property autoGeneratedFolder (base name: "auto_generated_folder")', function() {
      // uncomment below and update the code to test the property autoGeneratedFolder
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property awsAccessKeyId (base name: "aws_access_key_id")', function() {
      // uncomment below and update the code to test the property awsAccessKeyId
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property awsAccessMode (base name: "aws_access_mode")', function() {
      // uncomment below and update the code to test the property awsAccessMode
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property awsRegion (base name: "aws_region")', function() {
      // uncomment below and update the code to test the property awsRegion
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property awsRoleArns (base name: "aws_role_arns")', function() {
      // uncomment below and update the code to test the property awsRoleArns
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property awsSecretAccessKey (base name: "aws_secret_access_key")', function() {
      // uncomment below and update the code to test the property awsSecretAccessKey
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property awsSessionToken (base name: "aws_session_token")', function() {
      // uncomment below and update the code to test the property awsSessionToken
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property awsUserConsoleAccess (base name: "aws_user_console_access")', function() {
      // uncomment below and update the code to test the property awsUserConsoleAccess
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property awsUserGroups (base name: "aws_user_groups")', function() {
      // uncomment below and update the code to test the property awsUserGroups
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property awsUserPolicies (base name: "aws_user_policies")', function() {
      // uncomment below and update the code to test the property awsUserPolicies
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property awsUserProgrammaticAccess (base name: "aws_user_programmatic_access")', function() {
      // uncomment below and update the code to test the property awsUserProgrammaticAccess
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property azureAppObjectId (base name: "azure_app_object_id")', function() {
      // uncomment below and update the code to test the property azureAppObjectId
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property azureClientId (base name: "azure_client_id")', function() {
      // uncomment below and update the code to test the property azureClientId
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property azureClientSecret (base name: "azure_client_secret")', function() {
      // uncomment below and update the code to test the property azureClientSecret
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property azureTenantId (base name: "azure_tenant_id")', function() {
      // uncomment below and update the code to test the property azureTenantId
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property azureUserGroupsObjId (base name: "azure_user_groups_obj_id")', function() {
      // uncomment below and update the code to test the property azureUserGroupsObjId
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property azureUserPortalAccess (base name: "azure_user_portal_access")', function() {
      // uncomment below and update the code to test the property azureUserPortalAccess
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property azureUserProgrammaticAccess (base name: "azure_user_programmatic_access")', function() {
      // uncomment below and update the code to test the property azureUserProgrammaticAccess
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property azureUserRolesTemplateId (base name: "azure_user_roles_template_id")', function() {
      // uncomment below and update the code to test the property azureUserRolesTemplateId
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property chefOrganizations (base name: "chef_organizations")', function() {
      // uncomment below and update the code to test the property chefOrganizations
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property chefServerAccessMode (base name: "chef_server_access_mode")', function() {
      // uncomment below and update the code to test the property chefServerAccessMode
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property chefServerHostName (base name: "chef_server_host_name")', function() {
      // uncomment below and update the code to test the property chefServerHostName
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property chefServerKey (base name: "chef_server_key")', function() {
      // uncomment below and update the code to test the property chefServerKey
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property chefServerPort (base name: "chef_server_port")', function() {
      // uncomment below and update the code to test the property chefServerPort
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property chefServerUrl (base name: "chef_server_url")', function() {
      // uncomment below and update the code to test the property chefServerUrl
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property chefServerUsername (base name: "chef_server_username")', function() {
      // uncomment below and update the code to test the property chefServerUsername
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property chefSkipSsl (base name: "chef_skip_ssl")', function() {
      // uncomment below and update the code to test the property chefSkipSsl
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property createCertUsingPki (base name: "create_cert_using_pki")', function() {
      // uncomment below and update the code to test the property createCertUsingPki
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property dbHostName (base name: "db_host_name")', function() {
      // uncomment below and update the code to test the property dbHostName
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property dbIsolationLevel (base name: "db_isolation_level")', function() {
      // uncomment below and update the code to test the property dbIsolationLevel
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property dbMaxIdleConns (base name: "db_max_idle_conns")', function() {
      // uncomment below and update the code to test the property dbMaxIdleConns
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property dbMaxOpenConns (base name: "db_max_open_conns")', function() {
      // uncomment below and update the code to test the property dbMaxOpenConns
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property dbName (base name: "db_name")', function() {
      // uncomment below and update the code to test the property dbName
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property dbPort (base name: "db_port")', function() {
      // uncomment below and update the code to test the property dbPort
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property dbPwd (base name: "db_pwd")', function() {
      // uncomment below and update the code to test the property dbPwd
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property dbServerCertificates (base name: "db_server_certificates")', function() {
      // uncomment below and update the code to test the property dbServerCertificates
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property dbServerName (base name: "db_server_name")', function() {
      // uncomment below and update the code to test the property dbServerName
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property dbUserName (base name: "db_user_name")', function() {
      // uncomment below and update the code to test the property dbUserName
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property dynamicSecretId (base name: "dynamic_secret_id")', function() {
      // uncomment below and update the code to test the property dynamicSecretId
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property dynamicSecretKey (base name: "dynamic_secret_key")', function() {
      // uncomment below and update the code to test the property dynamicSecretKey
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property dynamicSecretName (base name: "dynamic_secret_name")', function() {
      // uncomment below and update the code to test the property dynamicSecretName
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property dynamicSecretType (base name: "dynamic_secret_type")', function() {
      // uncomment below and update the code to test the property dynamicSecretType
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property eksAccessKeyId (base name: "eks_access_key_id")', function() {
      // uncomment below and update the code to test the property eksAccessKeyId
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property eksAssumeRole (base name: "eks_assume_role")', function() {
      // uncomment below and update the code to test the property eksAssumeRole
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property eksClusterCaCertificate (base name: "eks_cluster_ca_certificate")', function() {
      // uncomment below and update the code to test the property eksClusterCaCertificate
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property eksClusterEndpoint (base name: "eks_cluster_endpoint")', function() {
      // uncomment below and update the code to test the property eksClusterEndpoint
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property eksClusterName (base name: "eks_cluster_name")', function() {
      // uncomment below and update the code to test the property eksClusterName
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property eksRegion (base name: "eks_region")', function() {
      // uncomment below and update the code to test the property eksRegion
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property eksSecretAccessKey (base name: "eks_secret_access_key")', function() {
      // uncomment below and update the code to test the property eksSecretAccessKey
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property enableAdminRotation (base name: "enable_admin_rotation")', function() {
      // uncomment below and update the code to test the property enableAdminRotation
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property failureMessage (base name: "failure_message")', function() {
      // uncomment below and update the code to test the property failureMessage
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property fixedUserOnly (base name: "fixed_user_only")', function() {
      // uncomment below and update the code to test the property fixedUserOnly
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property gkeClusterCaCertificate (base name: "gke_cluster_ca_certificate")', function() {
      // uncomment below and update the code to test the property gkeClusterCaCertificate
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property gkeClusterComputeZone (base name: "gke_cluster_compute_zone")', function() {
      // uncomment below and update the code to test the property gkeClusterComputeZone
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property gkeClusterEndpoint (base name: "gke_cluster_endpoint")', function() {
      // uncomment below and update the code to test the property gkeClusterEndpoint
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property gkeClusterName (base name: "gke_cluster_name")', function() {
      // uncomment below and update the code to test the property gkeClusterName
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property gkeProjectId (base name: "gke_project_id")', function() {
      // uncomment below and update the code to test the property gkeProjectId
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property gkeServiceAccountKey (base name: "gke_service_account_key")', function() {
      // uncomment below and update the code to test the property gkeServiceAccountKey
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property gkeServiceAccountName (base name: "gke_service_account_name")', function() {
      // uncomment below and update the code to test the property gkeServiceAccountName
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property groups (base name: "groups")', function() {
      // uncomment below and update the code to test the property groups
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property hostName (base name: "host_name")', function() {
      // uncomment below and update the code to test the property hostName
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property hostPort (base name: "host_port")', function() {
      // uncomment below and update the code to test the property hostPort
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property lastAdminRotation (base name: "last_admin_rotation")', function() {
      // uncomment below and update the code to test the property lastAdminRotation
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property mongodbAtlasApiPrivateKey (base name: "mongodb_atlas_api_private_key")', function() {
      // uncomment below and update the code to test the property mongodbAtlasApiPrivateKey
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property mongodbAtlasApiPublicKey (base name: "mongodb_atlas_api_public_key")', function() {
      // uncomment below and update the code to test the property mongodbAtlasApiPublicKey
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property mongodbAtlasProjectId (base name: "mongodb_atlas_project_id")', function() {
      // uncomment below and update the code to test the property mongodbAtlasProjectId
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property mongodbDbName (base name: "mongodb_db_name")', function() {
      // uncomment below and update the code to test the property mongodbDbName
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property mongodbDefaultAuthDb (base name: "mongodb_default_auth_db")', function() {
      // uncomment below and update the code to test the property mongodbDefaultAuthDb
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property mongodbHostPort (base name: "mongodb_host_port")', function() {
      // uncomment below and update the code to test the property mongodbHostPort
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property mongodbIsAtlas (base name: "mongodb_is_atlas")', function() {
      // uncomment below and update the code to test the property mongodbIsAtlas
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property mongodbPassword (base name: "mongodb_password")', function() {
      // uncomment below and update the code to test the property mongodbPassword
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property mongodbRoles (base name: "mongodb_roles")', function() {
      // uncomment below and update the code to test the property mongodbRoles
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property mongodbUriConnection (base name: "mongodb_uri_connection")', function() {
      // uncomment below and update the code to test the property mongodbUriConnection
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property mongodbUriOptions (base name: "mongodb_uri_options")', function() {
      // uncomment below and update the code to test the property mongodbUriOptions
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property mongodbUsername (base name: "mongodb_username")', function() {
      // uncomment below and update the code to test the property mongodbUsername
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property mssqlCreationStatements (base name: "mssql_creation_statements")', function() {
      // uncomment below and update the code to test the property mssqlCreationStatements
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property mssqlRevocationStatements (base name: "mssql_revocation_statements")', function() {
      // uncomment below and update the code to test the property mssqlRevocationStatements
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property mysqlCreationStatements (base name: "mysql_creation_statements")', function() {
      // uncomment below and update the code to test the property mysqlCreationStatements
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property postgresCreationStatements (base name: "postgres_creation_statements")', function() {
      // uncomment below and update the code to test the property postgresCreationStatements
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property rabbitmqServerPassword (base name: "rabbitmq_server_password")', function() {
      // uncomment below and update the code to test the property rabbitmqServerPassword
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property rabbitmqServerUri (base name: "rabbitmq_server_uri")', function() {
      // uncomment below and update the code to test the property rabbitmqServerUri
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property rabbitmqServerUser (base name: "rabbitmq_server_user")', function() {
      // uncomment below and update the code to test the property rabbitmqServerUser
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property rabbitmqUserConfPermission (base name: "rabbitmq_user_conf_permission")', function() {
      // uncomment below and update the code to test the property rabbitmqUserConfPermission
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property rabbitmqUserReadPermission (base name: "rabbitmq_user_read_permission")', function() {
      // uncomment below and update the code to test the property rabbitmqUserReadPermission
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property rabbitmqUserTags (base name: "rabbitmq_user_tags")', function() {
      // uncomment below and update the code to test the property rabbitmqUserTags
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property rabbitmqUserVhost (base name: "rabbitmq_user_vhost")', function() {
      // uncomment below and update the code to test the property rabbitmqUserVhost
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property rabbitmqUserWritePermission (base name: "rabbitmq_user_write_permission")', function() {
      // uncomment below and update the code to test the property rabbitmqUserWritePermission
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property rootFirstInChain (base name: "root_first_in_chain")', function() {
      // uncomment below and update the code to test the property rootFirstInChain
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property shouldStop (base name: "should_stop")', function() {
      // uncomment below and update the code to test the property shouldStop
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property signerKeyName (base name: "signer_key_name")', function() {
      // uncomment below and update the code to test the property signerKeyName
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property storePrivateKey (base name: "store_private_key")', function() {
      // uncomment below and update the code to test the property storePrivateKey
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property userPrincipalName (base name: "user_principal_name")', function() {
      // uncomment below and update the code to test the property userPrincipalName
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property userTtl (base name: "user_ttl")', function() {
      // uncomment below and update the code to test the property userTtl
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property venafiApiKey (base name: "venafi_api_key")', function() {
      // uncomment below and update the code to test the property venafiApiKey
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

    it('should have the property venafiZone (base name: "venafi_zone")', function() {
      // uncomment below and update the code to test the property venafiZone
      //var instane = new akeyless.DSProducerDetails();
      //expect(instance).to.be();
    });

  });

}));
