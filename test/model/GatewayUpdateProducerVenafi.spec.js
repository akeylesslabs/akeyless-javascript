/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.akeyless);
  }
}(this, function(expect, akeyless) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new akeyless.GatewayUpdateProducerVenafi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GatewayUpdateProducerVenafi', function() {
    it('should create an instance of GatewayUpdateProducerVenafi', function() {
      // uncomment below and update the code to test GatewayUpdateProducerVenafi
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be.a(akeyless.GatewayUpdateProducerVenafi);
    });

    it('should have the property adminRotationIntervalDays (base name: "admin-rotation-interval-days")', function() {
      // uncomment below and update the code to test the property adminRotationIntervalDays
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property allowSubdomains (base name: "allow-subdomains")', function() {
      // uncomment below and update the code to test the property allowSubdomains
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property allowedDomains (base name: "allowed-domains")', function() {
      // uncomment below and update the code to test the property allowedDomains
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property autoGeneratedFolder (base name: "auto-generated-folder")', function() {
      // uncomment below and update the code to test the property autoGeneratedFolder
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property deleteProtection (base name: "delete_protection")', function() {
      // uncomment below and update the code to test the property deleteProtection
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property enableAdminRotation (base name: "enable-admin-rotation")', function() {
      // uncomment below and update the code to test the property enableAdminRotation
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property json (base name: "json")', function() {
      // uncomment below and update the code to test the property json
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property newName (base name: "new-name")', function() {
      // uncomment below and update the code to test the property newName
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property producerEncryptionKeyName (base name: "producer-encryption-key-name")', function() {
      // uncomment below and update the code to test the property producerEncryptionKeyName
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property rootFirstInChain (base name: "root-first-in-chain")', function() {
      // uncomment below and update the code to test the property rootFirstInChain
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property signUsingAkeylessPki (base name: "sign-using-akeyless-pki")', function() {
      // uncomment below and update the code to test the property signUsingAkeylessPki
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property signerKeyName (base name: "signer-key-name")', function() {
      // uncomment below and update the code to test the property signerKeyName
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property storePrivateKey (base name: "store-private-key")', function() {
      // uncomment below and update the code to test the property storePrivateKey
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property targetName (base name: "target-name")', function() {
      // uncomment below and update the code to test the property targetName
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property token (base name: "token")', function() {
      // uncomment below and update the code to test the property token
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property uidToken (base name: "uid-token")', function() {
      // uncomment below and update the code to test the property uidToken
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property userTtl (base name: "user-ttl")', function() {
      // uncomment below and update the code to test the property userTtl
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property venafiAccessToken (base name: "venafi-access-token")', function() {
      // uncomment below and update the code to test the property venafiAccessToken
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property venafiApiKey (base name: "venafi-api-key")', function() {
      // uncomment below and update the code to test the property venafiApiKey
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property venafiBaseurl (base name: "venafi-baseurl")', function() {
      // uncomment below and update the code to test the property venafiBaseurl
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property venafiClientId (base name: "venafi-client-id")', function() {
      // uncomment below and update the code to test the property venafiClientId
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property venafiRefreshToken (base name: "venafi-refresh-token")', function() {
      // uncomment below and update the code to test the property venafiRefreshToken
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property venafiUseTpp (base name: "venafi-use-tpp")', function() {
      // uncomment below and update the code to test the property venafiUseTpp
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

    it('should have the property venafiZone (base name: "venafi-zone")', function() {
      // uncomment below and update the code to test the property venafiZone
      //var instane = new akeyless.GatewayUpdateProducerVenafi();
      //expect(instance).to.be();
    });

  });

}));
