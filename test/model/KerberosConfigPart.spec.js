/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.akeyless);
  }
}(this, function(expect, akeyless) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new akeyless.KerberosConfigPart();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('KerberosConfigPart', function() {
    it('should create an instance of KerberosConfigPart', function() {
      // uncomment below and update the code to test KerberosConfigPart
      //var instane = new akeyless.KerberosConfigPart();
      //expect(instance).to.be.a(akeyless.KerberosConfigPart);
    });

    it('should have the property kerberosAccessId (base name: "kerberos_access_id")', function() {
      // uncomment below and update the code to test the property kerberosAccessId
      //var instane = new akeyless.KerberosConfigPart();
      //expect(instance).to.be();
    });

    it('should have the property kerberosKeytab (base name: "kerberos_keytab")', function() {
      // uncomment below and update the code to test the property kerberosKeytab
      //var instane = new akeyless.KerberosConfigPart();
      //expect(instance).to.be();
    });

    it('should have the property kerberosKrb5Conf (base name: "kerberos_krb_5_conf")', function() {
      // uncomment below and update the code to test the property kerberosKrb5Conf
      //var instane = new akeyless.KerberosConfigPart();
      //expect(instance).to.be();
    });

    it('should have the property kerberosPrivateKey (base name: "kerberos_private_key")', function() {
      // uncomment below and update the code to test the property kerberosPrivateKey
      //var instane = new akeyless.KerberosConfigPart();
      //expect(instance).to.be();
    });

    it('should have the property ldapAnonymousSearch (base name: "ldap_anonymous_search")', function() {
      // uncomment below and update the code to test the property ldapAnonymousSearch
      //var instane = new akeyless.KerberosConfigPart();
      //expect(instance).to.be();
    });

    it('should have the property ldapBindDn (base name: "ldap_bind_dn")', function() {
      // uncomment below and update the code to test the property ldapBindDn
      //var instane = new akeyless.KerberosConfigPart();
      //expect(instance).to.be();
    });

    it('should have the property ldapBindPassword (base name: "ldap_bind_password")', function() {
      // uncomment below and update the code to test the property ldapBindPassword
      //var instane = new akeyless.KerberosConfigPart();
      //expect(instance).to.be();
    });

    it('should have the property ldapCert (base name: "ldap_cert")', function() {
      // uncomment below and update the code to test the property ldapCert
      //var instane = new akeyless.KerberosConfigPart();
      //expect(instance).to.be();
    });

    it('should have the property ldapGroupAttr (base name: "ldap_group_attr")', function() {
      // uncomment below and update the code to test the property ldapGroupAttr
      //var instane = new akeyless.KerberosConfigPart();
      //expect(instance).to.be();
    });

    it('should have the property ldapGroupDn (base name: "ldap_group_dn")', function() {
      // uncomment below and update the code to test the property ldapGroupDn
      //var instane = new akeyless.KerberosConfigPart();
      //expect(instance).to.be();
    });

    it('should have the property ldapGroupFilter (base name: "ldap_group_filter")', function() {
      // uncomment below and update the code to test the property ldapGroupFilter
      //var instane = new akeyless.KerberosConfigPart();
      //expect(instance).to.be();
    });

    it('should have the property ldapUrl (base name: "ldap_url")', function() {
      // uncomment below and update the code to test the property ldapUrl
      //var instane = new akeyless.KerberosConfigPart();
      //expect(instance).to.be();
    });

    it('should have the property ldapUserAttr (base name: "ldap_user_attr")', function() {
      // uncomment below and update the code to test the property ldapUserAttr
      //var instane = new akeyless.KerberosConfigPart();
      //expect(instance).to.be();
    });

    it('should have the property ldapUserDn (base name: "ldap_user_dn")', function() {
      // uncomment below and update the code to test the property ldapUserDn
      //var instane = new akeyless.KerberosConfigPart();
      //expect(instance).to.be();
    });

  });

}));
