/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.akeyless);
  }
}(this, function(expect, akeyless) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new akeyless.TargetTypeDetailesInput();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TargetTypeDetailesInput', function() {
    it('should create an instance of TargetTypeDetailesInput', function() {
      // uncomment below and update the code to test TargetTypeDetailesInput
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be.a(akeyless.TargetTypeDetailesInput);
    });

    it('should have the property adminName (base name: "admin_name")', function() {
      // uncomment below and update the code to test the property adminName
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property adminPwd (base name: "admin_pwd")', function() {
      // uncomment below and update the code to test the property adminPwd
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property awsAccessKeyId (base name: "aws_access_key_id")', function() {
      // uncomment below and update the code to test the property awsAccessKeyId
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property awsRegion (base name: "aws_region")', function() {
      // uncomment below and update the code to test the property awsRegion
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property awsSecretAccessKey (base name: "aws_secret_access_key")', function() {
      // uncomment below and update the code to test the property awsSecretAccessKey
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property awsSessionToken (base name: "aws_session_token")', function() {
      // uncomment below and update the code to test the property awsSessionToken
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property dbHostName (base name: "db_host_name")', function() {
      // uncomment below and update the code to test the property dbHostName
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property dbName (base name: "db_name")', function() {
      // uncomment below and update the code to test the property dbName
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property dbPort (base name: "db_port")', function() {
      // uncomment below and update the code to test the property dbPort
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property dbPwd (base name: "db_pwd")', function() {
      // uncomment below and update the code to test the property dbPwd
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property dbServerCertificates (base name: "db_server_certificates")', function() {
      // uncomment below and update the code to test the property dbServerCertificates
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property dbServerName (base name: "db_server_name")', function() {
      // uncomment below and update the code to test the property dbServerName
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property dbUserName (base name: "db_user_name")', function() {
      // uncomment below and update the code to test the property dbUserName
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property hostName (base name: "host_name")', function() {
      // uncomment below and update the code to test the property hostName
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property hostPort (base name: "host_port")', function() {
      // uncomment below and update the code to test the property hostPort
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property ip (base name: "ip")', function() {
      // uncomment below and update the code to test the property ip
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property mongodbDbName (base name: "mongodb_db_name")', function() {
      // uncomment below and update the code to test the property mongodbDbName
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property mongodbUriConnection (base name: "mongodb_uri_connection")', function() {
      // uncomment below and update the code to test the property mongodbUriConnection
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "port")', function() {
      // uncomment below and update the code to test the property port
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property rabbitmqServerPassword (base name: "rabbitmq_server_password")', function() {
      // uncomment below and update the code to test the property rabbitmqServerPassword
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property rabbitmqServerUri (base name: "rabbitmq_server_uri")', function() {
      // uncomment below and update the code to test the property rabbitmqServerUri
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property rabbitmqServerUser (base name: "rabbitmq_server_user")', function() {
      // uncomment below and update the code to test the property rabbitmqServerUser
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instane = new akeyless.TargetTypeDetailesInput();
      //expect(instance).to.be();
    });

  });

}));
