/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.akeyless);
  }
}(this, function(expect, akeyless) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new akeyless.DynamicSecretCreateGoogleWorkspace();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DynamicSecretCreateGoogleWorkspace', function() {
    it('should create an instance of DynamicSecretCreateGoogleWorkspace', function() {
      // uncomment below and update the code to test DynamicSecretCreateGoogleWorkspace
      //var instane = new akeyless.DynamicSecretCreateGoogleWorkspace();
      //expect(instance).to.be.a(akeyless.DynamicSecretCreateGoogleWorkspace);
    });

    it('should have the property accessMode (base name: "access-mode")', function() {
      // uncomment below and update the code to test the property accessMode
      //var instane = new akeyless.DynamicSecretCreateGoogleWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property adminName (base name: "admin-name")', function() {
      // uncomment below and update the code to test the property adminName
      //var instane = new akeyless.DynamicSecretCreateGoogleWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property deleteProtection (base name: "delete_protection")', function() {
      // uncomment below and update the code to test the property deleteProtection
      //var instane = new akeyless.DynamicSecretCreateGoogleWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new akeyless.DynamicSecretCreateGoogleWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property gcpKey (base name: "gcp-key")', function() {
      // uncomment below and update the code to test the property gcpKey
      //var instane = new akeyless.DynamicSecretCreateGoogleWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property groupName (base name: "group-name")', function() {
      // uncomment below and update the code to test the property groupName
      //var instane = new akeyless.DynamicSecretCreateGoogleWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property groupRoleType (base name: "group-role-type")', function() {
      // uncomment below and update the code to test the property groupRoleType
      //var instane = new akeyless.DynamicSecretCreateGoogleWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property json (base name: "json")', function() {
      // uncomment below and update the code to test the property json
      //var instane = new akeyless.DynamicSecretCreateGoogleWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new akeyless.DynamicSecretCreateGoogleWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property producerEncryptionKeyName (base name: "producer-encryption-key-name")', function() {
      // uncomment below and update the code to test the property producerEncryptionKeyName
      //var instane = new akeyless.DynamicSecretCreateGoogleWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property roleName (base name: "role-name")', function() {
      // uncomment below and update the code to test the property roleName
      //var instane = new akeyless.DynamicSecretCreateGoogleWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property roleScope (base name: "role-scope")', function() {
      // uncomment below and update the code to test the property roleScope
      //var instane = new akeyless.DynamicSecretCreateGoogleWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instane = new akeyless.DynamicSecretCreateGoogleWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property targetName (base name: "target-name")', function() {
      // uncomment below and update the code to test the property targetName
      //var instane = new akeyless.DynamicSecretCreateGoogleWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property token (base name: "token")', function() {
      // uncomment below and update the code to test the property token
      //var instane = new akeyless.DynamicSecretCreateGoogleWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property uidToken (base name: "uid-token")', function() {
      // uncomment below and update the code to test the property uidToken
      //var instane = new akeyless.DynamicSecretCreateGoogleWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property userTtl (base name: "user-ttl")', function() {
      // uncomment below and update the code to test the property userTtl
      //var instane = new akeyless.DynamicSecretCreateGoogleWorkspace();
      //expect(instance).to.be();
    });

  });

}));
