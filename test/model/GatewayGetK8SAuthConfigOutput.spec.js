/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.akeyless);
  }
}(this, function(expect, akeyless) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new akeyless.GatewayGetK8SAuthConfigOutput();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GatewayGetK8SAuthConfigOutput', function() {
    it('should create an instance of GatewayGetK8SAuthConfigOutput', function() {
      // uncomment below and update the code to test GatewayGetK8SAuthConfigOutput
      //var instane = new akeyless.GatewayGetK8SAuthConfigOutput();
      //expect(instance).to.be.a(akeyless.GatewayGetK8SAuthConfigOutput);
    });

    it('should have the property amTokenExpiration (base name: "am_token_expiration")', function() {
      // uncomment below and update the code to test the property amTokenExpiration
      //var instane = new akeyless.GatewayGetK8SAuthConfigOutput();
      //expect(instance).to.be();
    });

    it('should have the property authMethodAccessId (base name: "auth_method_access_id")', function() {
      // uncomment below and update the code to test the property authMethodAccessId
      //var instane = new akeyless.GatewayGetK8SAuthConfigOutput();
      //expect(instance).to.be();
    });

    it('should have the property authMethodPrvKeyPem (base name: "auth_method_prv_key_pem")', function() {
      // uncomment below and update the code to test the property authMethodPrvKeyPem
      //var instane = new akeyless.GatewayGetK8SAuthConfigOutput();
      //expect(instance).to.be();
    });

    it('should have the property disableIssValidation (base name: "disable_iss_validation")', function() {
      // uncomment below and update the code to test the property disableIssValidation
      //var instane = new akeyless.GatewayGetK8SAuthConfigOutput();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new akeyless.GatewayGetK8SAuthConfigOutput();
      //expect(instance).to.be();
    });

    it('should have the property k8sCaCert (base name: "k8s_ca_cert")', function() {
      // uncomment below and update the code to test the property k8sCaCert
      //var instane = new akeyless.GatewayGetK8SAuthConfigOutput();
      //expect(instance).to.be();
    });

    it('should have the property k8sHost (base name: "k8s_host")', function() {
      // uncomment below and update the code to test the property k8sHost
      //var instane = new akeyless.GatewayGetK8SAuthConfigOutput();
      //expect(instance).to.be();
    });

    it('should have the property k8sIssuer (base name: "k8s_issuer")', function() {
      // uncomment below and update the code to test the property k8sIssuer
      //var instane = new akeyless.GatewayGetK8SAuthConfigOutput();
      //expect(instance).to.be();
    });

    it('should have the property k8sPubKeysPem (base name: "k8s_pub_keys_pem")', function() {
      // uncomment below and update the code to test the property k8sPubKeysPem
      //var instane = new akeyless.GatewayGetK8SAuthConfigOutput();
      //expect(instance).to.be();
    });

    it('should have the property k8sTokenReviewerJwt (base name: "k8s_token_reviewer_jwt")', function() {
      // uncomment below and update the code to test the property k8sTokenReviewerJwt
      //var instane = new akeyless.GatewayGetK8SAuthConfigOutput();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new akeyless.GatewayGetK8SAuthConfigOutput();
      //expect(instance).to.be();
    });

    it('should have the property protectionKey (base name: "protection_key")', function() {
      // uncomment below and update the code to test the property protectionKey
      //var instane = new akeyless.GatewayGetK8SAuthConfigOutput();
      //expect(instance).to.be();
    });

    it('should have the property useLocalCaJwt (base name: "use_local_ca_jwt")', function() {
      // uncomment below and update the code to test the property useLocalCaJwt
      //var instane = new akeyless.GatewayGetK8SAuthConfigOutput();
      //expect(instance).to.be();
    });

  });

}));
