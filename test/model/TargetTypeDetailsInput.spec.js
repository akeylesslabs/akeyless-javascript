/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.akeyless);
  }
}(this, function(expect, akeyless) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new akeyless.TargetTypeDetailsInput();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TargetTypeDetailsInput', function() {
    it('should create an instance of TargetTypeDetailsInput', function() {
      // uncomment below and update the code to test TargetTypeDetailsInput
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be.a(akeyless.TargetTypeDetailsInput);
    });

    it('should have the property artifactoryAdminApikey (base name: "artifactory_admin_apikey")', function() {
      // uncomment below and update the code to test the property artifactoryAdminApikey
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property artifactoryAdminUsername (base name: "artifactory_admin_username")', function() {
      // uncomment below and update the code to test the property artifactoryAdminUsername
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property artifactoryBaseUrl (base name: "artifactory_base_url")', function() {
      // uncomment below and update the code to test the property artifactoryBaseUrl
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property awsAccessKeyId (base name: "aws_access_key_id")', function() {
      // uncomment below and update the code to test the property awsAccessKeyId
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property awsRegion (base name: "aws_region")', function() {
      // uncomment below and update the code to test the property awsRegion
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property awsSecretAccessKey (base name: "aws_secret_access_key")', function() {
      // uncomment below and update the code to test the property awsSecretAccessKey
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property awsSessionToken (base name: "aws_session_token")', function() {
      // uncomment below and update the code to test the property awsSessionToken
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property azureClientId (base name: "azure_client_id")', function() {
      // uncomment below and update the code to test the property azureClientId
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property azureClientSecret (base name: "azure_client_secret")', function() {
      // uncomment below and update the code to test the property azureClientSecret
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property azureTenantId (base name: "azure_tenant_id")', function() {
      // uncomment below and update the code to test the property azureTenantId
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property chefServerHostName (base name: "chef_server_host_name")', function() {
      // uncomment below and update the code to test the property chefServerHostName
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property chefServerKey (base name: "chef_server_key")', function() {
      // uncomment below and update the code to test the property chefServerKey
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property chefServerPort (base name: "chef_server_port")', function() {
      // uncomment below and update the code to test the property chefServerPort
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property chefServerUrl (base name: "chef_server_url")', function() {
      // uncomment below and update the code to test the property chefServerUrl
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property chefServerUsername (base name: "chef_server_username")', function() {
      // uncomment below and update the code to test the property chefServerUsername
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property chefSkipSsl (base name: "chef_skip_ssl")', function() {
      // uncomment below and update the code to test the property chefSkipSsl
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property dbHostName (base name: "db_host_name")', function() {
      // uncomment below and update the code to test the property dbHostName
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property dbName (base name: "db_name")', function() {
      // uncomment below and update the code to test the property dbName
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property dbPort (base name: "db_port")', function() {
      // uncomment below and update the code to test the property dbPort
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property dbPwd (base name: "db_pwd")', function() {
      // uncomment below and update the code to test the property dbPwd
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property dbServerCertificates (base name: "db_server_certificates")', function() {
      // uncomment below and update the code to test the property dbServerCertificates
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property dbServerName (base name: "db_server_name")', function() {
      // uncomment below and update the code to test the property dbServerName
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property dbUserName (base name: "db_user_name")', function() {
      // uncomment below and update the code to test the property dbUserName
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property eksAccessKeyId (base name: "eks_access_key_id")', function() {
      // uncomment below and update the code to test the property eksAccessKeyId
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property eksAssumeRole (base name: "eks_assume_role")', function() {
      // uncomment below and update the code to test the property eksAssumeRole
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property eksClusterCaCertificate (base name: "eks_cluster_ca_certificate")', function() {
      // uncomment below and update the code to test the property eksClusterCaCertificate
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property eksClusterEndpoint (base name: "eks_cluster_endpoint")', function() {
      // uncomment below and update the code to test the property eksClusterEndpoint
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property eksClusterName (base name: "eks_cluster_name")', function() {
      // uncomment below and update the code to test the property eksClusterName
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property eksRegion (base name: "eks_region")', function() {
      // uncomment below and update the code to test the property eksRegion
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property eksSecretAccessKey (base name: "eks_secret_access_key")', function() {
      // uncomment below and update the code to test the property eksSecretAccessKey
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property gcpServiceAccountEmail (base name: "gcp_service_account_email")', function() {
      // uncomment below and update the code to test the property gcpServiceAccountEmail
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property gcpServiceAccountKey (base name: "gcp_service_account_key")', function() {
      // uncomment below and update the code to test the property gcpServiceAccountKey
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property gkeClusterCaCertificate (base name: "gke_cluster_ca_certificate")', function() {
      // uncomment below and update the code to test the property gkeClusterCaCertificate
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property gkeClusterEndpoint (base name: "gke_cluster_endpoint")', function() {
      // uncomment below and update the code to test the property gkeClusterEndpoint
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property gkeClusterName (base name: "gke_cluster_name")', function() {
      // uncomment below and update the code to test the property gkeClusterName
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property gkeServiceAccountKey (base name: "gke_service_account_key")', function() {
      // uncomment below and update the code to test the property gkeServiceAccountKey
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property gkeServiceAccountName (base name: "gke_service_account_name")', function() {
      // uncomment below and update the code to test the property gkeServiceAccountName
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property host (base name: "host")', function() {
      // uncomment below and update the code to test the property host
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property mongodbAtlas (base name: "mongodb_atlas")', function() {
      // uncomment below and update the code to test the property mongodbAtlas
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property mongodbAtlasApiPrivateKey (base name: "mongodb_atlas_api_private_key")', function() {
      // uncomment below and update the code to test the property mongodbAtlasApiPrivateKey
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property mongodbAtlasApiPublicKey (base name: "mongodb_atlas_api_public_key")', function() {
      // uncomment below and update the code to test the property mongodbAtlasApiPublicKey
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property mongodbAtlasProjectId (base name: "mongodb_atlas_project_id")', function() {
      // uncomment below and update the code to test the property mongodbAtlasProjectId
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property mongodbDbName (base name: "mongodb_db_name")', function() {
      // uncomment below and update the code to test the property mongodbDbName
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property mongodbDefaultAuthDb (base name: "mongodb_default_auth_db")', function() {
      // uncomment below and update the code to test the property mongodbDefaultAuthDb
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property mongodbHostPort (base name: "mongodb_host_port")', function() {
      // uncomment below and update the code to test the property mongodbHostPort
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property mongodbPassword (base name: "mongodb_password")', function() {
      // uncomment below and update the code to test the property mongodbPassword
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property mongodbUriConnection (base name: "mongodb_uri_connection")', function() {
      // uncomment below and update the code to test the property mongodbUriConnection
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property mongodbUriOptions (base name: "mongodb_uri_options")', function() {
      // uncomment below and update the code to test the property mongodbUriOptions
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property mongodbUsername (base name: "mongodb_username")', function() {
      // uncomment below and update the code to test the property mongodbUsername
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "port")', function() {
      // uncomment below and update the code to test the property port
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property privateKey (base name: "private_key")', function() {
      // uncomment below and update the code to test the property privateKey
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property privateKeyPassword (base name: "private_key_password")', function() {
      // uncomment below and update the code to test the property privateKeyPassword
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property rabbitmqServerPassword (base name: "rabbitmq_server_password")', function() {
      // uncomment below and update the code to test the property rabbitmqServerPassword
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property rabbitmqServerUri (base name: "rabbitmq_server_uri")', function() {
      // uncomment below and update the code to test the property rabbitmqServerUri
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property rabbitmqServerUser (base name: "rabbitmq_server_user")', function() {
      // uncomment below and update the code to test the property rabbitmqServerUser
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property sfAccount (base name: "sf_account")', function() {
      // uncomment below and update the code to test the property sfAccount
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property venafiApiKey (base name: "venafi_api_key")', function() {
      // uncomment below and update the code to test the property venafiApiKey
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property venafiBaseUrl (base name: "venafi_base_url")', function() {
      // uncomment below and update the code to test the property venafiBaseUrl
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property venafiTppPassword (base name: "venafi_tpp_password")', function() {
      // uncomment below and update the code to test the property venafiTppPassword
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property venafiTppUsername (base name: "venafi_tpp_username")', function() {
      // uncomment below and update the code to test the property venafiTppUsername
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property venafiUseTpp (base name: "venafi_use_tpp")', function() {
      // uncomment below and update the code to test the property venafiUseTpp
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

    it('should have the property venafiZone (base name: "venafi_zone")', function() {
      // uncomment below and update the code to test the property venafiZone
      //var instane = new akeyless.TargetTypeDetailsInput();
      //expect(instance).to.be();
    });

  });

}));
