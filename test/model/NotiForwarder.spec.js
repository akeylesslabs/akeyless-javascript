/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.akeyless);
  }
}(this, function(expect, akeyless) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new akeyless.NotiForwarder();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NotiForwarder', function() {
    it('should create an instance of NotiForwarder', function() {
      // uncomment below and update the code to test NotiForwarder
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be.a(akeyless.NotiForwarder);
    });

    it('should have the property clientPermissions (base name: "client_permissions")', function() {
      // uncomment below and update the code to test the property clientPermissions
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be();
    });

    it('should have the property comment (base name: "comment")', function() {
      // uncomment below and update the code to test the property comment
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be();
    });

    it('should have the property creationDate (base name: "creation_date")', function() {
      // uncomment below and update the code to test the property creationDate
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be();
    });

    it('should have the property endpoint (base name: "endpoint")', function() {
      // uncomment below and update the code to test the property endpoint
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be();
    });

    it('should have the property eventTypes (base name: "event_types")', function() {
      // uncomment below and update the code to test the property eventTypes
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be();
    });

    it('should have the property gatewayClusterId (base name: "gateway_cluster_id")', function() {
      // uncomment below and update the code to test the property gatewayClusterId
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be();
    });

    it('should have the property isEnabled (base name: "is_enabled")', function() {
      // uncomment below and update the code to test the property isEnabled
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be();
    });

    it('should have the property lastVersion (base name: "last_version")', function() {
      // uncomment below and update the code to test the property lastVersion
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be();
    });

    it('should have the property modificationDate (base name: "modification_date")', function() {
      // uncomment below and update the code to test the property modificationDate
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be();
    });

    it('should have the property notiForwarderId (base name: "noti_forwarder_id")', function() {
      // uncomment below and update the code to test the property notiForwarderId
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be();
    });

    it('should have the property notiForwarderName (base name: "noti_forwarder_name")', function() {
      // uncomment below and update the code to test the property notiForwarderName
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be();
    });

    it('should have the property notiForwarderType (base name: "noti_forwarder_type")', function() {
      // uncomment below and update the code to test the property notiForwarderType
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be();
    });

    it('should have the property notiForwarderVersions (base name: "noti_forwarder_versions")', function() {
      // uncomment below and update the code to test the property notiForwarderVersions
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be();
    });

    it('should have the property paths (base name: "paths")', function() {
      // uncomment below and update the code to test the property paths
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be();
    });

    it('should have the property protectionKey (base name: "protection_key")', function() {
      // uncomment below and update the code to test the property protectionKey
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be();
    });

    it('should have the property runnerType (base name: "runner_type")', function() {
      // uncomment below and update the code to test the property runnerType
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be();
    });

    it('should have the property timespanInSeconds (base name: "timespan_in_seconds")', function() {
      // uncomment below and update the code to test the property timespanInSeconds
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be();
    });

    it('should have the property toEmails (base name: "to_emails")', function() {
      // uncomment below and update the code to test the property toEmails
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be();
    });

    it('should have the property withCustomerFragment (base name: "with_customer_fragment")', function() {
      // uncomment below and update the code to test the property withCustomerFragment
      //var instane = new akeyless.NotiForwarder();
      //expect(instance).to.be();
    });

  });

}));
