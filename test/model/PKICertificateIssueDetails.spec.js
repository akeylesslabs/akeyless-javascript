/**
 * includes all operations supported by Akeyless.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.akl);
  }
}(this, function(expect, akl) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new akl.PKICertificateIssueDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PKICertificateIssueDetails', function() {
    it('should create an instance of PKICertificateIssueDetails', function() {
      // uncomment below and update the code to test PKICertificateIssueDetails
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be.a(akl.PKICertificateIssueDetails);
    });

    it('should have the property allowAnyName (base name: "allow_any_name")', function() {
      // uncomment below and update the code to test the property allowAnyName
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be();
    });

    it('should have the property allowSubdomains (base name: "allow_subdomains")', function() {
      // uncomment below and update the code to test the property allowSubdomains
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be();
    });

    it('should have the property allowedDomainsList (base name: "allowed_domains_list")', function() {
      // uncomment below and update the code to test the property allowedDomainsList
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be();
    });

    it('should have the property allowedUriSans (base name: "allowed_uri_sans")', function() {
      // uncomment below and update the code to test the property allowedUriSans
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be();
    });

    it('should have the property clientFlag (base name: "client_flag")', function() {
      // uncomment below and update the code to test the property clientFlag
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be();
    });

    it('should have the property codeSigningFlag (base name: "code_signing_flag")', function() {
      // uncomment below and update the code to test the property codeSigningFlag
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "country")', function() {
      // uncomment below and update the code to test the property country
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be();
    });

    it('should have the property enforceHostnames (base name: "enforce_hostnames")', function() {
      // uncomment below and update the code to test the property enforceHostnames
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be();
    });

    it('should have the property keyBits (base name: "key_bits")', function() {
      // uncomment below and update the code to test the property keyBits
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be();
    });

    it('should have the property keyType (base name: "key_type")', function() {
      // uncomment below and update the code to test the property keyType
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be();
    });

    it('should have the property keyUsageList (base name: "key_usage_list")', function() {
      // uncomment below and update the code to test the property keyUsageList
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be();
    });

    it('should have the property locality (base name: "locality")', function() {
      // uncomment below and update the code to test the property locality
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be();
    });

    it('should have the property notBeforeDuration (base name: "not_before_duration")', function() {
      // uncomment below and update the code to test the property notBeforeDuration
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be();
    });

    it('should have the property organizationList (base name: "organization_list")', function() {
      // uncomment below and update the code to test the property organizationList
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be();
    });

    it('should have the property organizationUnitList (base name: "organization_unit_list")', function() {
      // uncomment below and update the code to test the property organizationUnitList
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be();
    });

    it('should have the property postalCode (base name: "postal_code")', function() {
      // uncomment below and update the code to test the property postalCode
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be();
    });

    it('should have the property province (base name: "province")', function() {
      // uncomment below and update the code to test the property province
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be();
    });

    it('should have the property requireCn (base name: "require_cn")', function() {
      // uncomment below and update the code to test the property requireCn
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be();
    });

    it('should have the property serverFlag (base name: "server_flag")', function() {
      // uncomment below and update the code to test the property serverFlag
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be();
    });

    it('should have the property streetAddress (base name: "street_address")', function() {
      // uncomment below and update the code to test the property streetAddress
      //var instane = new akl.PKICertificateIssueDetails();
      //expect(instance).to.be();
    });

  });

}));
