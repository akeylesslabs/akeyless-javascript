/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.akeyless);
  }
}(this, function(expect, akeyless) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new akeyless.Connect();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Connect', function() {
    it('should create an instance of Connect', function() {
      // uncomment below and update the code to test Connect
      //var instane = new akeyless.Connect();
      //expect(instance).to.be.a(akeyless.Connect);
    });

    it('should have the property bastionCtrlPath (base name: "bastion-ctrl-path")', function() {
      // uncomment below and update the code to test the property bastionCtrlPath
      //var instane = new akeyless.Connect();
      //expect(instance).to.be();
    });

    it('should have the property bastionCtrlPort (base name: "bastion-ctrl-port")', function() {
      // uncomment below and update the code to test the property bastionCtrlPort
      //var instane = new akeyless.Connect();
      //expect(instance).to.be();
    });

    it('should have the property bastionCtrlProto (base name: "bastion-ctrl-proto")', function() {
      // uncomment below and update the code to test the property bastionCtrlProto
      //var instane = new akeyless.Connect();
      //expect(instance).to.be();
    });

    it('should have the property bastionCtrlSubdomain (base name: "bastion-ctrl-subdomain")', function() {
      // uncomment below and update the code to test the property bastionCtrlSubdomain
      //var instane = new akeyless.Connect();
      //expect(instance).to.be();
    });

    it('should have the property certIssuerName (base name: "cert-issuer-name")', function() {
      // uncomment below and update the code to test the property certIssuerName
      //var instane = new akeyless.Connect();
      //expect(instance).to.be();
    });

    it('should have the property identityFile (base name: "identity-file")', function() {
      // uncomment below and update the code to test the property identityFile
      //var instane = new akeyless.Connect();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new akeyless.Connect();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instane = new akeyless.Connect();
      //expect(instance).to.be();
    });

    it('should have the property sshExtraArgs (base name: "ssh-extra-args")', function() {
      // uncomment below and update the code to test the property sshExtraArgs
      //var instane = new akeyless.Connect();
      //expect(instance).to.be();
    });

    it('should have the property target (base name: "target")', function() {
      // uncomment below and update the code to test the property target
      //var instane = new akeyless.Connect();
      //expect(instance).to.be();
    });

    it('should have the property token (base name: "token")', function() {
      // uncomment below and update the code to test the property token
      //var instane = new akeyless.Connect();
      //expect(instance).to.be();
    });

    it('should have the property uidToken (base name: "uid-token")', function() {
      // uncomment below and update the code to test the property uidToken
      //var instane = new akeyless.Connect();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instane = new akeyless.Connect();
      //expect(instance).to.be();
    });

    it('should have the property viaBastion (base name: "via-bastion")', function() {
      // uncomment below and update the code to test the property viaBastion
      //var instane = new akeyless.Connect();
      //expect(instance).to.be();
    });

  });

}));
