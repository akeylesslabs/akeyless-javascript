/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.akeyless);
  }
}(this, function(expect, akeyless) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new akeyless.SignPKICertWithClassicKey();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SignPKICertWithClassicKey', function() {
    it('should create an instance of SignPKICertWithClassicKey', function() {
      // uncomment below and update the code to test SignPKICertWithClassicKey
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be.a(akeyless.SignPKICertWithClassicKey);
    });

    it('should have the property commonName (base name: "common-name")', function() {
      // uncomment below and update the code to test the property commonName
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "country")', function() {
      // uncomment below and update the code to test the property country
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be();
    });

    it('should have the property displayId (base name: "display-id")', function() {
      // uncomment below and update the code to test the property displayId
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be();
    });

    it('should have the property dnsNames (base name: "dns-names")', function() {
      // uncomment below and update the code to test the property dnsNames
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be();
    });

    it('should have the property keyUsage (base name: "key-usage")', function() {
      // uncomment below and update the code to test the property keyUsage
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be();
    });

    it('should have the property locality (base name: "locality")', function() {
      // uncomment below and update the code to test the property locality
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be();
    });

    it('should have the property organizationalUnits (base name: "organizational-units")', function() {
      // uncomment below and update the code to test the property organizationalUnits
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be();
    });

    it('should have the property organizations (base name: "organizations")', function() {
      // uncomment below and update the code to test the property organizations
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be();
    });

    it('should have the property postalCode (base name: "postal-code")', function() {
      // uncomment below and update the code to test the property postalCode
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be();
    });

    it('should have the property province (base name: "province")', function() {
      // uncomment below and update the code to test the property province
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be();
    });

    it('should have the property publicKeyPemData (base name: "public-key-pem-data")', function() {
      // uncomment below and update the code to test the property publicKeyPemData
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be();
    });

    it('should have the property signingMethod (base name: "signing-method")', function() {
      // uncomment below and update the code to test the property signingMethod
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be();
    });

    it('should have the property streetAddress (base name: "street-address")', function() {
      // uncomment below and update the code to test the property streetAddress
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be();
    });

    it('should have the property token (base name: "token")', function() {
      // uncomment below and update the code to test the property token
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be();
    });

    it('should have the property ttl (base name: "ttl")', function() {
      // uncomment below and update the code to test the property ttl
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be();
    });

    it('should have the property uidToken (base name: "uid-token")', function() {
      // uncomment below and update the code to test the property uidToken
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be();
    });

    it('should have the property uriSans (base name: "uri-sans")', function() {
      // uncomment below and update the code to test the property uriSans
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instane = new akeyless.SignPKICertWithClassicKey();
      //expect(instance).to.be();
    });

  });

}));
