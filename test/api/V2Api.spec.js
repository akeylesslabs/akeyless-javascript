/**
 * includes all operations supported by Akeyless.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.akl);
  }
}(this, function(expect, akl) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new akl.V2Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('V2Api', function() {
    describe('assocRoleAuthMethod', function() {
      it('should call assocRoleAuthMethod successfully', function(done) {
        //uncomment below and update the code to test assocRoleAuthMethod
        //instance.assocRoleAuthMethod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('auth', function() {
      it('should call auth successfully', function(done) {
        //uncomment below and update the code to test auth
        //instance.auth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('configure', function() {
      it('should call configure successfully', function(done) {
        //uncomment below and update the code to test configure
        //instance.configure(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAuthMethod', function() {
      it('should call createAuthMethod successfully', function(done) {
        //uncomment below and update the code to test createAuthMethod
        //instance.createAuthMethod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAuthMethodAWSIAM', function() {
      it('should call createAuthMethodAWSIAM successfully', function(done) {
        //uncomment below and update the code to test createAuthMethodAWSIAM
        //instance.createAuthMethodAWSIAM(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAuthMethodAzureAD', function() {
      it('should call createAuthMethodAzureAD successfully', function(done) {
        //uncomment below and update the code to test createAuthMethodAzureAD
        //instance.createAuthMethodAzureAD(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAuthMethodHuawei', function() {
      it('should call createAuthMethodHuawei successfully', function(done) {
        //uncomment below and update the code to test createAuthMethodHuawei
        //instance.createAuthMethodHuawei(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAuthMethodOAuth2', function() {
      it('should call createAuthMethodOAuth2 successfully', function(done) {
        //uncomment below and update the code to test createAuthMethodOAuth2
        //instance.createAuthMethodOAuth2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAuthMethodSAML', function() {
      it('should call createAuthMethodSAML successfully', function(done) {
        //uncomment below and update the code to test createAuthMethodSAML
        //instance.createAuthMethodSAML(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAuthMethodUniversalIdentity', function() {
      it('should call createAuthMethodUniversalIdentity successfully', function(done) {
        //uncomment below and update the code to test createAuthMethodUniversalIdentity
        //instance.createAuthMethodUniversalIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDynamicSecret', function() {
      it('should call createDynamicSecret successfully', function(done) {
        //uncomment below and update the code to test createDynamicSecret
        //instance.createDynamicSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createKey', function() {
      it('should call createKey successfully', function(done) {
        //uncomment below and update the code to test createKey
        //instance.createKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPKICertIssuer', function() {
      it('should call createPKICertIssuer successfully', function(done) {
        //uncomment below and update the code to test createPKICertIssuer
        //instance.createPKICertIssuer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRole', function() {
      it('should call createRole successfully', function(done) {
        //uncomment below and update the code to test createRole
        //instance.createRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSSHCertIssuer', function() {
      it('should call createSSHCertIssuer successfully', function(done) {
        //uncomment below and update the code to test createSSHCertIssuer
        //instance.createSSHCertIssuer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSecret', function() {
      it('should call createSecret successfully', function(done) {
        //uncomment below and update the code to test createSecret
        //instance.createSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('decrypt', function() {
      it('should call decrypt successfully', function(done) {
        //uncomment below and update the code to test decrypt
        //instance.decrypt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('decryptPKCS1', function() {
      it('should call decryptPKCS1 successfully', function(done) {
        //uncomment below and update the code to test decryptPKCS1
        //instance.decryptPKCS1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAuthMethod', function() {
      it('should call deleteAuthMethod successfully', function(done) {
        //uncomment below and update the code to test deleteAuthMethod
        //instance.deleteAuthMethod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAuthMethods', function() {
      it('should call deleteAuthMethods successfully', function(done) {
        //uncomment below and update the code to test deleteAuthMethods
        //instance.deleteAuthMethods(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteItem', function() {
      it('should call deleteItem successfully', function(done) {
        //uncomment below and update the code to test deleteItem
        //instance.deleteItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteItems', function() {
      it('should call deleteItems successfully', function(done) {
        //uncomment below and update the code to test deleteItems
        //instance.deleteItems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRole', function() {
      it('should call deleteRole successfully', function(done) {
        //uncomment below and update the code to test deleteRole
        //instance.deleteRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRoleAssociation', function() {
      it('should call deleteRoleAssociation successfully', function(done) {
        //uncomment below and update the code to test deleteRoleAssociation
        //instance.deleteRoleAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRoleRule', function() {
      it('should call deleteRoleRule successfully', function(done) {
        //uncomment below and update the code to test deleteRoleRule
        //instance.deleteRoleRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRoles', function() {
      it('should call deleteRoles successfully', function(done) {
        //uncomment below and update the code to test deleteRoles
        //instance.deleteRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeItem', function() {
      it('should call describeItem successfully', function(done) {
        //uncomment below and update the code to test describeItem
        //instance.describeItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('encrypt', function() {
      it('should call encrypt successfully', function(done) {
        //uncomment below and update the code to test encrypt
        //instance.encrypt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('encryptPKCS1', function() {
      it('should call encryptPKCS1 successfully', function(done) {
        //uncomment below and update the code to test encryptPKCS1
        //instance.encryptPKCS1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAuthMethod', function() {
      it('should call getAuthMethod successfully', function(done) {
        //uncomment below and update the code to test getAuthMethod
        //instance.getAuthMethod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDynamicSecretValue', function() {
      it('should call getDynamicSecretValue successfully', function(done) {
        //uncomment below and update the code to test getDynamicSecretValue
        //instance.getDynamicSecretValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRSAPublic', function() {
      it('should call getRSAPublic successfully', function(done) {
        //uncomment below and update the code to test getRSAPublic
        //instance.getRSAPublic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRole', function() {
      it('should call getRole successfully', function(done) {
        //uncomment below and update the code to test getRole
        //instance.getRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSSHCertificate', function() {
      it('should call getSSHCertificate successfully', function(done) {
        //uncomment below and update the code to test getSSHCertificate
        //instance.getSSHCertificate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSecretValue', function() {
      it('should call getSecretValue successfully', function(done) {
        //uncomment below and update the code to test getSecretValue
        //instance.getSecretValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAuthMethods', function() {
      it('should call listAuthMethods successfully', function(done) {
        //uncomment below and update the code to test listAuthMethods
        //instance.listAuthMethods(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listItems', function() {
      it('should call listItems successfully', function(done) {
        //uncomment below and update the code to test listItems
        //instance.listItems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRoles', function() {
      it('should call listRoles successfully', function(done) {
        //uncomment below and update the code to test listRoles
        //instance.listRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('moveObjects', function() {
      it('should call moveObjects successfully', function(done) {
        //uncomment below and update the code to test moveObjects
        //instance.moveObjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('refreshKey', function() {
      it('should call refreshKey successfully', function(done) {
        //uncomment below and update the code to test refreshKey
        //instance.refreshKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reverseRBAC', function() {
      it('should call reverseRBAC successfully', function(done) {
        //uncomment below and update the code to test reverseRBAC
        //instance.reverseRBAC(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rollbackSecret', function() {
      it('should call rollbackSecret successfully', function(done) {
        //uncomment below and update the code to test rollbackSecret
        //instance.rollbackSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rotateKey', function() {
      it('should call rotateKey successfully', function(done) {
        //uncomment below and update the code to test rotateKey
        //instance.rotateKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setItemState', function() {
      it('should call setItemState successfully', function(done) {
        //uncomment below and update the code to test setItemState
        //instance.setItemState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setRoleRule', function() {
      it('should call setRoleRule successfully', function(done) {
        //uncomment below and update the code to test setRoleRule
        //instance.setRoleRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('signPKCS1', function() {
      it('should call signPKCS1 successfully', function(done) {
        //uncomment below and update the code to test signPKCS1
        //instance.signPKCS1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('staticCredsAuth', function() {
      it('should call staticCredsAuth successfully', function(done) {
        //uncomment below and update the code to test staticCredsAuth
        //instance.staticCredsAuth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uidCreateChildToken', function() {
      it('should call uidCreateChildToken successfully', function(done) {
        //uncomment below and update the code to test uidCreateChildToken
        //instance.uidCreateChildToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uidGenerateToken', function() {
      it('should call uidGenerateToken successfully', function(done) {
        //uncomment below and update the code to test uidGenerateToken
        //instance.uidGenerateToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uidListChildren', function() {
      it('should call uidListChildren successfully', function(done) {
        //uncomment below and update the code to test uidListChildren
        //instance.uidListChildren(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uidRevokeToken', function() {
      it('should call uidRevokeToken successfully', function(done) {
        //uncomment below and update the code to test uidRevokeToken
        //instance.uidRevokeToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uidRotateToken', function() {
      it('should call uidRotateToken successfully', function(done) {
        //uncomment below and update the code to test uidRotateToken
        //instance.uidRotateToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateItem', function() {
      it('should call updateItem successfully', function(done) {
        //uncomment below and update the code to test updateItem
        //instance.updateItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRole', function() {
      it('should call updateRole successfully', function(done) {
        //uncomment below and update the code to test updateRole
        //instance.updateRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSecretVal', function() {
      it('should call updateSecretVal successfully', function(done) {
        //uncomment below and update the code to test updateSecretVal
        //instance.updateSecretVal(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadRSA', function() {
      it('should call uploadRSA successfully', function(done) {
        //uncomment below and update the code to test uploadRSA
        //instance.uploadRSA(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('verifyPKCS1', function() {
      it('should call verifyPKCS1 successfully', function(done) {
        //uncomment below and update the code to test verifyPKCS1
        //instance.verifyPKCS1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
