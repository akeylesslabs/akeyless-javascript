/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AkeylessGatewayConfig from '../model/AkeylessGatewayConfig';
import AliasDetails from '../model/AliasDetails';
import AllAnalyticsData from '../model/AllAnalyticsData';
import AllowedAccess from '../model/AllowedAccess';
import AssocRoleAuthMethod from '../model/AssocRoleAuthMethod';
import AssocTargetItem from '../model/AssocTargetItem';
import Auth from '../model/Auth';
import AuthMethod from '../model/AuthMethod';
import AuthMethodCreateApiKey from '../model/AuthMethodCreateApiKey';
import AuthMethodCreateAwsIam from '../model/AuthMethodCreateAwsIam';
import AuthMethodCreateAzureAD from '../model/AuthMethodCreateAzureAD';
import AuthMethodCreateCert from '../model/AuthMethodCreateCert';
import AuthMethodCreateEmail from '../model/AuthMethodCreateEmail';
import AuthMethodCreateGcp from '../model/AuthMethodCreateGcp';
import AuthMethodCreateK8s from '../model/AuthMethodCreateK8s';
import AuthMethodCreateKerberos from '../model/AuthMethodCreateKerberos';
import AuthMethodCreateLdap from '../model/AuthMethodCreateLdap';
import AuthMethodCreateOCI from '../model/AuthMethodCreateOCI';
import AuthMethodCreateOIDC from '../model/AuthMethodCreateOIDC';
import AuthMethodCreateOauth2 from '../model/AuthMethodCreateOauth2';
import AuthMethodCreateOutput from '../model/AuthMethodCreateOutput';
import AuthMethodCreateSAML from '../model/AuthMethodCreateSAML';
import AuthMethodCreateUniversalIdentity from '../model/AuthMethodCreateUniversalIdentity';
import AuthMethodDelete from '../model/AuthMethodDelete';
import AuthMethodDeleteOutput from '../model/AuthMethodDeleteOutput';
import AuthMethodGet from '../model/AuthMethodGet';
import AuthMethodList from '../model/AuthMethodList';
import AuthMethodUpdateApiKey from '../model/AuthMethodUpdateApiKey';
import AuthMethodUpdateAwsIam from '../model/AuthMethodUpdateAwsIam';
import AuthMethodUpdateAzureAD from '../model/AuthMethodUpdateAzureAD';
import AuthMethodUpdateCert from '../model/AuthMethodUpdateCert';
import AuthMethodUpdateEmail from '../model/AuthMethodUpdateEmail';
import AuthMethodUpdateGcp from '../model/AuthMethodUpdateGcp';
import AuthMethodUpdateK8s from '../model/AuthMethodUpdateK8s';
import AuthMethodUpdateKerberos from '../model/AuthMethodUpdateKerberos';
import AuthMethodUpdateLdap from '../model/AuthMethodUpdateLdap';
import AuthMethodUpdateOCI from '../model/AuthMethodUpdateOCI';
import AuthMethodUpdateOIDC from '../model/AuthMethodUpdateOIDC';
import AuthMethodUpdateOauth2 from '../model/AuthMethodUpdateOauth2';
import AuthMethodUpdateOutput from '../model/AuthMethodUpdateOutput';
import AuthMethodUpdateSAML from '../model/AuthMethodUpdateSAML';
import AuthMethodUpdateUniversalIdentity from '../model/AuthMethodUpdateUniversalIdentity';
import AuthOutput from '../model/AuthOutput';
import BastionConfigReplyObj from '../model/BastionConfigReplyObj';
import BastionsList from '../model/BastionsList';
import BatchEncryptionRequestLine from '../model/BatchEncryptionRequestLine';
import BatchTokenizationRequestLine from '../model/BatchTokenizationRequestLine';
import CacheConfigPart from '../model/CacheConfigPart';
import CalcPasswordSecurityInfo from '../model/CalcPasswordSecurityInfo';
import ChangeAdminAccountPassword from '../model/ChangeAdminAccountPassword';
import Configure from '../model/Configure';
import ConfigureOutput from '../model/ConfigureOutput';
import Connect from '../model/Connect';
import CreateAWSTarget from '../model/CreateAWSTarget';
import CreateAWSTargetOutput from '../model/CreateAWSTargetOutput';
import CreateArtifactoryTarget from '../model/CreateArtifactoryTarget';
import CreateArtifactoryTargetOutput from '../model/CreateArtifactoryTargetOutput';
import CreateAuthMethod from '../model/CreateAuthMethod';
import CreateAuthMethodAWSIAM from '../model/CreateAuthMethodAWSIAM';
import CreateAuthMethodAWSIAMOutput from '../model/CreateAuthMethodAWSIAMOutput';
import CreateAuthMethodAzureAD from '../model/CreateAuthMethodAzureAD';
import CreateAuthMethodAzureADOutput from '../model/CreateAuthMethodAzureADOutput';
import CreateAuthMethodCert from '../model/CreateAuthMethodCert';
import CreateAuthMethodCertOutput from '../model/CreateAuthMethodCertOutput';
import CreateAuthMethodEmail from '../model/CreateAuthMethodEmail';
import CreateAuthMethodEmailOutput from '../model/CreateAuthMethodEmailOutput';
import CreateAuthMethodGCP from '../model/CreateAuthMethodGCP';
import CreateAuthMethodGCPOutput from '../model/CreateAuthMethodGCPOutput';
import CreateAuthMethodHuawei from '../model/CreateAuthMethodHuawei';
import CreateAuthMethodHuaweiOutput from '../model/CreateAuthMethodHuaweiOutput';
import CreateAuthMethodK8S from '../model/CreateAuthMethodK8S';
import CreateAuthMethodK8SOutput from '../model/CreateAuthMethodK8SOutput';
import CreateAuthMethodLDAP from '../model/CreateAuthMethodLDAP';
import CreateAuthMethodLDAPOutput from '../model/CreateAuthMethodLDAPOutput';
import CreateAuthMethodOAuth2 from '../model/CreateAuthMethodOAuth2';
import CreateAuthMethodOAuth2Output from '../model/CreateAuthMethodOAuth2Output';
import CreateAuthMethodOCI from '../model/CreateAuthMethodOCI';
import CreateAuthMethodOCIOutput from '../model/CreateAuthMethodOCIOutput';
import CreateAuthMethodOIDC from '../model/CreateAuthMethodOIDC';
import CreateAuthMethodOIDCOutput from '../model/CreateAuthMethodOIDCOutput';
import CreateAuthMethodOutput from '../model/CreateAuthMethodOutput';
import CreateAuthMethodSAML from '../model/CreateAuthMethodSAML';
import CreateAuthMethodSAMLOutput from '../model/CreateAuthMethodSAMLOutput';
import CreateAuthMethodUniversalIdentity from '../model/CreateAuthMethodUniversalIdentity';
import CreateAuthMethodUniversalIdentityOutput from '../model/CreateAuthMethodUniversalIdentityOutput';
import CreateAzureTarget from '../model/CreateAzureTarget';
import CreateAzureTargetOutput from '../model/CreateAzureTargetOutput';
import CreateCertificate from '../model/CreateCertificate';
import CreateCertificateOutput from '../model/CreateCertificateOutput';
import CreateClassicKey from '../model/CreateClassicKey';
import CreateClassicKeyOutput from '../model/CreateClassicKeyOutput';
import CreateDBTarget from '../model/CreateDBTarget';
import CreateDBTargetOutput from '../model/CreateDBTargetOutput';
import CreateDFCKey from '../model/CreateDFCKey';
import CreateDFCKeyOutput from '../model/CreateDFCKeyOutput';
import CreateDockerhubTarget from '../model/CreateDockerhubTarget';
import CreateDockerhubTargetOutput from '../model/CreateDockerhubTargetOutput';
import CreateDynamicSecret from '../model/CreateDynamicSecret';
import CreateEKSTarget from '../model/CreateEKSTarget';
import CreateEKSTargetOutput from '../model/CreateEKSTargetOutput';
import CreateESM from '../model/CreateESM';
import CreateESMOutput from '../model/CreateESMOutput';
import CreateEventForwarder from '../model/CreateEventForwarder';
import CreateEventForwarderOutput from '../model/CreateEventForwarderOutput';
import CreateGKETarget from '../model/CreateGKETarget';
import CreateGKETargetOutput from '../model/CreateGKETargetOutput';
import CreateGcpTarget from '../model/CreateGcpTarget';
import CreateGcpTargetOutput from '../model/CreateGcpTargetOutput';
import CreateGithubTarget from '../model/CreateGithubTarget';
import CreateGithubTargetOutput from '../model/CreateGithubTargetOutput';
import CreateGitlabTarget from '../model/CreateGitlabTarget';
import CreateGitlabTargetOutput from '../model/CreateGitlabTargetOutput';
import CreateGlobalSignAtlasTarget from '../model/CreateGlobalSignAtlasTarget';
import CreateGlobalSignAtlasTargetOutput from '../model/CreateGlobalSignAtlasTargetOutput';
import CreateGlobalSignTarget from '../model/CreateGlobalSignTarget';
import CreateGlobalSignTargetOutput from '../model/CreateGlobalSignTargetOutput';
import CreateGodaddyTarget from '../model/CreateGodaddyTarget';
import CreateGodaddyTargetOutput from '../model/CreateGodaddyTargetOutput';
import CreateGroup from '../model/CreateGroup';
import CreateGroupOutput from '../model/CreateGroupOutput';
import CreateHashiVaultTarget from '../model/CreateHashiVaultTarget';
import CreateHashiVaultTargetOutput from '../model/CreateHashiVaultTargetOutput';
import CreateKey from '../model/CreateKey';
import CreateKeyOutput from '../model/CreateKeyOutput';
import CreateLdapTarget from '../model/CreateLdapTarget';
import CreateLdapTargetOutput from '../model/CreateLdapTargetOutput';
import CreateLinkedTarget from '../model/CreateLinkedTarget';
import CreateLinkedTargetOutput from '../model/CreateLinkedTargetOutput';
import CreateNativeK8STarget from '../model/CreateNativeK8STarget';
import CreateNativeK8STargetOutput from '../model/CreateNativeK8STargetOutput';
import CreateOidcApp from '../model/CreateOidcApp';
import CreateOidcAppOutput from '../model/CreateOidcAppOutput';
import CreatePKICertIssuer from '../model/CreatePKICertIssuer';
import CreatePKICertIssuerOutput from '../model/CreatePKICertIssuerOutput';
import CreatePasskey from '../model/CreatePasskey';
import CreatePasskeyOutput from '../model/CreatePasskeyOutput';
import CreatePingTarget from '../model/CreatePingTarget';
import CreatePingTargetOutput from '../model/CreatePingTargetOutput';
import CreateRabbitMQTarget from '../model/CreateRabbitMQTarget';
import CreateRabbitMQTargetOutput from '../model/CreateRabbitMQTargetOutput';
import CreateRole from '../model/CreateRole';
import CreateRoleAuthMethodAssocOutput from '../model/CreateRoleAuthMethodAssocOutput';
import CreateRotatedSecret from '../model/CreateRotatedSecret';
import CreateRotatedSecretOutput from '../model/CreateRotatedSecretOutput';
import CreateSSHCertIssuer from '../model/CreateSSHCertIssuer';
import CreateSSHCertIssuerOutput from '../model/CreateSSHCertIssuerOutput';
import CreateSSHTarget from '../model/CreateSSHTarget';
import CreateSSHTargetOutput from '../model/CreateSSHTargetOutput';
import CreateSalesforceTarget from '../model/CreateSalesforceTarget';
import CreateSalesforceTargetOutput from '../model/CreateSalesforceTargetOutput';
import CreateSecret from '../model/CreateSecret';
import CreateSecretOutput from '../model/CreateSecretOutput';
import CreateTargetItemAssocOutput from '../model/CreateTargetItemAssocOutput';
import CreateTokenizer from '../model/CreateTokenizer';
import CreateTokenizerOutput from '../model/CreateTokenizerOutput';
import CreateUSC from '../model/CreateUSC';
import CreateUSCOutput from '../model/CreateUSCOutput';
import CreateUserEvent from '../model/CreateUserEvent';
import CreateUserEventOutput from '../model/CreateUserEventOutput';
import CreateWebTarget from '../model/CreateWebTarget';
import CreateWebTargetOutput from '../model/CreateWebTargetOutput';
import CreateWindowsTarget from '../model/CreateWindowsTarget';
import CreateWindowsTargetOutput from '../model/CreateWindowsTargetOutput';
import CreateZeroSSLTarget from '../model/CreateZeroSSLTarget';
import CreateZeroSSLTargetOutput from '../model/CreateZeroSSLTargetOutput';
import DSProducerDetails from '../model/DSProducerDetails';
import DeactivateAcmeAccount from '../model/DeactivateAcmeAccount';
import Decrypt from '../model/Decrypt';
import DecryptGPG from '../model/DecryptGPG';
import DecryptGPGOutput from '../model/DecryptGPGOutput';
import DecryptOutput from '../model/DecryptOutput';
import DecryptPKCS1 from '../model/DecryptPKCS1';
import DecryptPKCS1Output from '../model/DecryptPKCS1Output';
import DecryptWithClassicKey from '../model/DecryptWithClassicKey';
import DecryptWithClassicKeyOutput from '../model/DecryptWithClassicKeyOutput';
import DeleteAuthMethod from '../model/DeleteAuthMethod';
import DeleteAuthMethodOutput from '../model/DeleteAuthMethodOutput';
import DeleteAuthMethods from '../model/DeleteAuthMethods';
import DeleteAuthMethodsOutput from '../model/DeleteAuthMethodsOutput';
import DeleteEventForwarder from '../model/DeleteEventForwarder';
import DeleteGatewayAllowedAccessId from '../model/DeleteGatewayAllowedAccessId';
import DeleteGroup from '../model/DeleteGroup';
import DeleteGroupOutput from '../model/DeleteGroupOutput';
import DeleteGwCluster from '../model/DeleteGwCluster';
import DeleteItem from '../model/DeleteItem';
import DeleteItemOutput from '../model/DeleteItemOutput';
import DeleteItems from '../model/DeleteItems';
import DeleteItemsOutput from '../model/DeleteItemsOutput';
import DeleteRole from '../model/DeleteRole';
import DeleteRoleAssociation from '../model/DeleteRoleAssociation';
import DeleteRoleRule from '../model/DeleteRoleRule';
import DeleteRoleRuleOutput from '../model/DeleteRoleRuleOutput';
import DeleteRoles from '../model/DeleteRoles';
import DeleteTarget from '../model/DeleteTarget';
import DeleteTargetAssociation from '../model/DeleteTargetAssociation';
import DeleteTargets from '../model/DeleteTargets';
import DeriveKey from '../model/DeriveKey';
import DeriveKeyOutput from '../model/DeriveKeyOutput';
import DescribeAssoc from '../model/DescribeAssoc';
import DescribeItem from '../model/DescribeItem';
import DescribePermissions from '../model/DescribePermissions';
import DescribePermissionsOutput from '../model/DescribePermissionsOutput';
import DescribeSubClaims from '../model/DescribeSubClaims';
import DescribeSubClaimsOutput from '../model/DescribeSubClaimsOutput';
import Detokenize from '../model/Detokenize';
import DetokenizeOutput from '../model/DetokenizeOutput';
import DynamicSecretCreateArtifactory from '../model/DynamicSecretCreateArtifactory';
import DynamicSecretCreateAws from '../model/DynamicSecretCreateAws';
import DynamicSecretCreateAzure from '../model/DynamicSecretCreateAzure';
import DynamicSecretCreateCassandra from '../model/DynamicSecretCreateCassandra';
import DynamicSecretCreateCustom from '../model/DynamicSecretCreateCustom';
import DynamicSecretCreateDockerhub from '../model/DynamicSecretCreateDockerhub';
import DynamicSecretCreateEks from '../model/DynamicSecretCreateEks';
import DynamicSecretCreateGcp from '../model/DynamicSecretCreateGcp';
import DynamicSecretCreateGithub from '../model/DynamicSecretCreateGithub';
import DynamicSecretCreateGitlab from '../model/DynamicSecretCreateGitlab';
import DynamicSecretCreateGke from '../model/DynamicSecretCreateGke';
import DynamicSecretCreateGoogleWorkspace from '../model/DynamicSecretCreateGoogleWorkspace';
import DynamicSecretCreateHanaDb from '../model/DynamicSecretCreateHanaDb';
import DynamicSecretCreateK8s from '../model/DynamicSecretCreateK8s';
import DynamicSecretCreateLdap from '../model/DynamicSecretCreateLdap';
import DynamicSecretCreateMongoDb from '../model/DynamicSecretCreateMongoDb';
import DynamicSecretCreateMsSql from '../model/DynamicSecretCreateMsSql';
import DynamicSecretCreateMySql from '../model/DynamicSecretCreateMySql';
import DynamicSecretCreateOracleDb from '../model/DynamicSecretCreateOracleDb';
import DynamicSecretCreateOutput from '../model/DynamicSecretCreateOutput';
import DynamicSecretCreatePing from '../model/DynamicSecretCreatePing';
import DynamicSecretCreatePostgreSql from '../model/DynamicSecretCreatePostgreSql';
import DynamicSecretCreateRabbitMq from '../model/DynamicSecretCreateRabbitMq';
import DynamicSecretCreateRdp from '../model/DynamicSecretCreateRdp';
import DynamicSecretCreateRedis from '../model/DynamicSecretCreateRedis';
import DynamicSecretCreateRedshift from '../model/DynamicSecretCreateRedshift';
import DynamicSecretCreateSnowflake from '../model/DynamicSecretCreateSnowflake';
import DynamicSecretCreateVenafi from '../model/DynamicSecretCreateVenafi';
import DynamicSecretDelete from '../model/DynamicSecretDelete';
import DynamicSecretDeleteOutput from '../model/DynamicSecretDeleteOutput';
import DynamicSecretGet from '../model/DynamicSecretGet';
import DynamicSecretGetValue from '../model/DynamicSecretGetValue';
import DynamicSecretList from '../model/DynamicSecretList';
import DynamicSecretTmpCredsDelete from '../model/DynamicSecretTmpCredsDelete';
import DynamicSecretTmpCredsGet from '../model/DynamicSecretTmpCredsGet';
import DynamicSecretTmpCredsUpdate from '../model/DynamicSecretTmpCredsUpdate';
import DynamicSecretUpdateArtifactory from '../model/DynamicSecretUpdateArtifactory';
import DynamicSecretUpdateAws from '../model/DynamicSecretUpdateAws';
import DynamicSecretUpdateAzure from '../model/DynamicSecretUpdateAzure';
import DynamicSecretUpdateCassandra from '../model/DynamicSecretUpdateCassandra';
import DynamicSecretUpdateCustom from '../model/DynamicSecretUpdateCustom';
import DynamicSecretUpdateDockerhub from '../model/DynamicSecretUpdateDockerhub';
import DynamicSecretUpdateEks from '../model/DynamicSecretUpdateEks';
import DynamicSecretUpdateGcp from '../model/DynamicSecretUpdateGcp';
import DynamicSecretUpdateGithub from '../model/DynamicSecretUpdateGithub';
import DynamicSecretUpdateGitlab from '../model/DynamicSecretUpdateGitlab';
import DynamicSecretUpdateGke from '../model/DynamicSecretUpdateGke';
import DynamicSecretUpdateGoogleWorkspace from '../model/DynamicSecretUpdateGoogleWorkspace';
import DynamicSecretUpdateHanaDb from '../model/DynamicSecretUpdateHanaDb';
import DynamicSecretUpdateK8s from '../model/DynamicSecretUpdateK8s';
import DynamicSecretUpdateLdap from '../model/DynamicSecretUpdateLdap';
import DynamicSecretUpdateMongoDb from '../model/DynamicSecretUpdateMongoDb';
import DynamicSecretUpdateMsSql from '../model/DynamicSecretUpdateMsSql';
import DynamicSecretUpdateMySql from '../model/DynamicSecretUpdateMySql';
import DynamicSecretUpdateOracleDb from '../model/DynamicSecretUpdateOracleDb';
import DynamicSecretUpdateOutput from '../model/DynamicSecretUpdateOutput';
import DynamicSecretUpdatePing from '../model/DynamicSecretUpdatePing';
import DynamicSecretUpdatePostgreSql from '../model/DynamicSecretUpdatePostgreSql';
import DynamicSecretUpdateRabbitMq from '../model/DynamicSecretUpdateRabbitMq';
import DynamicSecretUpdateRdp from '../model/DynamicSecretUpdateRdp';
import DynamicSecretUpdateRedis from '../model/DynamicSecretUpdateRedis';
import DynamicSecretUpdateRedshift from '../model/DynamicSecretUpdateRedshift';
import DynamicSecretUpdateSnowflake from '../model/DynamicSecretUpdateSnowflake';
import DynamicSecretUpdateVenafi from '../model/DynamicSecretUpdateVenafi';
import Encrypt from '../model/Encrypt';
import EncryptGPG from '../model/EncryptGPG';
import EncryptGPGOutput from '../model/EncryptGPGOutput';
import EncryptOutput from '../model/EncryptOutput';
import EncryptWithClassicKey from '../model/EncryptWithClassicKey';
import EsmCreate from '../model/EsmCreate';
import EsmCreateSecretOutput from '../model/EsmCreateSecretOutput';
import EsmDelete from '../model/EsmDelete';
import EsmDeleteSecretOutput from '../model/EsmDeleteSecretOutput';
import EsmGet from '../model/EsmGet';
import EsmGetSecretOutput from '../model/EsmGetSecretOutput';
import EsmList from '../model/EsmList';
import EsmListSecretsOutput from '../model/EsmListSecretsOutput';
import EsmUpdate from '../model/EsmUpdate';
import EsmUpdateSecretOutput from '../model/EsmUpdateSecretOutput';
import EventAction from '../model/EventAction';
import EventForwarderCreateEmail from '../model/EventForwarderCreateEmail';
import EventForwarderCreateServiceNow from '../model/EventForwarderCreateServiceNow';
import EventForwarderCreateSlack from '../model/EventForwarderCreateSlack';
import EventForwarderCreateUpdateOutput from '../model/EventForwarderCreateUpdateOutput';
import EventForwarderCreateWebhook from '../model/EventForwarderCreateWebhook';
import EventForwarderDelete from '../model/EventForwarderDelete';
import EventForwarderDeleteOutput from '../model/EventForwarderDeleteOutput';
import EventForwarderGet from '../model/EventForwarderGet';
import EventForwarderGetOutput from '../model/EventForwarderGetOutput';
import EventForwarderUpdateEmail from '../model/EventForwarderUpdateEmail';
import EventForwarderUpdateServiceNow from '../model/EventForwarderUpdateServiceNow';
import EventForwarderUpdateSlack from '../model/EventForwarderUpdateSlack';
import EventForwarderUpdateWebhook from '../model/EventForwarderUpdateWebhook';
import ExportClassicKey from '../model/ExportClassicKey';
import ExportClassicKeyOutput from '../model/ExportClassicKeyOutput';
import GatewayCreateAllowedAccess from '../model/GatewayCreateAllowedAccess';
import GatewayCreateK8SAuthConfig from '../model/GatewayCreateK8SAuthConfig';
import GatewayCreateK8SAuthConfigOutput from '../model/GatewayCreateK8SAuthConfigOutput';
import GatewayCreateMigration from '../model/GatewayCreateMigration';
import GatewayCreateProducerArtifactory from '../model/GatewayCreateProducerArtifactory';
import GatewayCreateProducerArtifactoryOutput from '../model/GatewayCreateProducerArtifactoryOutput';
import GatewayCreateProducerAws from '../model/GatewayCreateProducerAws';
import GatewayCreateProducerAwsOutput from '../model/GatewayCreateProducerAwsOutput';
import GatewayCreateProducerAzure from '../model/GatewayCreateProducerAzure';
import GatewayCreateProducerAzureOutput from '../model/GatewayCreateProducerAzureOutput';
import GatewayCreateProducerCassandra from '../model/GatewayCreateProducerCassandra';
import GatewayCreateProducerCassandraOutput from '../model/GatewayCreateProducerCassandraOutput';
import GatewayCreateProducerChef from '../model/GatewayCreateProducerChef';
import GatewayCreateProducerChefOutput from '../model/GatewayCreateProducerChefOutput';
import GatewayCreateProducerCustom from '../model/GatewayCreateProducerCustom';
import GatewayCreateProducerCustomOutput from '../model/GatewayCreateProducerCustomOutput';
import GatewayCreateProducerDockerhub from '../model/GatewayCreateProducerDockerhub';
import GatewayCreateProducerDockerhubOutput from '../model/GatewayCreateProducerDockerhubOutput';
import GatewayCreateProducerEks from '../model/GatewayCreateProducerEks';
import GatewayCreateProducerEksOutput from '../model/GatewayCreateProducerEksOutput';
import GatewayCreateProducerGcp from '../model/GatewayCreateProducerGcp';
import GatewayCreateProducerGcpOutput from '../model/GatewayCreateProducerGcpOutput';
import GatewayCreateProducerGithub from '../model/GatewayCreateProducerGithub';
import GatewayCreateProducerGithubOutput from '../model/GatewayCreateProducerGithubOutput';
import GatewayCreateProducerGke from '../model/GatewayCreateProducerGke';
import GatewayCreateProducerGkeOutput from '../model/GatewayCreateProducerGkeOutput';
import GatewayCreateProducerHanaDb from '../model/GatewayCreateProducerHanaDb';
import GatewayCreateProducerHanaDbOutput from '../model/GatewayCreateProducerHanaDbOutput';
import GatewayCreateProducerLdap from '../model/GatewayCreateProducerLdap';
import GatewayCreateProducerLdapOutput from '../model/GatewayCreateProducerLdapOutput';
import GatewayCreateProducerMSSQL from '../model/GatewayCreateProducerMSSQL';
import GatewayCreateProducerMSSQLOutput from '../model/GatewayCreateProducerMSSQLOutput';
import GatewayCreateProducerMongo from '../model/GatewayCreateProducerMongo';
import GatewayCreateProducerMongoOutput from '../model/GatewayCreateProducerMongoOutput';
import GatewayCreateProducerMySQL from '../model/GatewayCreateProducerMySQL';
import GatewayCreateProducerMySQLOutput from '../model/GatewayCreateProducerMySQLOutput';
import GatewayCreateProducerNativeK8S from '../model/GatewayCreateProducerNativeK8S';
import GatewayCreateProducerNativeK8SOutput from '../model/GatewayCreateProducerNativeK8SOutput';
import GatewayCreateProducerOracleDb from '../model/GatewayCreateProducerOracleDb';
import GatewayCreateProducerOracleDbOutput from '../model/GatewayCreateProducerOracleDbOutput';
import GatewayCreateProducerPing from '../model/GatewayCreateProducerPing';
import GatewayCreateProducerPingOutput from '../model/GatewayCreateProducerPingOutput';
import GatewayCreateProducerPostgreSQL from '../model/GatewayCreateProducerPostgreSQL';
import GatewayCreateProducerPostgreSQLOutput from '../model/GatewayCreateProducerPostgreSQLOutput';
import GatewayCreateProducerRabbitMQ from '../model/GatewayCreateProducerRabbitMQ';
import GatewayCreateProducerRabbitMQOutput from '../model/GatewayCreateProducerRabbitMQOutput';
import GatewayCreateProducerRdp from '../model/GatewayCreateProducerRdp';
import GatewayCreateProducerRdpOutput from '../model/GatewayCreateProducerRdpOutput';
import GatewayCreateProducerRedis from '../model/GatewayCreateProducerRedis';
import GatewayCreateProducerRedisOutput from '../model/GatewayCreateProducerRedisOutput';
import GatewayCreateProducerRedshift from '../model/GatewayCreateProducerRedshift';
import GatewayCreateProducerRedshiftOutput from '../model/GatewayCreateProducerRedshiftOutput';
import GatewayCreateProducerSnowflake from '../model/GatewayCreateProducerSnowflake';
import GatewayCreateProducerSnowflakeOutput from '../model/GatewayCreateProducerSnowflakeOutput';
import GatewayCreateProducerVenafi from '../model/GatewayCreateProducerVenafi';
import GatewayCreateProducerVenafiOutput from '../model/GatewayCreateProducerVenafiOutput';
import GatewayDeleteAllowedAccess from '../model/GatewayDeleteAllowedAccess';
import GatewayDeleteAllowedAccessOutput from '../model/GatewayDeleteAllowedAccessOutput';
import GatewayDeleteK8SAuthConfig from '../model/GatewayDeleteK8SAuthConfig';
import GatewayDeleteK8SAuthConfigOutput from '../model/GatewayDeleteK8SAuthConfigOutput';
import GatewayDeleteMigration from '../model/GatewayDeleteMigration';
import GatewayDeleteProducer from '../model/GatewayDeleteProducer';
import GatewayDeleteProducerOutput from '../model/GatewayDeleteProducerOutput';
import GatewayDownloadCustomerFragments from '../model/GatewayDownloadCustomerFragments';
import GatewayDownloadCustomerFragmentsOutput from '../model/GatewayDownloadCustomerFragmentsOutput';
import GatewayGetAllowedAccess from '../model/GatewayGetAllowedAccess';
import GatewayGetCache from '../model/GatewayGetCache';
import GatewayGetConfig from '../model/GatewayGetConfig';
import GatewayGetDefaults from '../model/GatewayGetDefaults';
import GatewayGetDefaultsOutput from '../model/GatewayGetDefaultsOutput';
import GatewayGetK8SAuthConfig from '../model/GatewayGetK8SAuthConfig';
import GatewayGetK8SAuthConfigOutput from '../model/GatewayGetK8SAuthConfigOutput';
import GatewayGetLdapAuthConfig from '../model/GatewayGetLdapAuthConfig';
import GatewayGetLdapAuthConfigOutput from '../model/GatewayGetLdapAuthConfigOutput';
import GatewayGetLogForwarding from '../model/GatewayGetLogForwarding';
import GatewayGetMigration from '../model/GatewayGetMigration';
import GatewayGetProducer from '../model/GatewayGetProducer';
import GatewayGetRemoteAccess from '../model/GatewayGetRemoteAccess';
import GatewayGetTmpUsers from '../model/GatewayGetTmpUsers';
import GatewayListCustomerFragments from '../model/GatewayListCustomerFragments';
import GatewayListMigration from '../model/GatewayListMigration';
import GatewayListProducers from '../model/GatewayListProducers';
import GatewayListRotatedSecrets from '../model/GatewayListRotatedSecrets';
import GatewayMigratePersonalItems from '../model/GatewayMigratePersonalItems';
import GatewayMigratePersonalItemsOutput from '../model/GatewayMigratePersonalItemsOutput';
import GatewayMigrationCreateOutput from '../model/GatewayMigrationCreateOutput';
import GatewayMigrationDeleteOutput from '../model/GatewayMigrationDeleteOutput';
import GatewayMigrationGetOutput from '../model/GatewayMigrationGetOutput';
import GatewayMigrationListOutput from '../model/GatewayMigrationListOutput';
import GatewayMigrationSyncOutput from '../model/GatewayMigrationSyncOutput';
import GatewayMigrationUpdateOutput from '../model/GatewayMigrationUpdateOutput';
import GatewayRevokeTmpUsers from '../model/GatewayRevokeTmpUsers';
import GatewayStartProducer from '../model/GatewayStartProducer';
import GatewayStartProducerOutput from '../model/GatewayStartProducerOutput';
import GatewayStatusMigration from '../model/GatewayStatusMigration';
import GatewayStopProducer from '../model/GatewayStopProducer';
import GatewayStopProducerOutput from '../model/GatewayStopProducerOutput';
import GatewaySyncMigration from '../model/GatewaySyncMigration';
import GatewayUpdateAllowedAccess from '../model/GatewayUpdateAllowedAccess';
import GatewayUpdateCache from '../model/GatewayUpdateCache';
import GatewayUpdateDefaults from '../model/GatewayUpdateDefaults';
import GatewayUpdateItem from '../model/GatewayUpdateItem';
import GatewayUpdateItemOutput from '../model/GatewayUpdateItemOutput';
import GatewayUpdateK8SAuthConfig from '../model/GatewayUpdateK8SAuthConfig';
import GatewayUpdateK8SAuthConfigOutput from '../model/GatewayUpdateK8SAuthConfigOutput';
import GatewayUpdateLdapAuthConfig from '../model/GatewayUpdateLdapAuthConfig';
import GatewayUpdateLdapAuthConfigOutput from '../model/GatewayUpdateLdapAuthConfigOutput';
import GatewayUpdateLogForwardingAwsS3 from '../model/GatewayUpdateLogForwardingAwsS3';
import GatewayUpdateLogForwardingAzureAnalytics from '../model/GatewayUpdateLogForwardingAzureAnalytics';
import GatewayUpdateLogForwardingDatadog from '../model/GatewayUpdateLogForwardingDatadog';
import GatewayUpdateLogForwardingElasticsearch from '../model/GatewayUpdateLogForwardingElasticsearch';
import GatewayUpdateLogForwardingGoogleChronicle from '../model/GatewayUpdateLogForwardingGoogleChronicle';
import GatewayUpdateLogForwardingLogstash from '../model/GatewayUpdateLogForwardingLogstash';
import GatewayUpdateLogForwardingLogzIo from '../model/GatewayUpdateLogForwardingLogzIo';
import GatewayUpdateLogForwardingOutput from '../model/GatewayUpdateLogForwardingOutput';
import GatewayUpdateLogForwardingSplunk from '../model/GatewayUpdateLogForwardingSplunk';
import GatewayUpdateLogForwardingStdout from '../model/GatewayUpdateLogForwardingStdout';
import GatewayUpdateLogForwardingSumologic from '../model/GatewayUpdateLogForwardingSumologic';
import GatewayUpdateLogForwardingSyslog from '../model/GatewayUpdateLogForwardingSyslog';
import GatewayUpdateMigration from '../model/GatewayUpdateMigration';
import GatewayUpdateOutput from '../model/GatewayUpdateOutput';
import GatewayUpdateProducerArtifactory from '../model/GatewayUpdateProducerArtifactory';
import GatewayUpdateProducerArtifactoryOutput from '../model/GatewayUpdateProducerArtifactoryOutput';
import GatewayUpdateProducerAws from '../model/GatewayUpdateProducerAws';
import GatewayUpdateProducerAwsOutput from '../model/GatewayUpdateProducerAwsOutput';
import GatewayUpdateProducerAzure from '../model/GatewayUpdateProducerAzure';
import GatewayUpdateProducerAzureOutput from '../model/GatewayUpdateProducerAzureOutput';
import GatewayUpdateProducerCassandra from '../model/GatewayUpdateProducerCassandra';
import GatewayUpdateProducerCassandraOutput from '../model/GatewayUpdateProducerCassandraOutput';
import GatewayUpdateProducerChef from '../model/GatewayUpdateProducerChef';
import GatewayUpdateProducerChefOutput from '../model/GatewayUpdateProducerChefOutput';
import GatewayUpdateProducerCustom from '../model/GatewayUpdateProducerCustom';
import GatewayUpdateProducerCustomOutput from '../model/GatewayUpdateProducerCustomOutput';
import GatewayUpdateProducerDockerhub from '../model/GatewayUpdateProducerDockerhub';
import GatewayUpdateProducerDockerhubOutput from '../model/GatewayUpdateProducerDockerhubOutput';
import GatewayUpdateProducerEks from '../model/GatewayUpdateProducerEks';
import GatewayUpdateProducerEksOutput from '../model/GatewayUpdateProducerEksOutput';
import GatewayUpdateProducerGcp from '../model/GatewayUpdateProducerGcp';
import GatewayUpdateProducerGcpOutput from '../model/GatewayUpdateProducerGcpOutput';
import GatewayUpdateProducerGithub from '../model/GatewayUpdateProducerGithub';
import GatewayUpdateProducerGithubOutput from '../model/GatewayUpdateProducerGithubOutput';
import GatewayUpdateProducerGke from '../model/GatewayUpdateProducerGke';
import GatewayUpdateProducerGkeOutput from '../model/GatewayUpdateProducerGkeOutput';
import GatewayUpdateProducerHanaDb from '../model/GatewayUpdateProducerHanaDb';
import GatewayUpdateProducerHanaDbOutput from '../model/GatewayUpdateProducerHanaDbOutput';
import GatewayUpdateProducerLdap from '../model/GatewayUpdateProducerLdap';
import GatewayUpdateProducerLdapOutput from '../model/GatewayUpdateProducerLdapOutput';
import GatewayUpdateProducerMSSQL from '../model/GatewayUpdateProducerMSSQL';
import GatewayUpdateProducerMSSQLOutput from '../model/GatewayUpdateProducerMSSQLOutput';
import GatewayUpdateProducerMongo from '../model/GatewayUpdateProducerMongo';
import GatewayUpdateProducerMongoOutput from '../model/GatewayUpdateProducerMongoOutput';
import GatewayUpdateProducerMySQL from '../model/GatewayUpdateProducerMySQL';
import GatewayUpdateProducerMySQLOutput from '../model/GatewayUpdateProducerMySQLOutput';
import GatewayUpdateProducerNativeK8S from '../model/GatewayUpdateProducerNativeK8S';
import GatewayUpdateProducerNativeK8SOutput from '../model/GatewayUpdateProducerNativeK8SOutput';
import GatewayUpdateProducerOracleDb from '../model/GatewayUpdateProducerOracleDb';
import GatewayUpdateProducerOracleDbOutput from '../model/GatewayUpdateProducerOracleDbOutput';
import GatewayUpdateProducerPing from '../model/GatewayUpdateProducerPing';
import GatewayUpdateProducerPingOutput from '../model/GatewayUpdateProducerPingOutput';
import GatewayUpdateProducerPostgreSQL from '../model/GatewayUpdateProducerPostgreSQL';
import GatewayUpdateProducerPostgreSQLOutput from '../model/GatewayUpdateProducerPostgreSQLOutput';
import GatewayUpdateProducerRabbitMQ from '../model/GatewayUpdateProducerRabbitMQ';
import GatewayUpdateProducerRabbitMQOutput from '../model/GatewayUpdateProducerRabbitMQOutput';
import GatewayUpdateProducerRdp from '../model/GatewayUpdateProducerRdp';
import GatewayUpdateProducerRdpOutput from '../model/GatewayUpdateProducerRdpOutput';
import GatewayUpdateProducerRedis from '../model/GatewayUpdateProducerRedis';
import GatewayUpdateProducerRedisOutput from '../model/GatewayUpdateProducerRedisOutput';
import GatewayUpdateProducerRedshift from '../model/GatewayUpdateProducerRedshift';
import GatewayUpdateProducerRedshiftOutput from '../model/GatewayUpdateProducerRedshiftOutput';
import GatewayUpdateProducerSnowflake from '../model/GatewayUpdateProducerSnowflake';
import GatewayUpdateProducerSnowflakeOutput from '../model/GatewayUpdateProducerSnowflakeOutput';
import GatewayUpdateProducerVenafi from '../model/GatewayUpdateProducerVenafi';
import GatewayUpdateProducerVenafiOutput from '../model/GatewayUpdateProducerVenafiOutput';
import GatewayUpdateRemoteAccess from '../model/GatewayUpdateRemoteAccess';
import GatewayUpdateRemoteAccessRdpRecordings from '../model/GatewayUpdateRemoteAccessRdpRecordings';
import GatewayUpdateTlsCert from '../model/GatewayUpdateTlsCert';
import GatewayUpdateTlsCertOutput from '../model/GatewayUpdateTlsCertOutput';
import GatewayUpdateTmpUsers from '../model/GatewayUpdateTmpUsers';
import GatewaysListResponse from '../model/GatewaysListResponse';
import GenerateAcmeEab from '../model/GenerateAcmeEab';
import GenerateAcmeEabOutput from '../model/GenerateAcmeEabOutput';
import GenerateCA from '../model/GenerateCA';
import GenerateCAOutput from '../model/GenerateCAOutput';
import GenerateCsr from '../model/GenerateCsr';
import GenerateCsrOutput from '../model/GenerateCsrOutput';
import GetAccountSettings from '../model/GetAccountSettings';
import GetAccountSettingsCommandOutput from '../model/GetAccountSettingsCommandOutput';
import GetAnalyticsData from '../model/GetAnalyticsData';
import GetAuthMethod from '../model/GetAuthMethod';
import GetCertificateValue from '../model/GetCertificateValue';
import GetCertificateValueOutput from '../model/GetCertificateValueOutput';
import GetDynamicSecretValue from '../model/GetDynamicSecretValue';
import GetEventForwarder from '../model/GetEventForwarder';
import GetEventForwarderOutput from '../model/GetEventForwarderOutput';
import GetGroup from '../model/GetGroup';
import GetGroupOutput from '../model/GetGroupOutput';
import GetKubeExecCreds from '../model/GetKubeExecCreds';
import GetKubeExecCredsOutput from '../model/GetKubeExecCredsOutput';
import GetLastUserEventStatus from '../model/GetLastUserEventStatus';
import GetPKICertificate from '../model/GetPKICertificate';
import GetPKICertificateOutput from '../model/GetPKICertificateOutput';
import GetProducersListReplyObj from '../model/GetProducersListReplyObj';
import GetRSAPublic from '../model/GetRSAPublic';
import GetRSAPublicOutput from '../model/GetRSAPublicOutput';
import GetRole from '../model/GetRole';
import GetRotatedSecretValue from '../model/GetRotatedSecretValue';
import GetSSHCertificate from '../model/GetSSHCertificate';
import GetSSHCertificateOutput from '../model/GetSSHCertificateOutput';
import GetSecretValue from '../model/GetSecretValue';
import GetTags from '../model/GetTags';
import GetTarget from '../model/GetTarget';
import GetTargetDetails from '../model/GetTargetDetails';
import GetTargetDetailsOutput from '../model/GetTargetDetailsOutput';
import GetUserEventStatusOutput from '../model/GetUserEventStatusOutput';
import GwUpdateRemoteAccessSessionLogsAwsS3 from '../model/GwUpdateRemoteAccessSessionLogsAwsS3';
import GwUpdateRemoteAccessSessionLogsAzureAnalytics from '../model/GwUpdateRemoteAccessSessionLogsAzureAnalytics';
import GwUpdateRemoteAccessSessionLogsDatadog from '../model/GwUpdateRemoteAccessSessionLogsDatadog';
import GwUpdateRemoteAccessSessionLogsElasticsearch from '../model/GwUpdateRemoteAccessSessionLogsElasticsearch';
import GwUpdateRemoteAccessSessionLogsGoogleChronicle from '../model/GwUpdateRemoteAccessSessionLogsGoogleChronicle';
import GwUpdateRemoteAccessSessionLogsLogstash from '../model/GwUpdateRemoteAccessSessionLogsLogstash';
import GwUpdateRemoteAccessSessionLogsLogzIo from '../model/GwUpdateRemoteAccessSessionLogsLogzIo';
import GwUpdateRemoteAccessSessionLogsSplunk from '../model/GwUpdateRemoteAccessSessionLogsSplunk';
import GwUpdateRemoteAccessSessionLogsStdout from '../model/GwUpdateRemoteAccessSessionLogsStdout';
import GwUpdateRemoteAccessSessionLogsSumologic from '../model/GwUpdateRemoteAccessSessionLogsSumologic';
import GwUpdateRemoteAccessSessionLogsSyslog from '../model/GwUpdateRemoteAccessSessionLogsSyslog';
import Hmac from '../model/Hmac';
import HmacOutput from '../model/HmacOutput';
import ImportPasswords from '../model/ImportPasswords';
import ImportPasswordsOutput from '../model/ImportPasswordsOutput';
import Item from '../model/Item';
import JSONError from '../model/JSONError';
import KMIPClientGetResponse from '../model/KMIPClientGetResponse';
import KMIPClientListResponse from '../model/KMIPClientListResponse';
import KMIPClientUpdateResponse from '../model/KMIPClientUpdateResponse';
import KMIPEnvironmentCreateResponse from '../model/KMIPEnvironmentCreateResponse';
import KmipClientDeleteRule from '../model/KmipClientDeleteRule';
import KmipClientSetRule from '../model/KmipClientSetRule';
import KmipCreateClient from '../model/KmipCreateClient';
import KmipCreateClientOutput from '../model/KmipCreateClientOutput';
import KmipDeleteClient from '../model/KmipDeleteClient';
import KmipDeleteServer from '../model/KmipDeleteServer';
import KmipDescribeClient from '../model/KmipDescribeClient';
import KmipDescribeServer from '../model/KmipDescribeServer';
import KmipDescribeServerOutput from '../model/KmipDescribeServerOutput';
import KmipListClients from '../model/KmipListClients';
import KmipMoveServer from '../model/KmipMoveServer';
import KmipMoveServerOutput from '../model/KmipMoveServerOutput';
import KmipRenewClientCertificate from '../model/KmipRenewClientCertificate';
import KmipRenewClientCertificateOutput from '../model/KmipRenewClientCertificateOutput';
import KmipRenewServerCertificate from '../model/KmipRenewServerCertificate';
import KmipRenewServerCertificateOutput from '../model/KmipRenewServerCertificateOutput';
import KmipServerSetup from '../model/KmipServerSetup';
import KmipSetServerState from '../model/KmipSetServerState';
import KmipSetServerStateOutput from '../model/KmipSetServerStateOutput';
import KubeconfigGenerateOutput from '../model/KubeconfigGenerateOutput';
import ListAcmeAccounts from '../model/ListAcmeAccounts';
import ListAcmeAccountsOutput from '../model/ListAcmeAccountsOutput';
import ListAuthMethods from '../model/ListAuthMethods';
import ListAuthMethodsOutput from '../model/ListAuthMethodsOutput';
import ListGateways from '../model/ListGateways';
import ListGroups from '../model/ListGroups';
import ListGroupsOutput from '../model/ListGroupsOutput';
import ListItems from '../model/ListItems';
import ListItemsInPathOutput from '../model/ListItemsInPathOutput';
import ListItemsOutput from '../model/ListItemsOutput';
import ListRoles from '../model/ListRoles';
import ListRolesOutput from '../model/ListRolesOutput';
import ListSRABastions from '../model/ListSRABastions';
import ListSRASessions from '../model/ListSRASessions';
import ListSharedItems from '../model/ListSharedItems';
import ListSraSessionsOutput from '../model/ListSraSessionsOutput';
import ListTargets from '../model/ListTargets';
import ListTargetsOutput from '../model/ListTargetsOutput';
import LogForwardingConfigPart from '../model/LogForwardingConfigPart';
import MigrationStatusReplyObj from '../model/MigrationStatusReplyObj';
import MoveObjects from '../model/MoveObjects';
import PasswordSecurityInfo from '../model/PasswordSecurityInfo';
import ProvisionCertificate from '../model/ProvisionCertificate';
import ProvisionCertificateOutput from '../model/ProvisionCertificateOutput';
import RawCreds from '../model/RawCreds';
import RefreshKey from '../model/RefreshKey';
import RefreshKeyOutput from '../model/RefreshKeyOutput';
import RenewCertificate from '../model/RenewCertificate';
import RenewCertificateOutput from '../model/RenewCertificateOutput';
import RequestAccess from '../model/RequestAccess';
import RequestAccessOutput from '../model/RequestAccessOutput';
import ResetAccessKey from '../model/ResetAccessKey';
import ResetAuthMethodAccessKeyOutput from '../model/ResetAuthMethodAccessKeyOutput';
import ReverseRBAC from '../model/ReverseRBAC';
import ReverseRBACOutput from '../model/ReverseRBACOutput';
import RevokeCertificate from '../model/RevokeCertificate';
import Role from '../model/Role';
import RoleAssociationDetails from '../model/RoleAssociationDetails';
import RollbackSecret from '../model/RollbackSecret';
import RollbackSecretOutput from '../model/RollbackSecretOutput';
import RotateKey from '../model/RotateKey';
import RotateKeyOutput from '../model/RotateKeyOutput';
import RotateOidcClientOutput from '../model/RotateOidcClientOutput';
import RotateOidcClientSecret from '../model/RotateOidcClientSecret';
import RotateSecret from '../model/RotateSecret';
import RotatedSecretCreateAws from '../model/RotatedSecretCreateAws';
import RotatedSecretCreateAzure from '../model/RotatedSecretCreateAzure';
import RotatedSecretCreateCassandra from '../model/RotatedSecretCreateCassandra';
import RotatedSecretCreateCustom from '../model/RotatedSecretCreateCustom';
import RotatedSecretCreateDockerhub from '../model/RotatedSecretCreateDockerhub';
import RotatedSecretCreateGcp from '../model/RotatedSecretCreateGcp';
import RotatedSecretCreateHanadb from '../model/RotatedSecretCreateHanadb';
import RotatedSecretCreateLdap from '../model/RotatedSecretCreateLdap';
import RotatedSecretCreateMongodb from '../model/RotatedSecretCreateMongodb';
import RotatedSecretCreateMssql from '../model/RotatedSecretCreateMssql';
import RotatedSecretCreateMysql from '../model/RotatedSecretCreateMysql';
import RotatedSecretCreateOracledb from '../model/RotatedSecretCreateOracledb';
import RotatedSecretCreateOutput from '../model/RotatedSecretCreateOutput';
import RotatedSecretCreatePostgresql from '../model/RotatedSecretCreatePostgresql';
import RotatedSecretCreateRedis from '../model/RotatedSecretCreateRedis';
import RotatedSecretCreateRedshift from '../model/RotatedSecretCreateRedshift';
import RotatedSecretCreateSnowflake from '../model/RotatedSecretCreateSnowflake';
import RotatedSecretCreateSsh from '../model/RotatedSecretCreateSsh';
import RotatedSecretCreateWindows from '../model/RotatedSecretCreateWindows';
import RotatedSecretDelete from '../model/RotatedSecretDelete';
import RotatedSecretDeleteSync from '../model/RotatedSecretDeleteSync';
import RotatedSecretGetValue from '../model/RotatedSecretGetValue';
import RotatedSecretList from '../model/RotatedSecretList';
import RotatedSecretOutput from '../model/RotatedSecretOutput';
import RotatedSecretSync from '../model/RotatedSecretSync';
import RotatedSecretUpdateAws from '../model/RotatedSecretUpdateAws';
import RotatedSecretUpdateAzure from '../model/RotatedSecretUpdateAzure';
import RotatedSecretUpdateCassandra from '../model/RotatedSecretUpdateCassandra';
import RotatedSecretUpdateCustom from '../model/RotatedSecretUpdateCustom';
import RotatedSecretUpdateDockerhub from '../model/RotatedSecretUpdateDockerhub';
import RotatedSecretUpdateGcp from '../model/RotatedSecretUpdateGcp';
import RotatedSecretUpdateHanadb from '../model/RotatedSecretUpdateHanadb';
import RotatedSecretUpdateLdap from '../model/RotatedSecretUpdateLdap';
import RotatedSecretUpdateMongodb from '../model/RotatedSecretUpdateMongodb';
import RotatedSecretUpdateMssql from '../model/RotatedSecretUpdateMssql';
import RotatedSecretUpdateMysql from '../model/RotatedSecretUpdateMysql';
import RotatedSecretUpdateOracledb from '../model/RotatedSecretUpdateOracledb';
import RotatedSecretUpdateOutput from '../model/RotatedSecretUpdateOutput';
import RotatedSecretUpdatePostgresql from '../model/RotatedSecretUpdatePostgresql';
import RotatedSecretUpdateRedis from '../model/RotatedSecretUpdateRedis';
import RotatedSecretUpdateRedshift from '../model/RotatedSecretUpdateRedshift';
import RotatedSecretUpdateSnowflake from '../model/RotatedSecretUpdateSnowflake';
import RotatedSecretUpdateSsh from '../model/RotatedSecretUpdateSsh';
import RotatedSecretUpdateWindows from '../model/RotatedSecretUpdateWindows';
import SetItemState from '../model/SetItemState';
import SetRoleRule from '../model/SetRoleRule';
import ShareItem from '../model/ShareItem';
import ShareItemOutput from '../model/ShareItemOutput';
import SignDataWithClassicKey from '../model/SignDataWithClassicKey';
import SignEcDsa from '../model/SignEcDsa';
import SignEcDsaOutput from '../model/SignEcDsaOutput';
import SignGPG from '../model/SignGPG';
import SignGPGOutput from '../model/SignGPGOutput';
import SignJWTOutput from '../model/SignJWTOutput';
import SignJWTWithClassicKey from '../model/SignJWTWithClassicKey';
import SignOutput from '../model/SignOutput';
import SignPKCS1 from '../model/SignPKCS1';
import SignPKCS1Output from '../model/SignPKCS1Output';
import SignPKICertOutput from '../model/SignPKICertOutput';
import SignPKICertWithClassicKey from '../model/SignPKICertWithClassicKey';
import SignRsaSsaPss from '../model/SignRsaSsaPss';
import SignRsaSsaPssOutput from '../model/SignRsaSsaPssOutput';
import StaticCredsAuth from '../model/StaticCredsAuth';
import StaticCredsAuthOutput from '../model/StaticCredsAuthOutput';
import SystemAccessCredentialsReplyObj from '../model/SystemAccessCredentialsReplyObj';
import Target from '../model/Target';
import TargetCreateArtifactory from '../model/TargetCreateArtifactory';
import TargetCreateAws from '../model/TargetCreateAws';
import TargetCreateAzure from '../model/TargetCreateAzure';
import TargetCreateDB from '../model/TargetCreateDB';
import TargetCreateDockerhub from '../model/TargetCreateDockerhub';
import TargetCreateEks from '../model/TargetCreateEks';
import TargetCreateGcp from '../model/TargetCreateGcp';
import TargetCreateGithub from '../model/TargetCreateGithub';
import TargetCreateGitlab from '../model/TargetCreateGitlab';
import TargetCreateGke from '../model/TargetCreateGke';
import TargetCreateGlobalSign from '../model/TargetCreateGlobalSign';
import TargetCreateGlobalSignAtlas from '../model/TargetCreateGlobalSignAtlas';
import TargetCreateGodaddy from '../model/TargetCreateGodaddy';
import TargetCreateHashiVault from '../model/TargetCreateHashiVault';
import TargetCreateK8s from '../model/TargetCreateK8s';
import TargetCreateLdap from '../model/TargetCreateLdap';
import TargetCreateLinked from '../model/TargetCreateLinked';
import TargetCreateOutput from '../model/TargetCreateOutput';
import TargetCreatePing from '../model/TargetCreatePing';
import TargetCreateRabbitMq from '../model/TargetCreateRabbitMq';
import TargetCreateSalesforce from '../model/TargetCreateSalesforce';
import TargetCreateSectigo from '../model/TargetCreateSectigo';
import TargetCreateSsh from '../model/TargetCreateSsh';
import TargetCreateWeb from '../model/TargetCreateWeb';
import TargetCreateWindows from '../model/TargetCreateWindows';
import TargetCreateZeroSSL from '../model/TargetCreateZeroSSL';
import TargetDelete from '../model/TargetDelete';
import TargetGet from '../model/TargetGet';
import TargetGetDetails from '../model/TargetGetDetails';
import TargetList from '../model/TargetList';
import TargetUpdateArtifactory from '../model/TargetUpdateArtifactory';
import TargetUpdateAws from '../model/TargetUpdateAws';
import TargetUpdateAzure from '../model/TargetUpdateAzure';
import TargetUpdateDB from '../model/TargetUpdateDB';
import TargetUpdateDockerhub from '../model/TargetUpdateDockerhub';
import TargetUpdateEks from '../model/TargetUpdateEks';
import TargetUpdateGcp from '../model/TargetUpdateGcp';
import TargetUpdateGithub from '../model/TargetUpdateGithub';
import TargetUpdateGitlab from '../model/TargetUpdateGitlab';
import TargetUpdateGke from '../model/TargetUpdateGke';
import TargetUpdateGlobalSign from '../model/TargetUpdateGlobalSign';
import TargetUpdateGlobalSignAtlas from '../model/TargetUpdateGlobalSignAtlas';
import TargetUpdateGodaddy from '../model/TargetUpdateGodaddy';
import TargetUpdateHashiVault from '../model/TargetUpdateHashiVault';
import TargetUpdateK8s from '../model/TargetUpdateK8s';
import TargetUpdateLdap from '../model/TargetUpdateLdap';
import TargetUpdateLinked from '../model/TargetUpdateLinked';
import TargetUpdateOutput from '../model/TargetUpdateOutput';
import TargetUpdatePing from '../model/TargetUpdatePing';
import TargetUpdateRabbitMq from '../model/TargetUpdateRabbitMq';
import TargetUpdateSalesforce from '../model/TargetUpdateSalesforce';
import TargetUpdateSectigo from '../model/TargetUpdateSectigo';
import TargetUpdateSsh from '../model/TargetUpdateSsh';
import TargetUpdateWeb from '../model/TargetUpdateWeb';
import TargetUpdateWindows from '../model/TargetUpdateWindows';
import TargetUpdateZeroSSL from '../model/TargetUpdateZeroSSL';
import TmpUserData from '../model/TmpUserData';
import Tokenize from '../model/Tokenize';
import TokenizeOutput from '../model/TokenizeOutput';
import UidCreateChildToken from '../model/UidCreateChildToken';
import UidCreateChildTokenOutput from '../model/UidCreateChildTokenOutput';
import UidGenerateToken from '../model/UidGenerateToken';
import UidGenerateTokenOutput from '../model/UidGenerateTokenOutput';
import UidListChildren from '../model/UidListChildren';
import UidRevokeToken from '../model/UidRevokeToken';
import UidRotateToken from '../model/UidRotateToken';
import UidRotateTokenOutput from '../model/UidRotateTokenOutput';
import UniversalIdentityDetails from '../model/UniversalIdentityDetails';
import UnwrapToken from '../model/UnwrapToken';
import UnwrapTokenOutput from '../model/UnwrapTokenOutput';
import UpdateAWSTarget from '../model/UpdateAWSTarget';
import UpdateAWSTargetDetails from '../model/UpdateAWSTargetDetails';
import UpdateAccountSettings from '../model/UpdateAccountSettings';
import UpdateAccountSettingsOutput from '../model/UpdateAccountSettingsOutput';
import UpdateArtifactoryTarget from '../model/UpdateArtifactoryTarget';
import UpdateArtifactoryTargetOutput from '../model/UpdateArtifactoryTargetOutput';
import UpdateAssoc from '../model/UpdateAssoc';
import UpdateAuthMethod from '../model/UpdateAuthMethod';
import UpdateAuthMethodAWSIAM from '../model/UpdateAuthMethodAWSIAM';
import UpdateAuthMethodAzureAD from '../model/UpdateAuthMethodAzureAD';
import UpdateAuthMethodCert from '../model/UpdateAuthMethodCert';
import UpdateAuthMethodCertOutput from '../model/UpdateAuthMethodCertOutput';
import UpdateAuthMethodGCP from '../model/UpdateAuthMethodGCP';
import UpdateAuthMethodK8S from '../model/UpdateAuthMethodK8S';
import UpdateAuthMethodK8SOutput from '../model/UpdateAuthMethodK8SOutput';
import UpdateAuthMethodLDAP from '../model/UpdateAuthMethodLDAP';
import UpdateAuthMethodLDAPOutput from '../model/UpdateAuthMethodLDAPOutput';
import UpdateAuthMethodOAuth2 from '../model/UpdateAuthMethodOAuth2';
import UpdateAuthMethodOCI from '../model/UpdateAuthMethodOCI';
import UpdateAuthMethodOCIOutput from '../model/UpdateAuthMethodOCIOutput';
import UpdateAuthMethodOIDC from '../model/UpdateAuthMethodOIDC';
import UpdateAuthMethodOutput from '../model/UpdateAuthMethodOutput';
import UpdateAuthMethodSAML from '../model/UpdateAuthMethodSAML';
import UpdateAuthMethodUniversalIdentity from '../model/UpdateAuthMethodUniversalIdentity';
import UpdateAzureTarget from '../model/UpdateAzureTarget';
import UpdateAzureTargetOutput from '../model/UpdateAzureTargetOutput';
import UpdateCertificateOutput from '../model/UpdateCertificateOutput';
import UpdateCertificateValue from '../model/UpdateCertificateValue';
import UpdateClassicKeyCertificate from '../model/UpdateClassicKeyCertificate';
import UpdateDBTarget from '../model/UpdateDBTarget';
import UpdateDBTargetDetails from '../model/UpdateDBTargetDetails';
import UpdateDBTargetOutput from '../model/UpdateDBTargetOutput';
import UpdateDockerhubTarget from '../model/UpdateDockerhubTarget';
import UpdateDockerhubTargetOutput from '../model/UpdateDockerhubTargetOutput';
import UpdateEKSTarget from '../model/UpdateEKSTarget';
import UpdateEKSTargetOutput from '../model/UpdateEKSTargetOutput';
import UpdateEventForwarder from '../model/UpdateEventForwarder';
import UpdateGKETarget from '../model/UpdateGKETarget';
import UpdateGKETargetOutput from '../model/UpdateGKETargetOutput';
import UpdateGcpTarget from '../model/UpdateGcpTarget';
import UpdateGcpTargetOutput from '../model/UpdateGcpTargetOutput';
import UpdateGithubTarget from '../model/UpdateGithubTarget';
import UpdateGithubTargetOutput from '../model/UpdateGithubTargetOutput';
import UpdateGitlabTarget from '../model/UpdateGitlabTarget';
import UpdateGitlabTargetOutput from '../model/UpdateGitlabTargetOutput';
import UpdateGlobalSignAtlasTarget from '../model/UpdateGlobalSignAtlasTarget';
import UpdateGlobalSignAtlasTargetOutput from '../model/UpdateGlobalSignAtlasTargetOutput';
import UpdateGlobalSignTarget from '../model/UpdateGlobalSignTarget';
import UpdateGlobalSignTargetOutput from '../model/UpdateGlobalSignTargetOutput';
import UpdateGodaddyTarget from '../model/UpdateGodaddyTarget';
import UpdateGodaddyTargetOutput from '../model/UpdateGodaddyTargetOutput';
import UpdateGroup from '../model/UpdateGroup';
import UpdateGroupOutput from '../model/UpdateGroupOutput';
import UpdateHashiVaultTarget from '../model/UpdateHashiVaultTarget';
import UpdateHashiVaultTargetOutput from '../model/UpdateHashiVaultTargetOutput';
import UpdateItem from '../model/UpdateItem';
import UpdateItemOutput from '../model/UpdateItemOutput';
import UpdateLdapTarget from '../model/UpdateLdapTarget';
import UpdateLdapTargetDetails from '../model/UpdateLdapTargetDetails';
import UpdateLdapTargetOutput from '../model/UpdateLdapTargetOutput';
import UpdateLinkedTarget from '../model/UpdateLinkedTarget';
import UpdateNativeK8STarget from '../model/UpdateNativeK8STarget';
import UpdateNativeK8STargetOutput from '../model/UpdateNativeK8STargetOutput';
import UpdateOidcApp from '../model/UpdateOidcApp';
import UpdatePKICertIssuer from '../model/UpdatePKICertIssuer';
import UpdatePKICertIssuerOutput from '../model/UpdatePKICertIssuerOutput';
import UpdatePingTarget from '../model/UpdatePingTarget';
import UpdateRDPTargetDetails from '../model/UpdateRDPTargetDetails';
import UpdateRabbitMQTarget from '../model/UpdateRabbitMQTarget';
import UpdateRabbitMQTargetDetails from '../model/UpdateRabbitMQTargetDetails';
import UpdateRabbitMQTargetOutput from '../model/UpdateRabbitMQTargetOutput';
import UpdateRole from '../model/UpdateRole';
import UpdateRoleOutput from '../model/UpdateRoleOutput';
import UpdateRotatedSecret from '../model/UpdateRotatedSecret';
import UpdateRotatedSecretOutput from '../model/UpdateRotatedSecretOutput';
import UpdateRotationSettings from '../model/UpdateRotationSettings';
import UpdateSSHCertIssuer from '../model/UpdateSSHCertIssuer';
import UpdateSSHCertIssuerOutput from '../model/UpdateSSHCertIssuerOutput';
import UpdateSSHTarget from '../model/UpdateSSHTarget';
import UpdateSSHTargetDetails from '../model/UpdateSSHTargetDetails';
import UpdateSSHTargetOutput from '../model/UpdateSSHTargetOutput';
import UpdateSalesforceTarget from '../model/UpdateSalesforceTarget';
import UpdateSalesforceTargetOutput from '../model/UpdateSalesforceTargetOutput';
import UpdateSecretVal from '../model/UpdateSecretVal';
import UpdateSecretValOutput from '../model/UpdateSecretValOutput';
import UpdateTarget from '../model/UpdateTarget';
import UpdateTargetDetails from '../model/UpdateTargetDetails';
import UpdateTargetOutput from '../model/UpdateTargetOutput';
import UpdateWebTarget from '../model/UpdateWebTarget';
import UpdateWebTargetDetails from '../model/UpdateWebTargetDetails';
import UpdateWebTargetOutput from '../model/UpdateWebTargetOutput';
import UpdateWindowsTarget from '../model/UpdateWindowsTarget';
import UpdateZeroSSLTarget from '../model/UpdateZeroSSLTarget';
import UpdateZeroSSLTargetOutput from '../model/UpdateZeroSSLTargetOutput';
import UploadRSA from '../model/UploadRSA';
import UscCreateSecretOutput from '../model/UscCreateSecretOutput';
import UscDelete from '../model/UscDelete';
import UscDeleteSecretOutput from '../model/UscDeleteSecretOutput';
import UscGet from '../model/UscGet';
import UscGetSecretOutput from '../model/UscGetSecretOutput';
import UscList from '../model/UscList';
import UscListSecretsOutput from '../model/UscListSecretsOutput';
import UscUpdate from '../model/UscUpdate';
import UscUpdateSecretOutput from '../model/UscUpdateSecretOutput';
import ValidateToken from '../model/ValidateToken';
import ValidateTokenOutput from '../model/ValidateTokenOutput';
import VerifyDataWithClassicKey from '../model/VerifyDataWithClassicKey';
import VerifyEcDsa from '../model/VerifyEcDsa';
import VerifyGPG from '../model/VerifyGPG';
import VerifyJWTOutput from '../model/VerifyJWTOutput';
import VerifyJWTWithClassicKey from '../model/VerifyJWTWithClassicKey';
import VerifyPKCS1 from '../model/VerifyPKCS1';
import VerifyPKICertOutput from '../model/VerifyPKICertOutput';
import VerifyPKICertWithClassicKey from '../model/VerifyPKICertWithClassicKey';
import VerifyRsaSsaPss from '../model/VerifyRsaSsaPss';

/**
* V2 service.
* @module api/V2Api
* @version 5.0.0
*/
export default class V2Api {

    /**
    * Constructs a new V2Api. 
    * @alias module:api/V2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {module:model/AliasDetails} aliasDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    aliasDetailsWithHttpInfo(aliasDetails) {
      let postBody = aliasDetails;
      // verify the required parameter 'aliasDetails' is set
      if (aliasDetails === undefined || aliasDetails === null) {
        throw new Error("Missing the required parameter 'aliasDetails' when calling aliasDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/alias-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AliasDetails} aliasDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    aliasDetails(aliasDetails) {
      return this.aliasDetailsWithHttpInfo(aliasDetails)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AssocRoleAuthMethod} assocRoleAuthMethod 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateRoleAuthMethodAssocOutput} and HTTP response
     */
    assocRoleAuthMethodWithHttpInfo(assocRoleAuthMethod) {
      let postBody = assocRoleAuthMethod;
      // verify the required parameter 'assocRoleAuthMethod' is set
      if (assocRoleAuthMethod === undefined || assocRoleAuthMethod === null) {
        throw new Error("Missing the required parameter 'assocRoleAuthMethod' when calling assocRoleAuthMethod");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRoleAuthMethodAssocOutput;
      return this.apiClient.callApi(
        '/assoc-role-am', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AssocRoleAuthMethod} assocRoleAuthMethod 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateRoleAuthMethodAssocOutput}
     */
    assocRoleAuthMethod(assocRoleAuthMethod) {
      return this.assocRoleAuthMethodWithHttpInfo(assocRoleAuthMethod)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AssocTargetItem} assocTargetItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTargetItemAssocOutput} and HTTP response
     */
    assocTargetItemWithHttpInfo(assocTargetItem) {
      let postBody = assocTargetItem;
      // verify the required parameter 'assocTargetItem' is set
      if (assocTargetItem === undefined || assocTargetItem === null) {
        throw new Error("Missing the required parameter 'assocTargetItem' when calling assocTargetItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTargetItemAssocOutput;
      return this.apiClient.callApi(
        '/assoc-target-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AssocTargetItem} assocTargetItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTargetItemAssocOutput}
     */
    assocTargetItem(assocTargetItem) {
      return this.assocTargetItemWithHttpInfo(assocTargetItem)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/Auth} auth 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthOutput} and HTTP response
     */
    authWithHttpInfo(auth) {
      let postBody = auth;
      // verify the required parameter 'auth' is set
      if (auth === undefined || auth === null) {
        throw new Error("Missing the required parameter 'auth' when calling auth");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthOutput;
      return this.apiClient.callApi(
        '/auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/Auth} auth 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthOutput}
     */
    auth(auth) {
      return this.authWithHttpInfo(auth)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodCreateApiKey} authMethodCreateApiKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodCreateOutput} and HTTP response
     */
    authMethodCreateApiKeyWithHttpInfo(authMethodCreateApiKey) {
      let postBody = authMethodCreateApiKey;
      // verify the required parameter 'authMethodCreateApiKey' is set
      if (authMethodCreateApiKey === undefined || authMethodCreateApiKey === null) {
        throw new Error("Missing the required parameter 'authMethodCreateApiKey' when calling authMethodCreateApiKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodCreateOutput;
      return this.apiClient.callApi(
        '/auth-method-create-api-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodCreateApiKey} authMethodCreateApiKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodCreateOutput}
     */
    authMethodCreateApiKey(authMethodCreateApiKey) {
      return this.authMethodCreateApiKeyWithHttpInfo(authMethodCreateApiKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodCreateAwsIam} authMethodCreateAwsIam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodCreateOutput} and HTTP response
     */
    authMethodCreateAwsIamWithHttpInfo(authMethodCreateAwsIam) {
      let postBody = authMethodCreateAwsIam;
      // verify the required parameter 'authMethodCreateAwsIam' is set
      if (authMethodCreateAwsIam === undefined || authMethodCreateAwsIam === null) {
        throw new Error("Missing the required parameter 'authMethodCreateAwsIam' when calling authMethodCreateAwsIam");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodCreateOutput;
      return this.apiClient.callApi(
        '/auth-method-create-aws-iam', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodCreateAwsIam} authMethodCreateAwsIam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodCreateOutput}
     */
    authMethodCreateAwsIam(authMethodCreateAwsIam) {
      return this.authMethodCreateAwsIamWithHttpInfo(authMethodCreateAwsIam)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodCreateAzureAD} authMethodCreateAzureAD 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodCreateOutput} and HTTP response
     */
    authMethodCreateAzureADWithHttpInfo(authMethodCreateAzureAD) {
      let postBody = authMethodCreateAzureAD;
      // verify the required parameter 'authMethodCreateAzureAD' is set
      if (authMethodCreateAzureAD === undefined || authMethodCreateAzureAD === null) {
        throw new Error("Missing the required parameter 'authMethodCreateAzureAD' when calling authMethodCreateAzureAD");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodCreateOutput;
      return this.apiClient.callApi(
        '/auth-method-create-azure-ad', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodCreateAzureAD} authMethodCreateAzureAD 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodCreateOutput}
     */
    authMethodCreateAzureAD(authMethodCreateAzureAD) {
      return this.authMethodCreateAzureADWithHttpInfo(authMethodCreateAzureAD)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodCreateCert} authMethodCreateCert 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodCreateOutput} and HTTP response
     */
    authMethodCreateCertWithHttpInfo(authMethodCreateCert) {
      let postBody = authMethodCreateCert;
      // verify the required parameter 'authMethodCreateCert' is set
      if (authMethodCreateCert === undefined || authMethodCreateCert === null) {
        throw new Error("Missing the required parameter 'authMethodCreateCert' when calling authMethodCreateCert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodCreateOutput;
      return this.apiClient.callApi(
        '/auth-method-create-cert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodCreateCert} authMethodCreateCert 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodCreateOutput}
     */
    authMethodCreateCert(authMethodCreateCert) {
      return this.authMethodCreateCertWithHttpInfo(authMethodCreateCert)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodCreateEmail} authMethodCreateEmail 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodCreateOutput} and HTTP response
     */
    authMethodCreateEmailWithHttpInfo(authMethodCreateEmail) {
      let postBody = authMethodCreateEmail;
      // verify the required parameter 'authMethodCreateEmail' is set
      if (authMethodCreateEmail === undefined || authMethodCreateEmail === null) {
        throw new Error("Missing the required parameter 'authMethodCreateEmail' when calling authMethodCreateEmail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodCreateOutput;
      return this.apiClient.callApi(
        '/auth-method-create-email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodCreateEmail} authMethodCreateEmail 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodCreateOutput}
     */
    authMethodCreateEmail(authMethodCreateEmail) {
      return this.authMethodCreateEmailWithHttpInfo(authMethodCreateEmail)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodCreateGcp} authMethodCreateGcp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodCreateOutput} and HTTP response
     */
    authMethodCreateGcpWithHttpInfo(authMethodCreateGcp) {
      let postBody = authMethodCreateGcp;
      // verify the required parameter 'authMethodCreateGcp' is set
      if (authMethodCreateGcp === undefined || authMethodCreateGcp === null) {
        throw new Error("Missing the required parameter 'authMethodCreateGcp' when calling authMethodCreateGcp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodCreateOutput;
      return this.apiClient.callApi(
        '/auth-method-create-gcp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodCreateGcp} authMethodCreateGcp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodCreateOutput}
     */
    authMethodCreateGcp(authMethodCreateGcp) {
      return this.authMethodCreateGcpWithHttpInfo(authMethodCreateGcp)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodCreateK8s} authMethodCreateK8s 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodCreateOutput} and HTTP response
     */
    authMethodCreateK8sWithHttpInfo(authMethodCreateK8s) {
      let postBody = authMethodCreateK8s;
      // verify the required parameter 'authMethodCreateK8s' is set
      if (authMethodCreateK8s === undefined || authMethodCreateK8s === null) {
        throw new Error("Missing the required parameter 'authMethodCreateK8s' when calling authMethodCreateK8s");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodCreateOutput;
      return this.apiClient.callApi(
        '/auth-method-create-k8s', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodCreateK8s} authMethodCreateK8s 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodCreateOutput}
     */
    authMethodCreateK8s(authMethodCreateK8s) {
      return this.authMethodCreateK8sWithHttpInfo(authMethodCreateK8s)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodCreateKerberos} authMethodCreateKerberos 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodCreateOutput} and HTTP response
     */
    authMethodCreateKerberosWithHttpInfo(authMethodCreateKerberos) {
      let postBody = authMethodCreateKerberos;
      // verify the required parameter 'authMethodCreateKerberos' is set
      if (authMethodCreateKerberos === undefined || authMethodCreateKerberos === null) {
        throw new Error("Missing the required parameter 'authMethodCreateKerberos' when calling authMethodCreateKerberos");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodCreateOutput;
      return this.apiClient.callApi(
        '/auth-method-create-kerberos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodCreateKerberos} authMethodCreateKerberos 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodCreateOutput}
     */
    authMethodCreateKerberos(authMethodCreateKerberos) {
      return this.authMethodCreateKerberosWithHttpInfo(authMethodCreateKerberos)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodCreateLdap} authMethodCreateLdap 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodCreateOutput} and HTTP response
     */
    authMethodCreateLdapWithHttpInfo(authMethodCreateLdap) {
      let postBody = authMethodCreateLdap;
      // verify the required parameter 'authMethodCreateLdap' is set
      if (authMethodCreateLdap === undefined || authMethodCreateLdap === null) {
        throw new Error("Missing the required parameter 'authMethodCreateLdap' when calling authMethodCreateLdap");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodCreateOutput;
      return this.apiClient.callApi(
        '/auth-method-create-ldap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodCreateLdap} authMethodCreateLdap 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodCreateOutput}
     */
    authMethodCreateLdap(authMethodCreateLdap) {
      return this.authMethodCreateLdapWithHttpInfo(authMethodCreateLdap)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodCreateOCI} authMethodCreateOCI 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodCreateOutput} and HTTP response
     */
    authMethodCreateOCIWithHttpInfo(authMethodCreateOCI) {
      let postBody = authMethodCreateOCI;
      // verify the required parameter 'authMethodCreateOCI' is set
      if (authMethodCreateOCI === undefined || authMethodCreateOCI === null) {
        throw new Error("Missing the required parameter 'authMethodCreateOCI' when calling authMethodCreateOCI");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodCreateOutput;
      return this.apiClient.callApi(
        '/auth-method-create-oci', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodCreateOCI} authMethodCreateOCI 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodCreateOutput}
     */
    authMethodCreateOCI(authMethodCreateOCI) {
      return this.authMethodCreateOCIWithHttpInfo(authMethodCreateOCI)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodCreateOIDC} authMethodCreateOIDC 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodCreateOutput} and HTTP response
     */
    authMethodCreateOIDCWithHttpInfo(authMethodCreateOIDC) {
      let postBody = authMethodCreateOIDC;
      // verify the required parameter 'authMethodCreateOIDC' is set
      if (authMethodCreateOIDC === undefined || authMethodCreateOIDC === null) {
        throw new Error("Missing the required parameter 'authMethodCreateOIDC' when calling authMethodCreateOIDC");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodCreateOutput;
      return this.apiClient.callApi(
        '/auth-method-create-oidc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodCreateOIDC} authMethodCreateOIDC 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodCreateOutput}
     */
    authMethodCreateOIDC(authMethodCreateOIDC) {
      return this.authMethodCreateOIDCWithHttpInfo(authMethodCreateOIDC)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodCreateOauth2} authMethodCreateOauth2 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodCreateOutput} and HTTP response
     */
    authMethodCreateOauth2WithHttpInfo(authMethodCreateOauth2) {
      let postBody = authMethodCreateOauth2;
      // verify the required parameter 'authMethodCreateOauth2' is set
      if (authMethodCreateOauth2 === undefined || authMethodCreateOauth2 === null) {
        throw new Error("Missing the required parameter 'authMethodCreateOauth2' when calling authMethodCreateOauth2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodCreateOutput;
      return this.apiClient.callApi(
        '/auth-method-create-oauth2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodCreateOauth2} authMethodCreateOauth2 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodCreateOutput}
     */
    authMethodCreateOauth2(authMethodCreateOauth2) {
      return this.authMethodCreateOauth2WithHttpInfo(authMethodCreateOauth2)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodCreateSAML} authMethodCreateSAML 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodCreateOutput} and HTTP response
     */
    authMethodCreateSAMLWithHttpInfo(authMethodCreateSAML) {
      let postBody = authMethodCreateSAML;
      // verify the required parameter 'authMethodCreateSAML' is set
      if (authMethodCreateSAML === undefined || authMethodCreateSAML === null) {
        throw new Error("Missing the required parameter 'authMethodCreateSAML' when calling authMethodCreateSAML");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodCreateOutput;
      return this.apiClient.callApi(
        '/auth-method-create-saml', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodCreateSAML} authMethodCreateSAML 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodCreateOutput}
     */
    authMethodCreateSAML(authMethodCreateSAML) {
      return this.authMethodCreateSAMLWithHttpInfo(authMethodCreateSAML)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodCreateUniversalIdentity} authMethodCreateUniversalIdentity 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodCreateOutput} and HTTP response
     */
    authMethodCreateUniversalIdentityWithHttpInfo(authMethodCreateUniversalIdentity) {
      let postBody = authMethodCreateUniversalIdentity;
      // verify the required parameter 'authMethodCreateUniversalIdentity' is set
      if (authMethodCreateUniversalIdentity === undefined || authMethodCreateUniversalIdentity === null) {
        throw new Error("Missing the required parameter 'authMethodCreateUniversalIdentity' when calling authMethodCreateUniversalIdentity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodCreateOutput;
      return this.apiClient.callApi(
        '/auth-method-create-universal-identity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodCreateUniversalIdentity} authMethodCreateUniversalIdentity 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodCreateOutput}
     */
    authMethodCreateUniversalIdentity(authMethodCreateUniversalIdentity) {
      return this.authMethodCreateUniversalIdentityWithHttpInfo(authMethodCreateUniversalIdentity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodDelete} authMethodDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodDeleteOutput} and HTTP response
     */
    authMethodDeleteWithHttpInfo(authMethodDelete) {
      let postBody = authMethodDelete;
      // verify the required parameter 'authMethodDelete' is set
      if (authMethodDelete === undefined || authMethodDelete === null) {
        throw new Error("Missing the required parameter 'authMethodDelete' when calling authMethodDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodDeleteOutput;
      return this.apiClient.callApi(
        '/auth-method-delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodDelete} authMethodDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodDeleteOutput}
     */
    authMethodDelete(authMethodDelete) {
      return this.authMethodDeleteWithHttpInfo(authMethodDelete)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodGet} authMethodGet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethod} and HTTP response
     */
    authMethodGetWithHttpInfo(authMethodGet) {
      let postBody = authMethodGet;
      // verify the required parameter 'authMethodGet' is set
      if (authMethodGet === undefined || authMethodGet === null) {
        throw new Error("Missing the required parameter 'authMethodGet' when calling authMethodGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethod;
      return this.apiClient.callApi(
        '/auth-method-get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodGet} authMethodGet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethod}
     */
    authMethodGet(authMethodGet) {
      return this.authMethodGetWithHttpInfo(authMethodGet)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodList} authMethodList 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListAuthMethodsOutput} and HTTP response
     */
    authMethodListWithHttpInfo(authMethodList) {
      let postBody = authMethodList;
      // verify the required parameter 'authMethodList' is set
      if (authMethodList === undefined || authMethodList === null) {
        throw new Error("Missing the required parameter 'authMethodList' when calling authMethodList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAuthMethodsOutput;
      return this.apiClient.callApi(
        '/auth-method-list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodList} authMethodList 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListAuthMethodsOutput}
     */
    authMethodList(authMethodList) {
      return this.authMethodListWithHttpInfo(authMethodList)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodUpdateApiKey} authMethodUpdateApiKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodUpdateOutput} and HTTP response
     */
    authMethodUpdateApiKeyWithHttpInfo(authMethodUpdateApiKey) {
      let postBody = authMethodUpdateApiKey;
      // verify the required parameter 'authMethodUpdateApiKey' is set
      if (authMethodUpdateApiKey === undefined || authMethodUpdateApiKey === null) {
        throw new Error("Missing the required parameter 'authMethodUpdateApiKey' when calling authMethodUpdateApiKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodUpdateOutput;
      return this.apiClient.callApi(
        '/auth-method-update-api-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodUpdateApiKey} authMethodUpdateApiKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodUpdateOutput}
     */
    authMethodUpdateApiKey(authMethodUpdateApiKey) {
      return this.authMethodUpdateApiKeyWithHttpInfo(authMethodUpdateApiKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodUpdateAwsIam} authMethodUpdateAwsIam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodUpdateOutput} and HTTP response
     */
    authMethodUpdateAwsIamWithHttpInfo(authMethodUpdateAwsIam) {
      let postBody = authMethodUpdateAwsIam;
      // verify the required parameter 'authMethodUpdateAwsIam' is set
      if (authMethodUpdateAwsIam === undefined || authMethodUpdateAwsIam === null) {
        throw new Error("Missing the required parameter 'authMethodUpdateAwsIam' when calling authMethodUpdateAwsIam");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodUpdateOutput;
      return this.apiClient.callApi(
        '/auth-method-update-aws-iam', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodUpdateAwsIam} authMethodUpdateAwsIam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodUpdateOutput}
     */
    authMethodUpdateAwsIam(authMethodUpdateAwsIam) {
      return this.authMethodUpdateAwsIamWithHttpInfo(authMethodUpdateAwsIam)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodUpdateAzureAD} authMethodUpdateAzureAD 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodUpdateOutput} and HTTP response
     */
    authMethodUpdateAzureADWithHttpInfo(authMethodUpdateAzureAD) {
      let postBody = authMethodUpdateAzureAD;
      // verify the required parameter 'authMethodUpdateAzureAD' is set
      if (authMethodUpdateAzureAD === undefined || authMethodUpdateAzureAD === null) {
        throw new Error("Missing the required parameter 'authMethodUpdateAzureAD' when calling authMethodUpdateAzureAD");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodUpdateOutput;
      return this.apiClient.callApi(
        '/auth-method-update-azure-ad', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodUpdateAzureAD} authMethodUpdateAzureAD 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodUpdateOutput}
     */
    authMethodUpdateAzureAD(authMethodUpdateAzureAD) {
      return this.authMethodUpdateAzureADWithHttpInfo(authMethodUpdateAzureAD)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodUpdateCert} authMethodUpdateCert 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodUpdateOutput} and HTTP response
     */
    authMethodUpdateCertWithHttpInfo(authMethodUpdateCert) {
      let postBody = authMethodUpdateCert;
      // verify the required parameter 'authMethodUpdateCert' is set
      if (authMethodUpdateCert === undefined || authMethodUpdateCert === null) {
        throw new Error("Missing the required parameter 'authMethodUpdateCert' when calling authMethodUpdateCert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodUpdateOutput;
      return this.apiClient.callApi(
        '/auth-method-update-cert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodUpdateCert} authMethodUpdateCert 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodUpdateOutput}
     */
    authMethodUpdateCert(authMethodUpdateCert) {
      return this.authMethodUpdateCertWithHttpInfo(authMethodUpdateCert)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodUpdateEmail} authMethodUpdateEmail 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodUpdateOutput} and HTTP response
     */
    authMethodUpdateEmailWithHttpInfo(authMethodUpdateEmail) {
      let postBody = authMethodUpdateEmail;
      // verify the required parameter 'authMethodUpdateEmail' is set
      if (authMethodUpdateEmail === undefined || authMethodUpdateEmail === null) {
        throw new Error("Missing the required parameter 'authMethodUpdateEmail' when calling authMethodUpdateEmail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodUpdateOutput;
      return this.apiClient.callApi(
        '/auth-method-update-email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodUpdateEmail} authMethodUpdateEmail 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodUpdateOutput}
     */
    authMethodUpdateEmail(authMethodUpdateEmail) {
      return this.authMethodUpdateEmailWithHttpInfo(authMethodUpdateEmail)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodUpdateGcp} authMethodUpdateGcp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodUpdateOutput} and HTTP response
     */
    authMethodUpdateGcpWithHttpInfo(authMethodUpdateGcp) {
      let postBody = authMethodUpdateGcp;
      // verify the required parameter 'authMethodUpdateGcp' is set
      if (authMethodUpdateGcp === undefined || authMethodUpdateGcp === null) {
        throw new Error("Missing the required parameter 'authMethodUpdateGcp' when calling authMethodUpdateGcp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodUpdateOutput;
      return this.apiClient.callApi(
        '/auth-method-update-gcp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodUpdateGcp} authMethodUpdateGcp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodUpdateOutput}
     */
    authMethodUpdateGcp(authMethodUpdateGcp) {
      return this.authMethodUpdateGcpWithHttpInfo(authMethodUpdateGcp)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodUpdateK8s} authMethodUpdateK8s 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodUpdateOutput} and HTTP response
     */
    authMethodUpdateK8sWithHttpInfo(authMethodUpdateK8s) {
      let postBody = authMethodUpdateK8s;
      // verify the required parameter 'authMethodUpdateK8s' is set
      if (authMethodUpdateK8s === undefined || authMethodUpdateK8s === null) {
        throw new Error("Missing the required parameter 'authMethodUpdateK8s' when calling authMethodUpdateK8s");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodUpdateOutput;
      return this.apiClient.callApi(
        '/auth-method-update-k8s', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodUpdateK8s} authMethodUpdateK8s 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodUpdateOutput}
     */
    authMethodUpdateK8s(authMethodUpdateK8s) {
      return this.authMethodUpdateK8sWithHttpInfo(authMethodUpdateK8s)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodUpdateKerberos} authMethodUpdateKerberos 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodCreateOutput} and HTTP response
     */
    authMethodUpdateKerberosWithHttpInfo(authMethodUpdateKerberos) {
      let postBody = authMethodUpdateKerberos;
      // verify the required parameter 'authMethodUpdateKerberos' is set
      if (authMethodUpdateKerberos === undefined || authMethodUpdateKerberos === null) {
        throw new Error("Missing the required parameter 'authMethodUpdateKerberos' when calling authMethodUpdateKerberos");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodCreateOutput;
      return this.apiClient.callApi(
        '/auth-method-update-kerberos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodUpdateKerberos} authMethodUpdateKerberos 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodCreateOutput}
     */
    authMethodUpdateKerberos(authMethodUpdateKerberos) {
      return this.authMethodUpdateKerberosWithHttpInfo(authMethodUpdateKerberos)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodUpdateLdap} authMethodUpdateLdap 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodUpdateOutput} and HTTP response
     */
    authMethodUpdateLdapWithHttpInfo(authMethodUpdateLdap) {
      let postBody = authMethodUpdateLdap;
      // verify the required parameter 'authMethodUpdateLdap' is set
      if (authMethodUpdateLdap === undefined || authMethodUpdateLdap === null) {
        throw new Error("Missing the required parameter 'authMethodUpdateLdap' when calling authMethodUpdateLdap");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodUpdateOutput;
      return this.apiClient.callApi(
        '/auth-method-update-ldap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodUpdateLdap} authMethodUpdateLdap 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodUpdateOutput}
     */
    authMethodUpdateLdap(authMethodUpdateLdap) {
      return this.authMethodUpdateLdapWithHttpInfo(authMethodUpdateLdap)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodUpdateOCI} authMethodUpdateOCI 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodUpdateOutput} and HTTP response
     */
    authMethodUpdateOCIWithHttpInfo(authMethodUpdateOCI) {
      let postBody = authMethodUpdateOCI;
      // verify the required parameter 'authMethodUpdateOCI' is set
      if (authMethodUpdateOCI === undefined || authMethodUpdateOCI === null) {
        throw new Error("Missing the required parameter 'authMethodUpdateOCI' when calling authMethodUpdateOCI");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodUpdateOutput;
      return this.apiClient.callApi(
        '/auth-method-update-oci', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodUpdateOCI} authMethodUpdateOCI 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodUpdateOutput}
     */
    authMethodUpdateOCI(authMethodUpdateOCI) {
      return this.authMethodUpdateOCIWithHttpInfo(authMethodUpdateOCI)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodUpdateOIDC} authMethodUpdateOIDC 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodUpdateOutput} and HTTP response
     */
    authMethodUpdateOIDCWithHttpInfo(authMethodUpdateOIDC) {
      let postBody = authMethodUpdateOIDC;
      // verify the required parameter 'authMethodUpdateOIDC' is set
      if (authMethodUpdateOIDC === undefined || authMethodUpdateOIDC === null) {
        throw new Error("Missing the required parameter 'authMethodUpdateOIDC' when calling authMethodUpdateOIDC");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodUpdateOutput;
      return this.apiClient.callApi(
        '/auth-method-update-oidc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodUpdateOIDC} authMethodUpdateOIDC 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodUpdateOutput}
     */
    authMethodUpdateOIDC(authMethodUpdateOIDC) {
      return this.authMethodUpdateOIDCWithHttpInfo(authMethodUpdateOIDC)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodUpdateOauth2} authMethodUpdateOauth2 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodUpdateOutput} and HTTP response
     */
    authMethodUpdateOauth2WithHttpInfo(authMethodUpdateOauth2) {
      let postBody = authMethodUpdateOauth2;
      // verify the required parameter 'authMethodUpdateOauth2' is set
      if (authMethodUpdateOauth2 === undefined || authMethodUpdateOauth2 === null) {
        throw new Error("Missing the required parameter 'authMethodUpdateOauth2' when calling authMethodUpdateOauth2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodUpdateOutput;
      return this.apiClient.callApi(
        '/auth-method-update-oauth2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodUpdateOauth2} authMethodUpdateOauth2 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodUpdateOutput}
     */
    authMethodUpdateOauth2(authMethodUpdateOauth2) {
      return this.authMethodUpdateOauth2WithHttpInfo(authMethodUpdateOauth2)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodUpdateSAML} authMethodUpdateSAML 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodUpdateOutput} and HTTP response
     */
    authMethodUpdateSAMLWithHttpInfo(authMethodUpdateSAML) {
      let postBody = authMethodUpdateSAML;
      // verify the required parameter 'authMethodUpdateSAML' is set
      if (authMethodUpdateSAML === undefined || authMethodUpdateSAML === null) {
        throw new Error("Missing the required parameter 'authMethodUpdateSAML' when calling authMethodUpdateSAML");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodUpdateOutput;
      return this.apiClient.callApi(
        '/auth-method-update-saml', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodUpdateSAML} authMethodUpdateSAML 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodUpdateOutput}
     */
    authMethodUpdateSAML(authMethodUpdateSAML) {
      return this.authMethodUpdateSAMLWithHttpInfo(authMethodUpdateSAML)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AuthMethodUpdateUniversalIdentity} authMethodUpdateUniversalIdentity 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethodUpdateOutput} and HTTP response
     */
    authMethodUpdateUniversalIdentityWithHttpInfo(authMethodUpdateUniversalIdentity) {
      let postBody = authMethodUpdateUniversalIdentity;
      // verify the required parameter 'authMethodUpdateUniversalIdentity' is set
      if (authMethodUpdateUniversalIdentity === undefined || authMethodUpdateUniversalIdentity === null) {
        throw new Error("Missing the required parameter 'authMethodUpdateUniversalIdentity' when calling authMethodUpdateUniversalIdentity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethodUpdateOutput;
      return this.apiClient.callApi(
        '/auth-method-update-universal-identity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AuthMethodUpdateUniversalIdentity} authMethodUpdateUniversalIdentity 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethodUpdateOutput}
     */
    authMethodUpdateUniversalIdentity(authMethodUpdateUniversalIdentity) {
      return this.authMethodUpdateUniversalIdentityWithHttpInfo(authMethodUpdateUniversalIdentity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CalcPasswordSecurityInfo} calcPasswordSecurityInfo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PasswordSecurityInfo} and HTTP response
     */
    calcPasswordSecurityInfoWithHttpInfo(calcPasswordSecurityInfo) {
      let postBody = calcPasswordSecurityInfo;
      // verify the required parameter 'calcPasswordSecurityInfo' is set
      if (calcPasswordSecurityInfo === undefined || calcPasswordSecurityInfo === null) {
        throw new Error("Missing the required parameter 'calcPasswordSecurityInfo' when calling calcPasswordSecurityInfo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PasswordSecurityInfo;
      return this.apiClient.callApi(
        '/calc-password-security-info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CalcPasswordSecurityInfo} calcPasswordSecurityInfo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PasswordSecurityInfo}
     */
    calcPasswordSecurityInfo(calcPasswordSecurityInfo) {
      return this.calcPasswordSecurityInfoWithHttpInfo(calcPasswordSecurityInfo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ChangeAdminAccountPassword} changeAdminAccountPassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    changeAdminAccountPasswordWithHttpInfo(changeAdminAccountPassword) {
      let postBody = changeAdminAccountPassword;
      // verify the required parameter 'changeAdminAccountPassword' is set
      if (changeAdminAccountPassword === undefined || changeAdminAccountPassword === null) {
        throw new Error("Missing the required parameter 'changeAdminAccountPassword' when calling changeAdminAccountPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/change-admin-account-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ChangeAdminAccountPassword} changeAdminAccountPassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    changeAdminAccountPassword(changeAdminAccountPassword) {
      return this.changeAdminAccountPasswordWithHttpInfo(changeAdminAccountPassword)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/Configure} configure 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConfigureOutput} and HTTP response
     */
    configureWithHttpInfo(configure) {
      let postBody = configure;
      // verify the required parameter 'configure' is set
      if (configure === undefined || configure === null) {
        throw new Error("Missing the required parameter 'configure' when calling configure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigureOutput;
      return this.apiClient.callApi(
        '/configure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/Configure} configure 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConfigureOutput}
     */
    configure(configure) {
      return this.configureWithHttpInfo(configure)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/Connect} connect 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    connectWithHttpInfo(connect) {
      let postBody = connect;
      // verify the required parameter 'connect' is set
      if (connect === undefined || connect === null) {
        throw new Error("Missing the required parameter 'connect' when calling connect");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/connect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/Connect} connect 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    connect(connect) {
      return this.connectWithHttpInfo(connect)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAWSTarget} createAWSTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAWSTargetOutput} and HTTP response
     */
    createAWSTargetWithHttpInfo(createAWSTarget) {
      let postBody = createAWSTarget;
      // verify the required parameter 'createAWSTarget' is set
      if (createAWSTarget === undefined || createAWSTarget === null) {
        throw new Error("Missing the required parameter 'createAWSTarget' when calling createAWSTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAWSTargetOutput;
      return this.apiClient.callApi(
        '/create-aws-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAWSTarget} createAWSTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAWSTargetOutput}
     */
    createAWSTarget(createAWSTarget) {
      return this.createAWSTargetWithHttpInfo(createAWSTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateArtifactoryTarget} createArtifactoryTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateArtifactoryTargetOutput} and HTTP response
     */
    createArtifactoryTargetWithHttpInfo(createArtifactoryTarget) {
      let postBody = createArtifactoryTarget;
      // verify the required parameter 'createArtifactoryTarget' is set
      if (createArtifactoryTarget === undefined || createArtifactoryTarget === null) {
        throw new Error("Missing the required parameter 'createArtifactoryTarget' when calling createArtifactoryTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateArtifactoryTargetOutput;
      return this.apiClient.callApi(
        '/create-artifactory-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateArtifactoryTarget} createArtifactoryTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateArtifactoryTargetOutput}
     */
    createArtifactoryTarget(createArtifactoryTarget) {
      return this.createArtifactoryTargetWithHttpInfo(createArtifactoryTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethod} createAuthMethod 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodOutput} and HTTP response
     */
    createAuthMethodWithHttpInfo(createAuthMethod) {
      let postBody = createAuthMethod;
      // verify the required parameter 'createAuthMethod' is set
      if (createAuthMethod === undefined || createAuthMethod === null) {
        throw new Error("Missing the required parameter 'createAuthMethod' when calling createAuthMethod");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodOutput;
      return this.apiClient.callApi(
        '/create-auth-method', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethod} createAuthMethod 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodOutput}
     */
    createAuthMethod(createAuthMethod) {
      return this.createAuthMethodWithHttpInfo(createAuthMethod)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodAWSIAM} createAuthMethodAWSIAM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodAWSIAMOutput} and HTTP response
     */
    createAuthMethodAWSIAMWithHttpInfo(createAuthMethodAWSIAM) {
      let postBody = createAuthMethodAWSIAM;
      // verify the required parameter 'createAuthMethodAWSIAM' is set
      if (createAuthMethodAWSIAM === undefined || createAuthMethodAWSIAM === null) {
        throw new Error("Missing the required parameter 'createAuthMethodAWSIAM' when calling createAuthMethodAWSIAM");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodAWSIAMOutput;
      return this.apiClient.callApi(
        '/create-auth-method-aws-iam', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodAWSIAM} createAuthMethodAWSIAM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodAWSIAMOutput}
     */
    createAuthMethodAWSIAM(createAuthMethodAWSIAM) {
      return this.createAuthMethodAWSIAMWithHttpInfo(createAuthMethodAWSIAM)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodAzureAD} createAuthMethodAzureAD 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodAzureADOutput} and HTTP response
     */
    createAuthMethodAzureADWithHttpInfo(createAuthMethodAzureAD) {
      let postBody = createAuthMethodAzureAD;
      // verify the required parameter 'createAuthMethodAzureAD' is set
      if (createAuthMethodAzureAD === undefined || createAuthMethodAzureAD === null) {
        throw new Error("Missing the required parameter 'createAuthMethodAzureAD' when calling createAuthMethodAzureAD");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodAzureADOutput;
      return this.apiClient.callApi(
        '/create-auth-method-azure-ad', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodAzureAD} createAuthMethodAzureAD 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodAzureADOutput}
     */
    createAuthMethodAzureAD(createAuthMethodAzureAD) {
      return this.createAuthMethodAzureADWithHttpInfo(createAuthMethodAzureAD)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodCert} createAuthMethodCert 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodCertOutput} and HTTP response
     */
    createAuthMethodCertWithHttpInfo(createAuthMethodCert) {
      let postBody = createAuthMethodCert;
      // verify the required parameter 'createAuthMethodCert' is set
      if (createAuthMethodCert === undefined || createAuthMethodCert === null) {
        throw new Error("Missing the required parameter 'createAuthMethodCert' when calling createAuthMethodCert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodCertOutput;
      return this.apiClient.callApi(
        '/create-auth-method-cert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodCert} createAuthMethodCert 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodCertOutput}
     */
    createAuthMethodCert(createAuthMethodCert) {
      return this.createAuthMethodCertWithHttpInfo(createAuthMethodCert)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodEmail} createAuthMethodEmail 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodEmailOutput} and HTTP response
     */
    createAuthMethodEmailWithHttpInfo(createAuthMethodEmail) {
      let postBody = createAuthMethodEmail;
      // verify the required parameter 'createAuthMethodEmail' is set
      if (createAuthMethodEmail === undefined || createAuthMethodEmail === null) {
        throw new Error("Missing the required parameter 'createAuthMethodEmail' when calling createAuthMethodEmail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodEmailOutput;
      return this.apiClient.callApi(
        '/create-auth-method-email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodEmail} createAuthMethodEmail 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodEmailOutput}
     */
    createAuthMethodEmail(createAuthMethodEmail) {
      return this.createAuthMethodEmailWithHttpInfo(createAuthMethodEmail)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodGCP} createAuthMethodGCP 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodGCPOutput} and HTTP response
     */
    createAuthMethodGCPWithHttpInfo(createAuthMethodGCP) {
      let postBody = createAuthMethodGCP;
      // verify the required parameter 'createAuthMethodGCP' is set
      if (createAuthMethodGCP === undefined || createAuthMethodGCP === null) {
        throw new Error("Missing the required parameter 'createAuthMethodGCP' when calling createAuthMethodGCP");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodGCPOutput;
      return this.apiClient.callApi(
        '/create-auth-method-gcp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodGCP} createAuthMethodGCP 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodGCPOutput}
     */
    createAuthMethodGCP(createAuthMethodGCP) {
      return this.createAuthMethodGCPWithHttpInfo(createAuthMethodGCP)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodHuawei} createAuthMethodHuawei 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodHuaweiOutput} and HTTP response
     */
    createAuthMethodHuaweiWithHttpInfo(createAuthMethodHuawei) {
      let postBody = createAuthMethodHuawei;
      // verify the required parameter 'createAuthMethodHuawei' is set
      if (createAuthMethodHuawei === undefined || createAuthMethodHuawei === null) {
        throw new Error("Missing the required parameter 'createAuthMethodHuawei' when calling createAuthMethodHuawei");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodHuaweiOutput;
      return this.apiClient.callApi(
        '/create-auth-method-huawei', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodHuawei} createAuthMethodHuawei 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodHuaweiOutput}
     */
    createAuthMethodHuawei(createAuthMethodHuawei) {
      return this.createAuthMethodHuaweiWithHttpInfo(createAuthMethodHuawei)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodK8S} createAuthMethodK8S 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodK8SOutput} and HTTP response
     */
    createAuthMethodK8SWithHttpInfo(createAuthMethodK8S) {
      let postBody = createAuthMethodK8S;
      // verify the required parameter 'createAuthMethodK8S' is set
      if (createAuthMethodK8S === undefined || createAuthMethodK8S === null) {
        throw new Error("Missing the required parameter 'createAuthMethodK8S' when calling createAuthMethodK8S");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodK8SOutput;
      return this.apiClient.callApi(
        '/create-auth-method-k8s', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodK8S} createAuthMethodK8S 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodK8SOutput}
     */
    createAuthMethodK8S(createAuthMethodK8S) {
      return this.createAuthMethodK8SWithHttpInfo(createAuthMethodK8S)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodLDAP} createAuthMethodLDAP 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodLDAPOutput} and HTTP response
     */
    createAuthMethodLDAPWithHttpInfo(createAuthMethodLDAP) {
      let postBody = createAuthMethodLDAP;
      // verify the required parameter 'createAuthMethodLDAP' is set
      if (createAuthMethodLDAP === undefined || createAuthMethodLDAP === null) {
        throw new Error("Missing the required parameter 'createAuthMethodLDAP' when calling createAuthMethodLDAP");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodLDAPOutput;
      return this.apiClient.callApi(
        '/create-auth-method-ldap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodLDAP} createAuthMethodLDAP 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodLDAPOutput}
     */
    createAuthMethodLDAP(createAuthMethodLDAP) {
      return this.createAuthMethodLDAPWithHttpInfo(createAuthMethodLDAP)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodOAuth2} createAuthMethodOAuth2 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodOAuth2Output} and HTTP response
     */
    createAuthMethodOAuth2WithHttpInfo(createAuthMethodOAuth2) {
      let postBody = createAuthMethodOAuth2;
      // verify the required parameter 'createAuthMethodOAuth2' is set
      if (createAuthMethodOAuth2 === undefined || createAuthMethodOAuth2 === null) {
        throw new Error("Missing the required parameter 'createAuthMethodOAuth2' when calling createAuthMethodOAuth2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodOAuth2Output;
      return this.apiClient.callApi(
        '/create-auth-method-oauth2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodOAuth2} createAuthMethodOAuth2 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodOAuth2Output}
     */
    createAuthMethodOAuth2(createAuthMethodOAuth2) {
      return this.createAuthMethodOAuth2WithHttpInfo(createAuthMethodOAuth2)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodOCI} createAuthMethodOCI 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodOCIOutput} and HTTP response
     */
    createAuthMethodOCIWithHttpInfo(createAuthMethodOCI) {
      let postBody = createAuthMethodOCI;
      // verify the required parameter 'createAuthMethodOCI' is set
      if (createAuthMethodOCI === undefined || createAuthMethodOCI === null) {
        throw new Error("Missing the required parameter 'createAuthMethodOCI' when calling createAuthMethodOCI");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodOCIOutput;
      return this.apiClient.callApi(
        '/create-auth-method-oci', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodOCI} createAuthMethodOCI 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodOCIOutput}
     */
    createAuthMethodOCI(createAuthMethodOCI) {
      return this.createAuthMethodOCIWithHttpInfo(createAuthMethodOCI)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodOIDC} createAuthMethodOIDC 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodOIDCOutput} and HTTP response
     */
    createAuthMethodOIDCWithHttpInfo(createAuthMethodOIDC) {
      let postBody = createAuthMethodOIDC;
      // verify the required parameter 'createAuthMethodOIDC' is set
      if (createAuthMethodOIDC === undefined || createAuthMethodOIDC === null) {
        throw new Error("Missing the required parameter 'createAuthMethodOIDC' when calling createAuthMethodOIDC");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodOIDCOutput;
      return this.apiClient.callApi(
        '/create-auth-method-oidc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodOIDC} createAuthMethodOIDC 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodOIDCOutput}
     */
    createAuthMethodOIDC(createAuthMethodOIDC) {
      return this.createAuthMethodOIDCWithHttpInfo(createAuthMethodOIDC)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodSAML} createAuthMethodSAML 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodSAMLOutput} and HTTP response
     */
    createAuthMethodSAMLWithHttpInfo(createAuthMethodSAML) {
      let postBody = createAuthMethodSAML;
      // verify the required parameter 'createAuthMethodSAML' is set
      if (createAuthMethodSAML === undefined || createAuthMethodSAML === null) {
        throw new Error("Missing the required parameter 'createAuthMethodSAML' when calling createAuthMethodSAML");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodSAMLOutput;
      return this.apiClient.callApi(
        '/create-auth-method-saml', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodSAML} createAuthMethodSAML 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodSAMLOutput}
     */
    createAuthMethodSAML(createAuthMethodSAML) {
      return this.createAuthMethodSAMLWithHttpInfo(createAuthMethodSAML)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodUniversalIdentity} createAuthMethodUniversalIdentity 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodUniversalIdentityOutput} and HTTP response
     */
    createAuthMethodUniversalIdentityWithHttpInfo(createAuthMethodUniversalIdentity) {
      let postBody = createAuthMethodUniversalIdentity;
      // verify the required parameter 'createAuthMethodUniversalIdentity' is set
      if (createAuthMethodUniversalIdentity === undefined || createAuthMethodUniversalIdentity === null) {
        throw new Error("Missing the required parameter 'createAuthMethodUniversalIdentity' when calling createAuthMethodUniversalIdentity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodUniversalIdentityOutput;
      return this.apiClient.callApi(
        '/create-auth-method-universal-identity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodUniversalIdentity} createAuthMethodUniversalIdentity 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodUniversalIdentityOutput}
     */
    createAuthMethodUniversalIdentity(createAuthMethodUniversalIdentity) {
      return this.createAuthMethodUniversalIdentityWithHttpInfo(createAuthMethodUniversalIdentity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAzureTarget} createAzureTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAzureTargetOutput} and HTTP response
     */
    createAzureTargetWithHttpInfo(createAzureTarget) {
      let postBody = createAzureTarget;
      // verify the required parameter 'createAzureTarget' is set
      if (createAzureTarget === undefined || createAzureTarget === null) {
        throw new Error("Missing the required parameter 'createAzureTarget' when calling createAzureTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAzureTargetOutput;
      return this.apiClient.callApi(
        '/create-azure-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAzureTarget} createAzureTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAzureTargetOutput}
     */
    createAzureTarget(createAzureTarget) {
      return this.createAzureTargetWithHttpInfo(createAzureTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateCertificate} createCertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateCertificateOutput} and HTTP response
     */
    createCertificateWithHttpInfo(createCertificate) {
      let postBody = createCertificate;
      // verify the required parameter 'createCertificate' is set
      if (createCertificate === undefined || createCertificate === null) {
        throw new Error("Missing the required parameter 'createCertificate' when calling createCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCertificateOutput;
      return this.apiClient.callApi(
        '/create-certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateCertificate} createCertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateCertificateOutput}
     */
    createCertificate(createCertificate) {
      return this.createCertificateWithHttpInfo(createCertificate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateClassicKey} createClassicKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateClassicKeyOutput} and HTTP response
     */
    createClassicKeyWithHttpInfo(createClassicKey) {
      let postBody = createClassicKey;
      // verify the required parameter 'createClassicKey' is set
      if (createClassicKey === undefined || createClassicKey === null) {
        throw new Error("Missing the required parameter 'createClassicKey' when calling createClassicKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateClassicKeyOutput;
      return this.apiClient.callApi(
        '/create-classic-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateClassicKey} createClassicKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateClassicKeyOutput}
     */
    createClassicKey(createClassicKey) {
      return this.createClassicKeyWithHttpInfo(createClassicKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateDBTarget} createDBTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateDBTargetOutput} and HTTP response
     */
    createDBTargetWithHttpInfo(createDBTarget) {
      let postBody = createDBTarget;
      // verify the required parameter 'createDBTarget' is set
      if (createDBTarget === undefined || createDBTarget === null) {
        throw new Error("Missing the required parameter 'createDBTarget' when calling createDBTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDBTargetOutput;
      return this.apiClient.callApi(
        '/create-db-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateDBTarget} createDBTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateDBTargetOutput}
     */
    createDBTarget(createDBTarget) {
      return this.createDBTargetWithHttpInfo(createDBTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateDFCKey} createDFCKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateDFCKeyOutput} and HTTP response
     */
    createDFCKeyWithHttpInfo(createDFCKey) {
      let postBody = createDFCKey;
      // verify the required parameter 'createDFCKey' is set
      if (createDFCKey === undefined || createDFCKey === null) {
        throw new Error("Missing the required parameter 'createDFCKey' when calling createDFCKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDFCKeyOutput;
      return this.apiClient.callApi(
        '/create-dfc-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateDFCKey} createDFCKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateDFCKeyOutput}
     */
    createDFCKey(createDFCKey) {
      return this.createDFCKeyWithHttpInfo(createDFCKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateDockerhubTarget} createDockerhubTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateDockerhubTargetOutput} and HTTP response
     */
    createDockerhubTargetWithHttpInfo(createDockerhubTarget) {
      let postBody = createDockerhubTarget;
      // verify the required parameter 'createDockerhubTarget' is set
      if (createDockerhubTarget === undefined || createDockerhubTarget === null) {
        throw new Error("Missing the required parameter 'createDockerhubTarget' when calling createDockerhubTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDockerhubTargetOutput;
      return this.apiClient.callApi(
        '/create-dockerhub-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateDockerhubTarget} createDockerhubTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateDockerhubTargetOutput}
     */
    createDockerhubTarget(createDockerhubTarget) {
      return this.createDockerhubTargetWithHttpInfo(createDockerhubTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateDynamicSecret} createDynamicSecret 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createDynamicSecretWithHttpInfo(createDynamicSecret) {
      let postBody = createDynamicSecret;
      // verify the required parameter 'createDynamicSecret' is set
      if (createDynamicSecret === undefined || createDynamicSecret === null) {
        throw new Error("Missing the required parameter 'createDynamicSecret' when calling createDynamicSecret");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/create-dynamic-secret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateDynamicSecret} createDynamicSecret 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createDynamicSecret(createDynamicSecret) {
      return this.createDynamicSecretWithHttpInfo(createDynamicSecret)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateEKSTarget} createEKSTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateEKSTargetOutput} and HTTP response
     */
    createEKSTargetWithHttpInfo(createEKSTarget) {
      let postBody = createEKSTarget;
      // verify the required parameter 'createEKSTarget' is set
      if (createEKSTarget === undefined || createEKSTarget === null) {
        throw new Error("Missing the required parameter 'createEKSTarget' when calling createEKSTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEKSTargetOutput;
      return this.apiClient.callApi(
        '/create-eks-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateEKSTarget} createEKSTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateEKSTargetOutput}
     */
    createEKSTarget(createEKSTarget) {
      return this.createEKSTargetWithHttpInfo(createEKSTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateESM} createESM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateESMOutput} and HTTP response
     */
    createESMWithHttpInfo(createESM) {
      let postBody = createESM;
      // verify the required parameter 'createESM' is set
      if (createESM === undefined || createESM === null) {
        throw new Error("Missing the required parameter 'createESM' when calling createESM");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateESMOutput;
      return this.apiClient.callApi(
        '/create-esm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateESM} createESM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateESMOutput}
     */
    createESM(createESM) {
      return this.createESMWithHttpInfo(createESM)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateEventForwarder} createEventForwarder 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateEventForwarderOutput} and HTTP response
     */
    createEventForwarderWithHttpInfo(createEventForwarder) {
      let postBody = createEventForwarder;
      // verify the required parameter 'createEventForwarder' is set
      if (createEventForwarder === undefined || createEventForwarder === null) {
        throw new Error("Missing the required parameter 'createEventForwarder' when calling createEventForwarder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEventForwarderOutput;
      return this.apiClient.callApi(
        '/create-event-forwarder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateEventForwarder} createEventForwarder 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateEventForwarderOutput}
     */
    createEventForwarder(createEventForwarder) {
      return this.createEventForwarderWithHttpInfo(createEventForwarder)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateGKETarget} createGKETarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGKETargetOutput} and HTTP response
     */
    createGKETargetWithHttpInfo(createGKETarget) {
      let postBody = createGKETarget;
      // verify the required parameter 'createGKETarget' is set
      if (createGKETarget === undefined || createGKETarget === null) {
        throw new Error("Missing the required parameter 'createGKETarget' when calling createGKETarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGKETargetOutput;
      return this.apiClient.callApi(
        '/create-gke-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateGKETarget} createGKETarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGKETargetOutput}
     */
    createGKETarget(createGKETarget) {
      return this.createGKETargetWithHttpInfo(createGKETarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateGcpTarget} createGcpTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGcpTargetOutput} and HTTP response
     */
    createGcpTargetWithHttpInfo(createGcpTarget) {
      let postBody = createGcpTarget;
      // verify the required parameter 'createGcpTarget' is set
      if (createGcpTarget === undefined || createGcpTarget === null) {
        throw new Error("Missing the required parameter 'createGcpTarget' when calling createGcpTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGcpTargetOutput;
      return this.apiClient.callApi(
        '/create-gcp-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateGcpTarget} createGcpTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGcpTargetOutput}
     */
    createGcpTarget(createGcpTarget) {
      return this.createGcpTargetWithHttpInfo(createGcpTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateGithubTarget} createGithubTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGithubTargetOutput} and HTTP response
     */
    createGithubTargetWithHttpInfo(createGithubTarget) {
      let postBody = createGithubTarget;
      // verify the required parameter 'createGithubTarget' is set
      if (createGithubTarget === undefined || createGithubTarget === null) {
        throw new Error("Missing the required parameter 'createGithubTarget' when calling createGithubTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGithubTargetOutput;
      return this.apiClient.callApi(
        '/create-github-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateGithubTarget} createGithubTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGithubTargetOutput}
     */
    createGithubTarget(createGithubTarget) {
      return this.createGithubTargetWithHttpInfo(createGithubTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateGitlabTarget} createGitlabTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGitlabTargetOutput} and HTTP response
     */
    createGitlabTargetWithHttpInfo(createGitlabTarget) {
      let postBody = createGitlabTarget;
      // verify the required parameter 'createGitlabTarget' is set
      if (createGitlabTarget === undefined || createGitlabTarget === null) {
        throw new Error("Missing the required parameter 'createGitlabTarget' when calling createGitlabTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGitlabTargetOutput;
      return this.apiClient.callApi(
        '/create-gitlab-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateGitlabTarget} createGitlabTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGitlabTargetOutput}
     */
    createGitlabTarget(createGitlabTarget) {
      return this.createGitlabTargetWithHttpInfo(createGitlabTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateGlobalSignAtlasTarget} createGlobalSignAtlasTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGlobalSignAtlasTargetOutput} and HTTP response
     */
    createGlobalSignAtlasTargetWithHttpInfo(createGlobalSignAtlasTarget) {
      let postBody = createGlobalSignAtlasTarget;
      // verify the required parameter 'createGlobalSignAtlasTarget' is set
      if (createGlobalSignAtlasTarget === undefined || createGlobalSignAtlasTarget === null) {
        throw new Error("Missing the required parameter 'createGlobalSignAtlasTarget' when calling createGlobalSignAtlasTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGlobalSignAtlasTargetOutput;
      return this.apiClient.callApi(
        '/create-globalsign-atlas-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateGlobalSignAtlasTarget} createGlobalSignAtlasTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGlobalSignAtlasTargetOutput}
     */
    createGlobalSignAtlasTarget(createGlobalSignAtlasTarget) {
      return this.createGlobalSignAtlasTargetWithHttpInfo(createGlobalSignAtlasTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateGlobalSignTarget} createGlobalSignTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGlobalSignTargetOutput} and HTTP response
     */
    createGlobalSignTargetWithHttpInfo(createGlobalSignTarget) {
      let postBody = createGlobalSignTarget;
      // verify the required parameter 'createGlobalSignTarget' is set
      if (createGlobalSignTarget === undefined || createGlobalSignTarget === null) {
        throw new Error("Missing the required parameter 'createGlobalSignTarget' when calling createGlobalSignTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGlobalSignTargetOutput;
      return this.apiClient.callApi(
        '/create-globalsign-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateGlobalSignTarget} createGlobalSignTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGlobalSignTargetOutput}
     */
    createGlobalSignTarget(createGlobalSignTarget) {
      return this.createGlobalSignTargetWithHttpInfo(createGlobalSignTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateGodaddyTarget} createGodaddyTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGodaddyTargetOutput} and HTTP response
     */
    createGodaddyTargetWithHttpInfo(createGodaddyTarget) {
      let postBody = createGodaddyTarget;
      // verify the required parameter 'createGodaddyTarget' is set
      if (createGodaddyTarget === undefined || createGodaddyTarget === null) {
        throw new Error("Missing the required parameter 'createGodaddyTarget' when calling createGodaddyTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGodaddyTargetOutput;
      return this.apiClient.callApi(
        '/create-godaddy-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateGodaddyTarget} createGodaddyTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGodaddyTargetOutput}
     */
    createGodaddyTarget(createGodaddyTarget) {
      return this.createGodaddyTargetWithHttpInfo(createGodaddyTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateGroup} createGroup 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGroupOutput} and HTTP response
     */
    createGroupWithHttpInfo(createGroup) {
      let postBody = createGroup;
      // verify the required parameter 'createGroup' is set
      if (createGroup === undefined || createGroup === null) {
        throw new Error("Missing the required parameter 'createGroup' when calling createGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGroupOutput;
      return this.apiClient.callApi(
        '/create-group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateGroup} createGroup 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGroupOutput}
     */
    createGroup(createGroup) {
      return this.createGroupWithHttpInfo(createGroup)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateHashiVaultTarget} createHashiVaultTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateHashiVaultTargetOutput} and HTTP response
     */
    createHashiVaultTargetWithHttpInfo(createHashiVaultTarget) {
      let postBody = createHashiVaultTarget;
      // verify the required parameter 'createHashiVaultTarget' is set
      if (createHashiVaultTarget === undefined || createHashiVaultTarget === null) {
        throw new Error("Missing the required parameter 'createHashiVaultTarget' when calling createHashiVaultTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateHashiVaultTargetOutput;
      return this.apiClient.callApi(
        '/create-hashi-vault-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateHashiVaultTarget} createHashiVaultTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateHashiVaultTargetOutput}
     */
    createHashiVaultTarget(createHashiVaultTarget) {
      return this.createHashiVaultTargetWithHttpInfo(createHashiVaultTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateKey} createKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateKeyOutput} and HTTP response
     */
    createKeyWithHttpInfo(createKey) {
      let postBody = createKey;
      // verify the required parameter 'createKey' is set
      if (createKey === undefined || createKey === null) {
        throw new Error("Missing the required parameter 'createKey' when calling createKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateKeyOutput;
      return this.apiClient.callApi(
        '/create-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateKey} createKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateKeyOutput}
     */
    createKey(createKey) {
      return this.createKeyWithHttpInfo(createKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateLinkedTarget} createLinkedTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateLinkedTargetOutput} and HTTP response
     */
    createLinkedTargetWithHttpInfo(createLinkedTarget) {
      let postBody = createLinkedTarget;
      // verify the required parameter 'createLinkedTarget' is set
      if (createLinkedTarget === undefined || createLinkedTarget === null) {
        throw new Error("Missing the required parameter 'createLinkedTarget' when calling createLinkedTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLinkedTargetOutput;
      return this.apiClient.callApi(
        '/create-linked-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateLinkedTarget} createLinkedTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateLinkedTargetOutput}
     */
    createLinkedTarget(createLinkedTarget) {
      return this.createLinkedTargetWithHttpInfo(createLinkedTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateNativeK8STarget} createNativeK8STarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateNativeK8STargetOutput} and HTTP response
     */
    createNativeK8STargetWithHttpInfo(createNativeK8STarget) {
      let postBody = createNativeK8STarget;
      // verify the required parameter 'createNativeK8STarget' is set
      if (createNativeK8STarget === undefined || createNativeK8STarget === null) {
        throw new Error("Missing the required parameter 'createNativeK8STarget' when calling createNativeK8STarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateNativeK8STargetOutput;
      return this.apiClient.callApi(
        '/create-k8s-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateNativeK8STarget} createNativeK8STarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateNativeK8STargetOutput}
     */
    createNativeK8STarget(createNativeK8STarget) {
      return this.createNativeK8STargetWithHttpInfo(createNativeK8STarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateOidcApp} createOidcApp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateOidcAppOutput} and HTTP response
     */
    createOidcAppWithHttpInfo(createOidcApp) {
      let postBody = createOidcApp;
      // verify the required parameter 'createOidcApp' is set
      if (createOidcApp === undefined || createOidcApp === null) {
        throw new Error("Missing the required parameter 'createOidcApp' when calling createOidcApp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateOidcAppOutput;
      return this.apiClient.callApi(
        '/create-oidc-app', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateOidcApp} createOidcApp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateOidcAppOutput}
     */
    createOidcApp(createOidcApp) {
      return this.createOidcAppWithHttpInfo(createOidcApp)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreatePKICertIssuer} createPKICertIssuer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatePKICertIssuerOutput} and HTTP response
     */
    createPKICertIssuerWithHttpInfo(createPKICertIssuer) {
      let postBody = createPKICertIssuer;
      // verify the required parameter 'createPKICertIssuer' is set
      if (createPKICertIssuer === undefined || createPKICertIssuer === null) {
        throw new Error("Missing the required parameter 'createPKICertIssuer' when calling createPKICertIssuer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePKICertIssuerOutput;
      return this.apiClient.callApi(
        '/create-pki-cert-issuer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreatePKICertIssuer} createPKICertIssuer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatePKICertIssuerOutput}
     */
    createPKICertIssuer(createPKICertIssuer) {
      return this.createPKICertIssuerWithHttpInfo(createPKICertIssuer)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreatePasskey} createPasskey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatePasskeyOutput} and HTTP response
     */
    createPasskeyWithHttpInfo(createPasskey) {
      let postBody = createPasskey;
      // verify the required parameter 'createPasskey' is set
      if (createPasskey === undefined || createPasskey === null) {
        throw new Error("Missing the required parameter 'createPasskey' when calling createPasskey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePasskeyOutput;
      return this.apiClient.callApi(
        '/create-passkey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreatePasskey} createPasskey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatePasskeyOutput}
     */
    createPasskey(createPasskey) {
      return this.createPasskeyWithHttpInfo(createPasskey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreatePingTarget} createPingTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatePingTargetOutput} and HTTP response
     */
    createPingTargetWithHttpInfo(createPingTarget) {
      let postBody = createPingTarget;
      // verify the required parameter 'createPingTarget' is set
      if (createPingTarget === undefined || createPingTarget === null) {
        throw new Error("Missing the required parameter 'createPingTarget' when calling createPingTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePingTargetOutput;
      return this.apiClient.callApi(
        '/create-ping-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreatePingTarget} createPingTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatePingTargetOutput}
     */
    createPingTarget(createPingTarget) {
      return this.createPingTargetWithHttpInfo(createPingTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateRabbitMQTarget} createRabbitMQTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateRabbitMQTargetOutput} and HTTP response
     */
    createRabbitMQTargetWithHttpInfo(createRabbitMQTarget) {
      let postBody = createRabbitMQTarget;
      // verify the required parameter 'createRabbitMQTarget' is set
      if (createRabbitMQTarget === undefined || createRabbitMQTarget === null) {
        throw new Error("Missing the required parameter 'createRabbitMQTarget' when calling createRabbitMQTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRabbitMQTargetOutput;
      return this.apiClient.callApi(
        '/create-rabbitmq-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateRabbitMQTarget} createRabbitMQTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateRabbitMQTargetOutput}
     */
    createRabbitMQTarget(createRabbitMQTarget) {
      return this.createRabbitMQTargetWithHttpInfo(createRabbitMQTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateRole} createRole 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createRoleWithHttpInfo(createRole) {
      let postBody = createRole;
      // verify the required parameter 'createRole' is set
      if (createRole === undefined || createRole === null) {
        throw new Error("Missing the required parameter 'createRole' when calling createRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/create-role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateRole} createRole 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createRole(createRole) {
      return this.createRoleWithHttpInfo(createRole)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateRotatedSecret} createRotatedSecret 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateRotatedSecretOutput} and HTTP response
     */
    createRotatedSecretWithHttpInfo(createRotatedSecret) {
      let postBody = createRotatedSecret;
      // verify the required parameter 'createRotatedSecret' is set
      if (createRotatedSecret === undefined || createRotatedSecret === null) {
        throw new Error("Missing the required parameter 'createRotatedSecret' when calling createRotatedSecret");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRotatedSecretOutput;
      return this.apiClient.callApi(
        '/create-rotated-secret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateRotatedSecret} createRotatedSecret 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateRotatedSecretOutput}
     */
    createRotatedSecret(createRotatedSecret) {
      return this.createRotatedSecretWithHttpInfo(createRotatedSecret)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateSSHCertIssuer} createSSHCertIssuer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSSHCertIssuerOutput} and HTTP response
     */
    createSSHCertIssuerWithHttpInfo(createSSHCertIssuer) {
      let postBody = createSSHCertIssuer;
      // verify the required parameter 'createSSHCertIssuer' is set
      if (createSSHCertIssuer === undefined || createSSHCertIssuer === null) {
        throw new Error("Missing the required parameter 'createSSHCertIssuer' when calling createSSHCertIssuer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSSHCertIssuerOutput;
      return this.apiClient.callApi(
        '/create-ssh-cert-issuer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateSSHCertIssuer} createSSHCertIssuer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSSHCertIssuerOutput}
     */
    createSSHCertIssuer(createSSHCertIssuer) {
      return this.createSSHCertIssuerWithHttpInfo(createSSHCertIssuer)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateSSHTarget} createSSHTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSSHTargetOutput} and HTTP response
     */
    createSSHTargetWithHttpInfo(createSSHTarget) {
      let postBody = createSSHTarget;
      // verify the required parameter 'createSSHTarget' is set
      if (createSSHTarget === undefined || createSSHTarget === null) {
        throw new Error("Missing the required parameter 'createSSHTarget' when calling createSSHTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSSHTargetOutput;
      return this.apiClient.callApi(
        '/create-ssh-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateSSHTarget} createSSHTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSSHTargetOutput}
     */
    createSSHTarget(createSSHTarget) {
      return this.createSSHTargetWithHttpInfo(createSSHTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateSalesforceTarget} createSalesforceTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSalesforceTargetOutput} and HTTP response
     */
    createSalesforceTargetWithHttpInfo(createSalesforceTarget) {
      let postBody = createSalesforceTarget;
      // verify the required parameter 'createSalesforceTarget' is set
      if (createSalesforceTarget === undefined || createSalesforceTarget === null) {
        throw new Error("Missing the required parameter 'createSalesforceTarget' when calling createSalesforceTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSalesforceTargetOutput;
      return this.apiClient.callApi(
        '/create-salesforce-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateSalesforceTarget} createSalesforceTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSalesforceTargetOutput}
     */
    createSalesforceTarget(createSalesforceTarget) {
      return this.createSalesforceTargetWithHttpInfo(createSalesforceTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateSecret} createSecret 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSecretOutput} and HTTP response
     */
    createSecretWithHttpInfo(createSecret) {
      let postBody = createSecret;
      // verify the required parameter 'createSecret' is set
      if (createSecret === undefined || createSecret === null) {
        throw new Error("Missing the required parameter 'createSecret' when calling createSecret");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSecretOutput;
      return this.apiClient.callApi(
        '/create-secret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateSecret} createSecret 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSecretOutput}
     */
    createSecret(createSecret) {
      return this.createSecretWithHttpInfo(createSecret)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateTokenizer} createTokenizer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTokenizerOutput} and HTTP response
     */
    createTokenizerWithHttpInfo(createTokenizer) {
      let postBody = createTokenizer;
      // verify the required parameter 'createTokenizer' is set
      if (createTokenizer === undefined || createTokenizer === null) {
        throw new Error("Missing the required parameter 'createTokenizer' when calling createTokenizer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTokenizerOutput;
      return this.apiClient.callApi(
        '/create-tokenizer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateTokenizer} createTokenizer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTokenizerOutput}
     */
    createTokenizer(createTokenizer) {
      return this.createTokenizerWithHttpInfo(createTokenizer)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateUSC} createUSC 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateUSCOutput} and HTTP response
     */
    createUSCWithHttpInfo(createUSC) {
      let postBody = createUSC;
      // verify the required parameter 'createUSC' is set
      if (createUSC === undefined || createUSC === null) {
        throw new Error("Missing the required parameter 'createUSC' when calling createUSC");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUSCOutput;
      return this.apiClient.callApi(
        '/create-usc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateUSC} createUSC 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateUSCOutput}
     */
    createUSC(createUSC) {
      return this.createUSCWithHttpInfo(createUSC)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateUserEvent} createUserEvent 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateUserEventOutput} and HTTP response
     */
    createUserEventWithHttpInfo(createUserEvent) {
      let postBody = createUserEvent;
      // verify the required parameter 'createUserEvent' is set
      if (createUserEvent === undefined || createUserEvent === null) {
        throw new Error("Missing the required parameter 'createUserEvent' when calling createUserEvent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUserEventOutput;
      return this.apiClient.callApi(
        '/create-user-event', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateUserEvent} createUserEvent 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateUserEventOutput}
     */
    createUserEvent(createUserEvent) {
      return this.createUserEventWithHttpInfo(createUserEvent)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateWebTarget} createWebTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateWebTargetOutput} and HTTP response
     */
    createWebTargetWithHttpInfo(createWebTarget) {
      let postBody = createWebTarget;
      // verify the required parameter 'createWebTarget' is set
      if (createWebTarget === undefined || createWebTarget === null) {
        throw new Error("Missing the required parameter 'createWebTarget' when calling createWebTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWebTargetOutput;
      return this.apiClient.callApi(
        '/create-web-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateWebTarget} createWebTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateWebTargetOutput}
     */
    createWebTarget(createWebTarget) {
      return this.createWebTargetWithHttpInfo(createWebTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateWindowsTarget} createWindowsTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateWindowsTargetOutput} and HTTP response
     */
    createWindowsTargetWithHttpInfo(createWindowsTarget) {
      let postBody = createWindowsTarget;
      // verify the required parameter 'createWindowsTarget' is set
      if (createWindowsTarget === undefined || createWindowsTarget === null) {
        throw new Error("Missing the required parameter 'createWindowsTarget' when calling createWindowsTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWindowsTargetOutput;
      return this.apiClient.callApi(
        '/create-windows-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateWindowsTarget} createWindowsTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateWindowsTargetOutput}
     */
    createWindowsTarget(createWindowsTarget) {
      return this.createWindowsTargetWithHttpInfo(createWindowsTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateZeroSSLTarget} createZeroSSLTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateZeroSSLTargetOutput} and HTTP response
     */
    createZeroSSLTargetWithHttpInfo(createZeroSSLTarget) {
      let postBody = createZeroSSLTarget;
      // verify the required parameter 'createZeroSSLTarget' is set
      if (createZeroSSLTarget === undefined || createZeroSSLTarget === null) {
        throw new Error("Missing the required parameter 'createZeroSSLTarget' when calling createZeroSSLTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateZeroSSLTargetOutput;
      return this.apiClient.callApi(
        '/create-zerossl-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateZeroSSLTarget} createZeroSSLTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateZeroSSLTargetOutput}
     */
    createZeroSSLTarget(createZeroSSLTarget) {
      return this.createZeroSSLTargetWithHttpInfo(createZeroSSLTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateLdapTarget} createLdapTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateLdapTargetOutput} and HTTP response
     */
    createldapTargetWithHttpInfo(createLdapTarget) {
      let postBody = createLdapTarget;
      // verify the required parameter 'createLdapTarget' is set
      if (createLdapTarget === undefined || createLdapTarget === null) {
        throw new Error("Missing the required parameter 'createLdapTarget' when calling createldapTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLdapTargetOutput;
      return this.apiClient.callApi(
        '/create-ldap-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateLdapTarget} createLdapTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateLdapTargetOutput}
     */
    createldapTarget(createLdapTarget) {
      return this.createldapTargetWithHttpInfo(createLdapTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeactivateAcmeAccount} deactivateAcmeAccount 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deactivateAcmeAccountWithHttpInfo(deactivateAcmeAccount) {
      let postBody = deactivateAcmeAccount;
      // verify the required parameter 'deactivateAcmeAccount' is set
      if (deactivateAcmeAccount === undefined || deactivateAcmeAccount === null) {
        throw new Error("Missing the required parameter 'deactivateAcmeAccount' when calling deactivateAcmeAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/deactivate-acme-account', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeactivateAcmeAccount} deactivateAcmeAccount 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deactivateAcmeAccount(deactivateAcmeAccount) {
      return this.deactivateAcmeAccountWithHttpInfo(deactivateAcmeAccount)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/Decrypt} decrypt 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DecryptOutput} and HTTP response
     */
    decryptWithHttpInfo(decrypt) {
      let postBody = decrypt;
      // verify the required parameter 'decrypt' is set
      if (decrypt === undefined || decrypt === null) {
        throw new Error("Missing the required parameter 'decrypt' when calling decrypt");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DecryptOutput;
      return this.apiClient.callApi(
        '/decrypt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/Decrypt} decrypt 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DecryptOutput}
     */
    decrypt(decrypt) {
      return this.decryptWithHttpInfo(decrypt)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Array.<module:model/BatchEncryptionRequestLine>} batchEncryptionRequestLine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DecryptOutput} and HTTP response
     */
    decryptBatchWithHttpInfo(batchEncryptionRequestLine) {
      let postBody = batchEncryptionRequestLine;
      // verify the required parameter 'batchEncryptionRequestLine' is set
      if (batchEncryptionRequestLine === undefined || batchEncryptionRequestLine === null) {
        throw new Error("Missing the required parameter 'batchEncryptionRequestLine' when calling decryptBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DecryptOutput;
      return this.apiClient.callApi(
        '/decrypt-batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Array.<module:model/BatchEncryptionRequestLine>} batchEncryptionRequestLine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DecryptOutput}
     */
    decryptBatch(batchEncryptionRequestLine) {
      return this.decryptBatchWithHttpInfo(batchEncryptionRequestLine)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DecryptGPG} decryptGPG 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DecryptGPGOutput} and HTTP response
     */
    decryptGPGWithHttpInfo(decryptGPG) {
      let postBody = decryptGPG;
      // verify the required parameter 'decryptGPG' is set
      if (decryptGPG === undefined || decryptGPG === null) {
        throw new Error("Missing the required parameter 'decryptGPG' when calling decryptGPG");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DecryptGPGOutput;
      return this.apiClient.callApi(
        '/decrypt-gpg', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DecryptGPG} decryptGPG 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DecryptGPGOutput}
     */
    decryptGPG(decryptGPG) {
      return this.decryptGPGWithHttpInfo(decryptGPG)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DecryptPKCS1} decryptPKCS1 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DecryptPKCS1Output} and HTTP response
     */
    decryptPKCS1WithHttpInfo(decryptPKCS1) {
      let postBody = decryptPKCS1;
      // verify the required parameter 'decryptPKCS1' is set
      if (decryptPKCS1 === undefined || decryptPKCS1 === null) {
        throw new Error("Missing the required parameter 'decryptPKCS1' when calling decryptPKCS1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DecryptPKCS1Output;
      return this.apiClient.callApi(
        '/decrypt-pkcs1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DecryptPKCS1} decryptPKCS1 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DecryptPKCS1Output}
     */
    decryptPKCS1(decryptPKCS1) {
      return this.decryptPKCS1WithHttpInfo(decryptPKCS1)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DecryptWithClassicKey} decryptWithClassicKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DecryptWithClassicKeyOutput} and HTTP response
     */
    decryptWithClassicKeyWithHttpInfo(decryptWithClassicKey) {
      let postBody = decryptWithClassicKey;
      // verify the required parameter 'decryptWithClassicKey' is set
      if (decryptWithClassicKey === undefined || decryptWithClassicKey === null) {
        throw new Error("Missing the required parameter 'decryptWithClassicKey' when calling decryptWithClassicKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DecryptWithClassicKeyOutput;
      return this.apiClient.callApi(
        '/decrypt-with-classic-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DecryptWithClassicKey} decryptWithClassicKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DecryptWithClassicKeyOutput}
     */
    decryptWithClassicKey(decryptWithClassicKey) {
      return this.decryptWithClassicKeyWithHttpInfo(decryptWithClassicKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteAuthMethod} deleteAuthMethod 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteAuthMethodOutput} and HTTP response
     */
    deleteAuthMethodWithHttpInfo(deleteAuthMethod) {
      let postBody = deleteAuthMethod;
      // verify the required parameter 'deleteAuthMethod' is set
      if (deleteAuthMethod === undefined || deleteAuthMethod === null) {
        throw new Error("Missing the required parameter 'deleteAuthMethod' when calling deleteAuthMethod");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAuthMethodOutput;
      return this.apiClient.callApi(
        '/delete-auth-method', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteAuthMethod} deleteAuthMethod 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteAuthMethodOutput}
     */
    deleteAuthMethod(deleteAuthMethod) {
      return this.deleteAuthMethodWithHttpInfo(deleteAuthMethod)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteAuthMethods} deleteAuthMethods 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteAuthMethodsOutput} and HTTP response
     */
    deleteAuthMethodsWithHttpInfo(deleteAuthMethods) {
      let postBody = deleteAuthMethods;
      // verify the required parameter 'deleteAuthMethods' is set
      if (deleteAuthMethods === undefined || deleteAuthMethods === null) {
        throw new Error("Missing the required parameter 'deleteAuthMethods' when calling deleteAuthMethods");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAuthMethodsOutput;
      return this.apiClient.callApi(
        '/delete-auth-methods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteAuthMethods} deleteAuthMethods 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteAuthMethodsOutput}
     */
    deleteAuthMethods(deleteAuthMethods) {
      return this.deleteAuthMethodsWithHttpInfo(deleteAuthMethods)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteEventForwarder} deleteEventForwarder 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteEventForwarderWithHttpInfo(deleteEventForwarder) {
      let postBody = deleteEventForwarder;
      // verify the required parameter 'deleteEventForwarder' is set
      if (deleteEventForwarder === undefined || deleteEventForwarder === null) {
        throw new Error("Missing the required parameter 'deleteEventForwarder' when calling deleteEventForwarder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-event-forwarder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteEventForwarder} deleteEventForwarder 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteEventForwarder(deleteEventForwarder) {
      return this.deleteEventForwarderWithHttpInfo(deleteEventForwarder)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteGatewayAllowedAccessId} deleteGatewayAllowedAccessId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteGatewayAllowedAccessIdWithHttpInfo(deleteGatewayAllowedAccessId) {
      let postBody = deleteGatewayAllowedAccessId;
      // verify the required parameter 'deleteGatewayAllowedAccessId' is set
      if (deleteGatewayAllowedAccessId === undefined || deleteGatewayAllowedAccessId === null) {
        throw new Error("Missing the required parameter 'deleteGatewayAllowedAccessId' when calling deleteGatewayAllowedAccessId");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/gateway-delete-allowed-management-access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteGatewayAllowedAccessId} deleteGatewayAllowedAccessId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteGatewayAllowedAccessId(deleteGatewayAllowedAccessId) {
      return this.deleteGatewayAllowedAccessIdWithHttpInfo(deleteGatewayAllowedAccessId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteGroup} deleteGroup 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteGroupOutput} and HTTP response
     */
    deleteGroupWithHttpInfo(deleteGroup) {
      let postBody = deleteGroup;
      // verify the required parameter 'deleteGroup' is set
      if (deleteGroup === undefined || deleteGroup === null) {
        throw new Error("Missing the required parameter 'deleteGroup' when calling deleteGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteGroupOutput;
      return this.apiClient.callApi(
        '/delete-group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteGroup} deleteGroup 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteGroupOutput}
     */
    deleteGroup(deleteGroup) {
      return this.deleteGroupWithHttpInfo(deleteGroup)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteGwCluster} deleteGwCluster 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteGwClusterWithHttpInfo(deleteGwCluster) {
      let postBody = deleteGwCluster;
      // verify the required parameter 'deleteGwCluster' is set
      if (deleteGwCluster === undefined || deleteGwCluster === null) {
        throw new Error("Missing the required parameter 'deleteGwCluster' when calling deleteGwCluster");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-gateway-cluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteGwCluster} deleteGwCluster 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteGwCluster(deleteGwCluster) {
      return this.deleteGwClusterWithHttpInfo(deleteGwCluster)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteItem} deleteItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteItemOutput} and HTTP response
     */
    deleteItemWithHttpInfo(deleteItem) {
      let postBody = deleteItem;
      // verify the required parameter 'deleteItem' is set
      if (deleteItem === undefined || deleteItem === null) {
        throw new Error("Missing the required parameter 'deleteItem' when calling deleteItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteItemOutput;
      return this.apiClient.callApi(
        '/delete-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteItem} deleteItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteItemOutput}
     */
    deleteItem(deleteItem) {
      return this.deleteItemWithHttpInfo(deleteItem)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteItems} deleteItems 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteItemsOutput} and HTTP response
     */
    deleteItemsWithHttpInfo(deleteItems) {
      let postBody = deleteItems;
      // verify the required parameter 'deleteItems' is set
      if (deleteItems === undefined || deleteItems === null) {
        throw new Error("Missing the required parameter 'deleteItems' when calling deleteItems");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteItemsOutput;
      return this.apiClient.callApi(
        '/delete-items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteItems} deleteItems 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteItemsOutput}
     */
    deleteItems(deleteItems) {
      return this.deleteItemsWithHttpInfo(deleteItems)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteRole} deleteRole 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteRoleWithHttpInfo(deleteRole) {
      let postBody = deleteRole;
      // verify the required parameter 'deleteRole' is set
      if (deleteRole === undefined || deleteRole === null) {
        throw new Error("Missing the required parameter 'deleteRole' when calling deleteRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteRole} deleteRole 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteRole(deleteRole) {
      return this.deleteRoleWithHttpInfo(deleteRole)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteRoleAssociation} deleteRoleAssociation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteRoleAssociationWithHttpInfo(deleteRoleAssociation) {
      let postBody = deleteRoleAssociation;
      // verify the required parameter 'deleteRoleAssociation' is set
      if (deleteRoleAssociation === undefined || deleteRoleAssociation === null) {
        throw new Error("Missing the required parameter 'deleteRoleAssociation' when calling deleteRoleAssociation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-assoc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteRoleAssociation} deleteRoleAssociation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteRoleAssociation(deleteRoleAssociation) {
      return this.deleteRoleAssociationWithHttpInfo(deleteRoleAssociation)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteRoleRule} deleteRoleRule 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteRoleRuleOutput} and HTTP response
     */
    deleteRoleRuleWithHttpInfo(deleteRoleRule) {
      let postBody = deleteRoleRule;
      // verify the required parameter 'deleteRoleRule' is set
      if (deleteRoleRule === undefined || deleteRoleRule === null) {
        throw new Error("Missing the required parameter 'deleteRoleRule' when calling deleteRoleRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteRoleRuleOutput;
      return this.apiClient.callApi(
        '/delete-role-rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteRoleRule} deleteRoleRule 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteRoleRuleOutput}
     */
    deleteRoleRule(deleteRoleRule) {
      return this.deleteRoleRuleWithHttpInfo(deleteRoleRule)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteRoles} deleteRoles 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteRolesWithHttpInfo(deleteRoles) {
      let postBody = deleteRoles;
      // verify the required parameter 'deleteRoles' is set
      if (deleteRoles === undefined || deleteRoles === null) {
        throw new Error("Missing the required parameter 'deleteRoles' when calling deleteRoles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteRoles} deleteRoles 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteRoles(deleteRoles) {
      return this.deleteRolesWithHttpInfo(deleteRoles)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteTarget} deleteTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteTargetWithHttpInfo(deleteTarget) {
      let postBody = deleteTarget;
      // verify the required parameter 'deleteTarget' is set
      if (deleteTarget === undefined || deleteTarget === null) {
        throw new Error("Missing the required parameter 'deleteTarget' when calling deleteTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteTarget} deleteTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteTarget(deleteTarget) {
      return this.deleteTargetWithHttpInfo(deleteTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteTargetAssociation} deleteTargetAssociation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteTargetAssociationWithHttpInfo(deleteTargetAssociation) {
      let postBody = deleteTargetAssociation;
      // verify the required parameter 'deleteTargetAssociation' is set
      if (deleteTargetAssociation === undefined || deleteTargetAssociation === null) {
        throw new Error("Missing the required parameter 'deleteTargetAssociation' when calling deleteTargetAssociation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-assoc-target-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteTargetAssociation} deleteTargetAssociation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteTargetAssociation(deleteTargetAssociation) {
      return this.deleteTargetAssociationWithHttpInfo(deleteTargetAssociation)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteTargets} deleteTargets 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteTargetsWithHttpInfo(deleteTargets) {
      let postBody = deleteTargets;
      // verify the required parameter 'deleteTargets' is set
      if (deleteTargets === undefined || deleteTargets === null) {
        throw new Error("Missing the required parameter 'deleteTargets' when calling deleteTargets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-targets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteTargets} deleteTargets 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteTargets(deleteTargets) {
      return this.deleteTargetsWithHttpInfo(deleteTargets)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeriveKey} deriveKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeriveKeyOutput} and HTTP response
     */
    deriveKeyWithHttpInfo(deriveKey) {
      let postBody = deriveKey;
      // verify the required parameter 'deriveKey' is set
      if (deriveKey === undefined || deriveKey === null) {
        throw new Error("Missing the required parameter 'deriveKey' when calling deriveKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeriveKeyOutput;
      return this.apiClient.callApi(
        '/derive-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeriveKey} deriveKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeriveKeyOutput}
     */
    deriveKey(deriveKey) {
      return this.deriveKeyWithHttpInfo(deriveKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DescribeAssoc} describeAssoc 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RoleAssociationDetails} and HTTP response
     */
    describeAssocWithHttpInfo(describeAssoc) {
      let postBody = describeAssoc;
      // verify the required parameter 'describeAssoc' is set
      if (describeAssoc === undefined || describeAssoc === null) {
        throw new Error("Missing the required parameter 'describeAssoc' when calling describeAssoc");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RoleAssociationDetails;
      return this.apiClient.callApi(
        '/describe-role-am-assoc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DescribeAssoc} describeAssoc 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RoleAssociationDetails}
     */
    describeAssoc(describeAssoc) {
      return this.describeAssocWithHttpInfo(describeAssoc)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DescribeItem} describeItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Item} and HTTP response
     */
    describeItemWithHttpInfo(describeItem) {
      let postBody = describeItem;
      // verify the required parameter 'describeItem' is set
      if (describeItem === undefined || describeItem === null) {
        throw new Error("Missing the required parameter 'describeItem' when calling describeItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Item;
      return this.apiClient.callApi(
        '/describe-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DescribeItem} describeItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Item}
     */
    describeItem(describeItem) {
      return this.describeItemWithHttpInfo(describeItem)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DescribePermissions} describePermissions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DescribePermissionsOutput} and HTTP response
     */
    describePermissionsWithHttpInfo(describePermissions) {
      let postBody = describePermissions;
      // verify the required parameter 'describePermissions' is set
      if (describePermissions === undefined || describePermissions === null) {
        throw new Error("Missing the required parameter 'describePermissions' when calling describePermissions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribePermissionsOutput;
      return this.apiClient.callApi(
        '/describe-permissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DescribePermissions} describePermissions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DescribePermissionsOutput}
     */
    describePermissions(describePermissions) {
      return this.describePermissionsWithHttpInfo(describePermissions)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DescribeSubClaims} describeSubClaims 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DescribeSubClaimsOutput} and HTTP response
     */
    describeSubClaimsWithHttpInfo(describeSubClaims) {
      let postBody = describeSubClaims;
      // verify the required parameter 'describeSubClaims' is set
      if (describeSubClaims === undefined || describeSubClaims === null) {
        throw new Error("Missing the required parameter 'describeSubClaims' when calling describeSubClaims");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeSubClaimsOutput;
      return this.apiClient.callApi(
        '/describe-sub-claims', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DescribeSubClaims} describeSubClaims 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DescribeSubClaimsOutput}
     */
    describeSubClaims(describeSubClaims) {
      return this.describeSubClaimsWithHttpInfo(describeSubClaims)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/Detokenize} detokenize 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DetokenizeOutput} and HTTP response
     */
    detokenizeWithHttpInfo(detokenize) {
      let postBody = detokenize;
      // verify the required parameter 'detokenize' is set
      if (detokenize === undefined || detokenize === null) {
        throw new Error("Missing the required parameter 'detokenize' when calling detokenize");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DetokenizeOutput;
      return this.apiClient.callApi(
        '/detokenize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/Detokenize} detokenize 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DetokenizeOutput}
     */
    detokenize(detokenize) {
      return this.detokenizeWithHttpInfo(detokenize)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Array.<module:model/BatchTokenizationRequestLine>} batchTokenizationRequestLine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DetokenizeOutput} and HTTP response
     */
    detokenizeBatchWithHttpInfo(batchTokenizationRequestLine) {
      let postBody = batchTokenizationRequestLine;
      // verify the required parameter 'batchTokenizationRequestLine' is set
      if (batchTokenizationRequestLine === undefined || batchTokenizationRequestLine === null) {
        throw new Error("Missing the required parameter 'batchTokenizationRequestLine' when calling detokenizeBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DetokenizeOutput;
      return this.apiClient.callApi(
        '/detokenize-batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Array.<module:model/BatchTokenizationRequestLine>} batchTokenizationRequestLine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DetokenizeOutput}
     */
    detokenizeBatch(batchTokenizationRequestLine) {
      return this.detokenizeBatchWithHttpInfo(batchTokenizationRequestLine)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateArtifactory} dynamicSecretCreateArtifactory 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateArtifactoryWithHttpInfo(dynamicSecretCreateArtifactory) {
      let postBody = dynamicSecretCreateArtifactory;
      // verify the required parameter 'dynamicSecretCreateArtifactory' is set
      if (dynamicSecretCreateArtifactory === undefined || dynamicSecretCreateArtifactory === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateArtifactory' when calling dynamicSecretCreateArtifactory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-artifactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateArtifactory} dynamicSecretCreateArtifactory 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateArtifactory(dynamicSecretCreateArtifactory) {
      return this.dynamicSecretCreateArtifactoryWithHttpInfo(dynamicSecretCreateArtifactory)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateAws} dynamicSecretCreateAws 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateAwsWithHttpInfo(dynamicSecretCreateAws) {
      let postBody = dynamicSecretCreateAws;
      // verify the required parameter 'dynamicSecretCreateAws' is set
      if (dynamicSecretCreateAws === undefined || dynamicSecretCreateAws === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateAws' when calling dynamicSecretCreateAws");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-aws', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateAws} dynamicSecretCreateAws 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateAws(dynamicSecretCreateAws) {
      return this.dynamicSecretCreateAwsWithHttpInfo(dynamicSecretCreateAws)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateAzure} dynamicSecretCreateAzure 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateAzureWithHttpInfo(dynamicSecretCreateAzure) {
      let postBody = dynamicSecretCreateAzure;
      // verify the required parameter 'dynamicSecretCreateAzure' is set
      if (dynamicSecretCreateAzure === undefined || dynamicSecretCreateAzure === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateAzure' when calling dynamicSecretCreateAzure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-azure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateAzure} dynamicSecretCreateAzure 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateAzure(dynamicSecretCreateAzure) {
      return this.dynamicSecretCreateAzureWithHttpInfo(dynamicSecretCreateAzure)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateCassandra} dynamicSecretCreateCassandra 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateCassandraWithHttpInfo(dynamicSecretCreateCassandra) {
      let postBody = dynamicSecretCreateCassandra;
      // verify the required parameter 'dynamicSecretCreateCassandra' is set
      if (dynamicSecretCreateCassandra === undefined || dynamicSecretCreateCassandra === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateCassandra' when calling dynamicSecretCreateCassandra");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-cassandra', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateCassandra} dynamicSecretCreateCassandra 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateCassandra(dynamicSecretCreateCassandra) {
      return this.dynamicSecretCreateCassandraWithHttpInfo(dynamicSecretCreateCassandra)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DynamicSecretCreateCustom} [dynamicSecretCreateCustom] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateCustomWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['dynamicSecretCreateCustom'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-custom', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DynamicSecretCreateCustom} opts.dynamicSecretCreateCustom 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateCustom(opts) {
      return this.dynamicSecretCreateCustomWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateDockerhub} dynamicSecretCreateDockerhub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateDockerhubWithHttpInfo(dynamicSecretCreateDockerhub) {
      let postBody = dynamicSecretCreateDockerhub;
      // verify the required parameter 'dynamicSecretCreateDockerhub' is set
      if (dynamicSecretCreateDockerhub === undefined || dynamicSecretCreateDockerhub === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateDockerhub' when calling dynamicSecretCreateDockerhub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-dockerhub', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateDockerhub} dynamicSecretCreateDockerhub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateDockerhub(dynamicSecretCreateDockerhub) {
      return this.dynamicSecretCreateDockerhubWithHttpInfo(dynamicSecretCreateDockerhub)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateEks} dynamicSecretCreateEks 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateEksWithHttpInfo(dynamicSecretCreateEks) {
      let postBody = dynamicSecretCreateEks;
      // verify the required parameter 'dynamicSecretCreateEks' is set
      if (dynamicSecretCreateEks === undefined || dynamicSecretCreateEks === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateEks' when calling dynamicSecretCreateEks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-eks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateEks} dynamicSecretCreateEks 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateEks(dynamicSecretCreateEks) {
      return this.dynamicSecretCreateEksWithHttpInfo(dynamicSecretCreateEks)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateGcp} dynamicSecretCreateGcp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateGcpWithHttpInfo(dynamicSecretCreateGcp) {
      let postBody = dynamicSecretCreateGcp;
      // verify the required parameter 'dynamicSecretCreateGcp' is set
      if (dynamicSecretCreateGcp === undefined || dynamicSecretCreateGcp === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateGcp' when calling dynamicSecretCreateGcp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-gcp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateGcp} dynamicSecretCreateGcp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateGcp(dynamicSecretCreateGcp) {
      return this.dynamicSecretCreateGcpWithHttpInfo(dynamicSecretCreateGcp)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateGithub} dynamicSecretCreateGithub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateGithubWithHttpInfo(dynamicSecretCreateGithub) {
      let postBody = dynamicSecretCreateGithub;
      // verify the required parameter 'dynamicSecretCreateGithub' is set
      if (dynamicSecretCreateGithub === undefined || dynamicSecretCreateGithub === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateGithub' when calling dynamicSecretCreateGithub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-github', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateGithub} dynamicSecretCreateGithub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateGithub(dynamicSecretCreateGithub) {
      return this.dynamicSecretCreateGithubWithHttpInfo(dynamicSecretCreateGithub)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateGitlab} dynamicSecretCreateGitlab 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateGitlabWithHttpInfo(dynamicSecretCreateGitlab) {
      let postBody = dynamicSecretCreateGitlab;
      // verify the required parameter 'dynamicSecretCreateGitlab' is set
      if (dynamicSecretCreateGitlab === undefined || dynamicSecretCreateGitlab === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateGitlab' when calling dynamicSecretCreateGitlab");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-gitlab', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateGitlab} dynamicSecretCreateGitlab 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateGitlab(dynamicSecretCreateGitlab) {
      return this.dynamicSecretCreateGitlabWithHttpInfo(dynamicSecretCreateGitlab)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateGke} dynamicSecretCreateGke 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateGkeWithHttpInfo(dynamicSecretCreateGke) {
      let postBody = dynamicSecretCreateGke;
      // verify the required parameter 'dynamicSecretCreateGke' is set
      if (dynamicSecretCreateGke === undefined || dynamicSecretCreateGke === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateGke' when calling dynamicSecretCreateGke");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-gke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateGke} dynamicSecretCreateGke 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateGke(dynamicSecretCreateGke) {
      return this.dynamicSecretCreateGkeWithHttpInfo(dynamicSecretCreateGke)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateGoogleWorkspace} dynamicSecretCreateGoogleWorkspace 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateGoogleWorkspaceWithHttpInfo(dynamicSecretCreateGoogleWorkspace) {
      let postBody = dynamicSecretCreateGoogleWorkspace;
      // verify the required parameter 'dynamicSecretCreateGoogleWorkspace' is set
      if (dynamicSecretCreateGoogleWorkspace === undefined || dynamicSecretCreateGoogleWorkspace === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateGoogleWorkspace' when calling dynamicSecretCreateGoogleWorkspace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-google-workspace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateGoogleWorkspace} dynamicSecretCreateGoogleWorkspace 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateGoogleWorkspace(dynamicSecretCreateGoogleWorkspace) {
      return this.dynamicSecretCreateGoogleWorkspaceWithHttpInfo(dynamicSecretCreateGoogleWorkspace)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateHanaDb} dynamicSecretCreateHanaDb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateHanaDbWithHttpInfo(dynamicSecretCreateHanaDb) {
      let postBody = dynamicSecretCreateHanaDb;
      // verify the required parameter 'dynamicSecretCreateHanaDb' is set
      if (dynamicSecretCreateHanaDb === undefined || dynamicSecretCreateHanaDb === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateHanaDb' when calling dynamicSecretCreateHanaDb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-hanadb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateHanaDb} dynamicSecretCreateHanaDb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateHanaDb(dynamicSecretCreateHanaDb) {
      return this.dynamicSecretCreateHanaDbWithHttpInfo(dynamicSecretCreateHanaDb)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateK8s} dynamicSecretCreateK8s 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateK8sWithHttpInfo(dynamicSecretCreateK8s) {
      let postBody = dynamicSecretCreateK8s;
      // verify the required parameter 'dynamicSecretCreateK8s' is set
      if (dynamicSecretCreateK8s === undefined || dynamicSecretCreateK8s === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateK8s' when calling dynamicSecretCreateK8s");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-k8s', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateK8s} dynamicSecretCreateK8s 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateK8s(dynamicSecretCreateK8s) {
      return this.dynamicSecretCreateK8sWithHttpInfo(dynamicSecretCreateK8s)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateLdap} dynamicSecretCreateLdap 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateLdapWithHttpInfo(dynamicSecretCreateLdap) {
      let postBody = dynamicSecretCreateLdap;
      // verify the required parameter 'dynamicSecretCreateLdap' is set
      if (dynamicSecretCreateLdap === undefined || dynamicSecretCreateLdap === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateLdap' when calling dynamicSecretCreateLdap");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-ldap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateLdap} dynamicSecretCreateLdap 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateLdap(dynamicSecretCreateLdap) {
      return this.dynamicSecretCreateLdapWithHttpInfo(dynamicSecretCreateLdap)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateMongoDb} dynamicSecretCreateMongoDb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateMongoDbWithHttpInfo(dynamicSecretCreateMongoDb) {
      let postBody = dynamicSecretCreateMongoDb;
      // verify the required parameter 'dynamicSecretCreateMongoDb' is set
      if (dynamicSecretCreateMongoDb === undefined || dynamicSecretCreateMongoDb === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateMongoDb' when calling dynamicSecretCreateMongoDb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-mongodb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateMongoDb} dynamicSecretCreateMongoDb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateMongoDb(dynamicSecretCreateMongoDb) {
      return this.dynamicSecretCreateMongoDbWithHttpInfo(dynamicSecretCreateMongoDb)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateMsSql} dynamicSecretCreateMsSql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateMsSqlWithHttpInfo(dynamicSecretCreateMsSql) {
      let postBody = dynamicSecretCreateMsSql;
      // verify the required parameter 'dynamicSecretCreateMsSql' is set
      if (dynamicSecretCreateMsSql === undefined || dynamicSecretCreateMsSql === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateMsSql' when calling dynamicSecretCreateMsSql");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-mssql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateMsSql} dynamicSecretCreateMsSql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateMsSql(dynamicSecretCreateMsSql) {
      return this.dynamicSecretCreateMsSqlWithHttpInfo(dynamicSecretCreateMsSql)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateMySql} dynamicSecretCreateMySql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateMySqlWithHttpInfo(dynamicSecretCreateMySql) {
      let postBody = dynamicSecretCreateMySql;
      // verify the required parameter 'dynamicSecretCreateMySql' is set
      if (dynamicSecretCreateMySql === undefined || dynamicSecretCreateMySql === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateMySql' when calling dynamicSecretCreateMySql");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-mysql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateMySql} dynamicSecretCreateMySql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateMySql(dynamicSecretCreateMySql) {
      return this.dynamicSecretCreateMySqlWithHttpInfo(dynamicSecretCreateMySql)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateOracleDb} dynamicSecretCreateOracleDb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateOracleDbWithHttpInfo(dynamicSecretCreateOracleDb) {
      let postBody = dynamicSecretCreateOracleDb;
      // verify the required parameter 'dynamicSecretCreateOracleDb' is set
      if (dynamicSecretCreateOracleDb === undefined || dynamicSecretCreateOracleDb === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateOracleDb' when calling dynamicSecretCreateOracleDb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-oracle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateOracleDb} dynamicSecretCreateOracleDb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateOracleDb(dynamicSecretCreateOracleDb) {
      return this.dynamicSecretCreateOracleDbWithHttpInfo(dynamicSecretCreateOracleDb)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreatePing} dynamicSecretCreatePing 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreatePingWithHttpInfo(dynamicSecretCreatePing) {
      let postBody = dynamicSecretCreatePing;
      // verify the required parameter 'dynamicSecretCreatePing' is set
      if (dynamicSecretCreatePing === undefined || dynamicSecretCreatePing === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreatePing' when calling dynamicSecretCreatePing");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-ping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreatePing} dynamicSecretCreatePing 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreatePing(dynamicSecretCreatePing) {
      return this.dynamicSecretCreatePingWithHttpInfo(dynamicSecretCreatePing)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreatePostgreSql} dynamicSecretCreatePostgreSql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreatePostgreSqlWithHttpInfo(dynamicSecretCreatePostgreSql) {
      let postBody = dynamicSecretCreatePostgreSql;
      // verify the required parameter 'dynamicSecretCreatePostgreSql' is set
      if (dynamicSecretCreatePostgreSql === undefined || dynamicSecretCreatePostgreSql === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreatePostgreSql' when calling dynamicSecretCreatePostgreSql");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-postgresql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreatePostgreSql} dynamicSecretCreatePostgreSql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreatePostgreSql(dynamicSecretCreatePostgreSql) {
      return this.dynamicSecretCreatePostgreSqlWithHttpInfo(dynamicSecretCreatePostgreSql)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateRabbitMq} dynamicSecretCreateRabbitMq 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateRabbitMqWithHttpInfo(dynamicSecretCreateRabbitMq) {
      let postBody = dynamicSecretCreateRabbitMq;
      // verify the required parameter 'dynamicSecretCreateRabbitMq' is set
      if (dynamicSecretCreateRabbitMq === undefined || dynamicSecretCreateRabbitMq === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateRabbitMq' when calling dynamicSecretCreateRabbitMq");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-rabbitmq', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateRabbitMq} dynamicSecretCreateRabbitMq 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateRabbitMq(dynamicSecretCreateRabbitMq) {
      return this.dynamicSecretCreateRabbitMqWithHttpInfo(dynamicSecretCreateRabbitMq)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateRdp} dynamicSecretCreateRdp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateRdpWithHttpInfo(dynamicSecretCreateRdp) {
      let postBody = dynamicSecretCreateRdp;
      // verify the required parameter 'dynamicSecretCreateRdp' is set
      if (dynamicSecretCreateRdp === undefined || dynamicSecretCreateRdp === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateRdp' when calling dynamicSecretCreateRdp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-rdp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateRdp} dynamicSecretCreateRdp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateRdp(dynamicSecretCreateRdp) {
      return this.dynamicSecretCreateRdpWithHttpInfo(dynamicSecretCreateRdp)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateRedis} dynamicSecretCreateRedis 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateRedisWithHttpInfo(dynamicSecretCreateRedis) {
      let postBody = dynamicSecretCreateRedis;
      // verify the required parameter 'dynamicSecretCreateRedis' is set
      if (dynamicSecretCreateRedis === undefined || dynamicSecretCreateRedis === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateRedis' when calling dynamicSecretCreateRedis");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-redis', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateRedis} dynamicSecretCreateRedis 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateRedis(dynamicSecretCreateRedis) {
      return this.dynamicSecretCreateRedisWithHttpInfo(dynamicSecretCreateRedis)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateRedshift} dynamicSecretCreateRedshift 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateRedshiftWithHttpInfo(dynamicSecretCreateRedshift) {
      let postBody = dynamicSecretCreateRedshift;
      // verify the required parameter 'dynamicSecretCreateRedshift' is set
      if (dynamicSecretCreateRedshift === undefined || dynamicSecretCreateRedshift === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateRedshift' when calling dynamicSecretCreateRedshift");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-redshift', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateRedshift} dynamicSecretCreateRedshift 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateRedshift(dynamicSecretCreateRedshift) {
      return this.dynamicSecretCreateRedshiftWithHttpInfo(dynamicSecretCreateRedshift)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateSnowflake} dynamicSecretCreateSnowflake 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateSnowflakeWithHttpInfo(dynamicSecretCreateSnowflake) {
      let postBody = dynamicSecretCreateSnowflake;
      // verify the required parameter 'dynamicSecretCreateSnowflake' is set
      if (dynamicSecretCreateSnowflake === undefined || dynamicSecretCreateSnowflake === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateSnowflake' when calling dynamicSecretCreateSnowflake");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-snowflake', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateSnowflake} dynamicSecretCreateSnowflake 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateSnowflake(dynamicSecretCreateSnowflake) {
      return this.dynamicSecretCreateSnowflakeWithHttpInfo(dynamicSecretCreateSnowflake)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretCreateVenafi} dynamicSecretCreateVenafi 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretCreateOutput} and HTTP response
     */
    dynamicSecretCreateVenafiWithHttpInfo(dynamicSecretCreateVenafi) {
      let postBody = dynamicSecretCreateVenafi;
      // verify the required parameter 'dynamicSecretCreateVenafi' is set
      if (dynamicSecretCreateVenafi === undefined || dynamicSecretCreateVenafi === null) {
        throw new Error("Missing the required parameter 'dynamicSecretCreateVenafi' when calling dynamicSecretCreateVenafi");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretCreateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-create-venafi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretCreateVenafi} dynamicSecretCreateVenafi 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretCreateOutput}
     */
    dynamicSecretCreateVenafi(dynamicSecretCreateVenafi) {
      return this.dynamicSecretCreateVenafiWithHttpInfo(dynamicSecretCreateVenafi)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretDelete} dynamicSecretDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretDeleteOutput} and HTTP response
     */
    dynamicSecretDeleteWithHttpInfo(dynamicSecretDelete) {
      let postBody = dynamicSecretDelete;
      // verify the required parameter 'dynamicSecretDelete' is set
      if (dynamicSecretDelete === undefined || dynamicSecretDelete === null) {
        throw new Error("Missing the required parameter 'dynamicSecretDelete' when calling dynamicSecretDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretDeleteOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretDelete} dynamicSecretDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretDeleteOutput}
     */
    dynamicSecretDelete(dynamicSecretDelete) {
      return this.dynamicSecretDeleteWithHttpInfo(dynamicSecretDelete)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretGet} dynamicSecretGet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DSProducerDetails} and HTTP response
     */
    dynamicSecretGetWithHttpInfo(dynamicSecretGet) {
      let postBody = dynamicSecretGet;
      // verify the required parameter 'dynamicSecretGet' is set
      if (dynamicSecretGet === undefined || dynamicSecretGet === null) {
        throw new Error("Missing the required parameter 'dynamicSecretGet' when calling dynamicSecretGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DSProducerDetails;
      return this.apiClient.callApi(
        '/dynamic-secret-get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretGet} dynamicSecretGet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DSProducerDetails}
     */
    dynamicSecretGet(dynamicSecretGet) {
      return this.dynamicSecretGetWithHttpInfo(dynamicSecretGet)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretGetValue} dynamicSecretGetValue 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    dynamicSecretGetValueWithHttpInfo(dynamicSecretGetValue) {
      let postBody = dynamicSecretGetValue;
      // verify the required parameter 'dynamicSecretGetValue' is set
      if (dynamicSecretGetValue === undefined || dynamicSecretGetValue === null) {
        throw new Error("Missing the required parameter 'dynamicSecretGetValue' when calling dynamicSecretGetValue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/dynamic-secret-get-value', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretGetValue} dynamicSecretGetValue 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    dynamicSecretGetValue(dynamicSecretGetValue) {
      return this.dynamicSecretGetValueWithHttpInfo(dynamicSecretGetValue)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretList} dynamicSecretList 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProducersListReplyObj} and HTTP response
     */
    dynamicSecretListWithHttpInfo(dynamicSecretList) {
      let postBody = dynamicSecretList;
      // verify the required parameter 'dynamicSecretList' is set
      if (dynamicSecretList === undefined || dynamicSecretList === null) {
        throw new Error("Missing the required parameter 'dynamicSecretList' when calling dynamicSecretList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetProducersListReplyObj;
      return this.apiClient.callApi(
        '/dynamic-secret-list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretList} dynamicSecretList 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProducersListReplyObj}
     */
    dynamicSecretList(dynamicSecretList) {
      return this.dynamicSecretListWithHttpInfo(dynamicSecretList)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretTmpCredsDelete} dynamicSecretTmpCredsDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    dynamicSecretTmpCredsDeleteWithHttpInfo(dynamicSecretTmpCredsDelete) {
      let postBody = dynamicSecretTmpCredsDelete;
      // verify the required parameter 'dynamicSecretTmpCredsDelete' is set
      if (dynamicSecretTmpCredsDelete === undefined || dynamicSecretTmpCredsDelete === null) {
        throw new Error("Missing the required parameter 'dynamicSecretTmpCredsDelete' when calling dynamicSecretTmpCredsDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dynamic-secret-tmp-creds-delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretTmpCredsDelete} dynamicSecretTmpCredsDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    dynamicSecretTmpCredsDelete(dynamicSecretTmpCredsDelete) {
      return this.dynamicSecretTmpCredsDeleteWithHttpInfo(dynamicSecretTmpCredsDelete)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretTmpCredsGet} dynamicSecretTmpCredsGet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TmpUserData>} and HTTP response
     */
    dynamicSecretTmpCredsGetWithHttpInfo(dynamicSecretTmpCredsGet) {
      let postBody = dynamicSecretTmpCredsGet;
      // verify the required parameter 'dynamicSecretTmpCredsGet' is set
      if (dynamicSecretTmpCredsGet === undefined || dynamicSecretTmpCredsGet === null) {
        throw new Error("Missing the required parameter 'dynamicSecretTmpCredsGet' when calling dynamicSecretTmpCredsGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TmpUserData];
      return this.apiClient.callApi(
        '/dynamic-secret-tmp-creds-Get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretTmpCredsGet} dynamicSecretTmpCredsGet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TmpUserData>}
     */
    dynamicSecretTmpCredsGet(dynamicSecretTmpCredsGet) {
      return this.dynamicSecretTmpCredsGetWithHttpInfo(dynamicSecretTmpCredsGet)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretTmpCredsUpdate} dynamicSecretTmpCredsUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    dynamicSecretTmpCredsUpdateWithHttpInfo(dynamicSecretTmpCredsUpdate) {
      let postBody = dynamicSecretTmpCredsUpdate;
      // verify the required parameter 'dynamicSecretTmpCredsUpdate' is set
      if (dynamicSecretTmpCredsUpdate === undefined || dynamicSecretTmpCredsUpdate === null) {
        throw new Error("Missing the required parameter 'dynamicSecretTmpCredsUpdate' when calling dynamicSecretTmpCredsUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dynamic-secret-tmp-creds-update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretTmpCredsUpdate} dynamicSecretTmpCredsUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    dynamicSecretTmpCredsUpdate(dynamicSecretTmpCredsUpdate) {
      return this.dynamicSecretTmpCredsUpdateWithHttpInfo(dynamicSecretTmpCredsUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateArtifactory} dynamicSecretUpdateArtifactory 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateArtifactoryWithHttpInfo(dynamicSecretUpdateArtifactory) {
      let postBody = dynamicSecretUpdateArtifactory;
      // verify the required parameter 'dynamicSecretUpdateArtifactory' is set
      if (dynamicSecretUpdateArtifactory === undefined || dynamicSecretUpdateArtifactory === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateArtifactory' when calling dynamicSecretUpdateArtifactory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-artifactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateArtifactory} dynamicSecretUpdateArtifactory 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateArtifactory(dynamicSecretUpdateArtifactory) {
      return this.dynamicSecretUpdateArtifactoryWithHttpInfo(dynamicSecretUpdateArtifactory)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateAws} dynamicSecretUpdateAws 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateAwsWithHttpInfo(dynamicSecretUpdateAws) {
      let postBody = dynamicSecretUpdateAws;
      // verify the required parameter 'dynamicSecretUpdateAws' is set
      if (dynamicSecretUpdateAws === undefined || dynamicSecretUpdateAws === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateAws' when calling dynamicSecretUpdateAws");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-aws', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateAws} dynamicSecretUpdateAws 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateAws(dynamicSecretUpdateAws) {
      return this.dynamicSecretUpdateAwsWithHttpInfo(dynamicSecretUpdateAws)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateAzure} dynamicSecretUpdateAzure 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateAzureWithHttpInfo(dynamicSecretUpdateAzure) {
      let postBody = dynamicSecretUpdateAzure;
      // verify the required parameter 'dynamicSecretUpdateAzure' is set
      if (dynamicSecretUpdateAzure === undefined || dynamicSecretUpdateAzure === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateAzure' when calling dynamicSecretUpdateAzure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-azure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateAzure} dynamicSecretUpdateAzure 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateAzure(dynamicSecretUpdateAzure) {
      return this.dynamicSecretUpdateAzureWithHttpInfo(dynamicSecretUpdateAzure)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateCassandra} dynamicSecretUpdateCassandra 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateCassandraWithHttpInfo(dynamicSecretUpdateCassandra) {
      let postBody = dynamicSecretUpdateCassandra;
      // verify the required parameter 'dynamicSecretUpdateCassandra' is set
      if (dynamicSecretUpdateCassandra === undefined || dynamicSecretUpdateCassandra === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateCassandra' when calling dynamicSecretUpdateCassandra");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-cassandra', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateCassandra} dynamicSecretUpdateCassandra 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateCassandra(dynamicSecretUpdateCassandra) {
      return this.dynamicSecretUpdateCassandraWithHttpInfo(dynamicSecretUpdateCassandra)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DynamicSecretUpdateCustom} [dynamicSecretUpdateCustom] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateCustomWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['dynamicSecretUpdateCustom'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-custom', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DynamicSecretUpdateCustom} opts.dynamicSecretUpdateCustom 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateCustom(opts) {
      return this.dynamicSecretUpdateCustomWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateDockerhub} dynamicSecretUpdateDockerhub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateDockerhubWithHttpInfo(dynamicSecretUpdateDockerhub) {
      let postBody = dynamicSecretUpdateDockerhub;
      // verify the required parameter 'dynamicSecretUpdateDockerhub' is set
      if (dynamicSecretUpdateDockerhub === undefined || dynamicSecretUpdateDockerhub === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateDockerhub' when calling dynamicSecretUpdateDockerhub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-dockerhub', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateDockerhub} dynamicSecretUpdateDockerhub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateDockerhub(dynamicSecretUpdateDockerhub) {
      return this.dynamicSecretUpdateDockerhubWithHttpInfo(dynamicSecretUpdateDockerhub)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateEks} dynamicSecretUpdateEks 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateEksWithHttpInfo(dynamicSecretUpdateEks) {
      let postBody = dynamicSecretUpdateEks;
      // verify the required parameter 'dynamicSecretUpdateEks' is set
      if (dynamicSecretUpdateEks === undefined || dynamicSecretUpdateEks === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateEks' when calling dynamicSecretUpdateEks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-eks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateEks} dynamicSecretUpdateEks 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateEks(dynamicSecretUpdateEks) {
      return this.dynamicSecretUpdateEksWithHttpInfo(dynamicSecretUpdateEks)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateGcp} dynamicSecretUpdateGcp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateGcpWithHttpInfo(dynamicSecretUpdateGcp) {
      let postBody = dynamicSecretUpdateGcp;
      // verify the required parameter 'dynamicSecretUpdateGcp' is set
      if (dynamicSecretUpdateGcp === undefined || dynamicSecretUpdateGcp === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateGcp' when calling dynamicSecretUpdateGcp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-gcp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateGcp} dynamicSecretUpdateGcp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateGcp(dynamicSecretUpdateGcp) {
      return this.dynamicSecretUpdateGcpWithHttpInfo(dynamicSecretUpdateGcp)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateGithub} dynamicSecretUpdateGithub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateGithubWithHttpInfo(dynamicSecretUpdateGithub) {
      let postBody = dynamicSecretUpdateGithub;
      // verify the required parameter 'dynamicSecretUpdateGithub' is set
      if (dynamicSecretUpdateGithub === undefined || dynamicSecretUpdateGithub === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateGithub' when calling dynamicSecretUpdateGithub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-github', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateGithub} dynamicSecretUpdateGithub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateGithub(dynamicSecretUpdateGithub) {
      return this.dynamicSecretUpdateGithubWithHttpInfo(dynamicSecretUpdateGithub)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateGitlab} dynamicSecretUpdateGitlab 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateGitlabWithHttpInfo(dynamicSecretUpdateGitlab) {
      let postBody = dynamicSecretUpdateGitlab;
      // verify the required parameter 'dynamicSecretUpdateGitlab' is set
      if (dynamicSecretUpdateGitlab === undefined || dynamicSecretUpdateGitlab === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateGitlab' when calling dynamicSecretUpdateGitlab");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-gitlab', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateGitlab} dynamicSecretUpdateGitlab 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateGitlab(dynamicSecretUpdateGitlab) {
      return this.dynamicSecretUpdateGitlabWithHttpInfo(dynamicSecretUpdateGitlab)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateGke} dynamicSecretUpdateGke 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateGkeWithHttpInfo(dynamicSecretUpdateGke) {
      let postBody = dynamicSecretUpdateGke;
      // verify the required parameter 'dynamicSecretUpdateGke' is set
      if (dynamicSecretUpdateGke === undefined || dynamicSecretUpdateGke === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateGke' when calling dynamicSecretUpdateGke");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-gke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateGke} dynamicSecretUpdateGke 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateGke(dynamicSecretUpdateGke) {
      return this.dynamicSecretUpdateGkeWithHttpInfo(dynamicSecretUpdateGke)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateGoogleWorkspace} dynamicSecretUpdateGoogleWorkspace 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateGoogleWorkspaceWithHttpInfo(dynamicSecretUpdateGoogleWorkspace) {
      let postBody = dynamicSecretUpdateGoogleWorkspace;
      // verify the required parameter 'dynamicSecretUpdateGoogleWorkspace' is set
      if (dynamicSecretUpdateGoogleWorkspace === undefined || dynamicSecretUpdateGoogleWorkspace === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateGoogleWorkspace' when calling dynamicSecretUpdateGoogleWorkspace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-google-workspace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateGoogleWorkspace} dynamicSecretUpdateGoogleWorkspace 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateGoogleWorkspace(dynamicSecretUpdateGoogleWorkspace) {
      return this.dynamicSecretUpdateGoogleWorkspaceWithHttpInfo(dynamicSecretUpdateGoogleWorkspace)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateHanaDb} dynamicSecretUpdateHanaDb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateHanaDbWithHttpInfo(dynamicSecretUpdateHanaDb) {
      let postBody = dynamicSecretUpdateHanaDb;
      // verify the required parameter 'dynamicSecretUpdateHanaDb' is set
      if (dynamicSecretUpdateHanaDb === undefined || dynamicSecretUpdateHanaDb === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateHanaDb' when calling dynamicSecretUpdateHanaDb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-hana', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateHanaDb} dynamicSecretUpdateHanaDb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateHanaDb(dynamicSecretUpdateHanaDb) {
      return this.dynamicSecretUpdateHanaDbWithHttpInfo(dynamicSecretUpdateHanaDb)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateK8s} dynamicSecretUpdateK8s 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateK8sWithHttpInfo(dynamicSecretUpdateK8s) {
      let postBody = dynamicSecretUpdateK8s;
      // verify the required parameter 'dynamicSecretUpdateK8s' is set
      if (dynamicSecretUpdateK8s === undefined || dynamicSecretUpdateK8s === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateK8s' when calling dynamicSecretUpdateK8s");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-k8s', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateK8s} dynamicSecretUpdateK8s 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateK8s(dynamicSecretUpdateK8s) {
      return this.dynamicSecretUpdateK8sWithHttpInfo(dynamicSecretUpdateK8s)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateLdap} dynamicSecretUpdateLdap 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateLdapWithHttpInfo(dynamicSecretUpdateLdap) {
      let postBody = dynamicSecretUpdateLdap;
      // verify the required parameter 'dynamicSecretUpdateLdap' is set
      if (dynamicSecretUpdateLdap === undefined || dynamicSecretUpdateLdap === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateLdap' when calling dynamicSecretUpdateLdap");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-ldap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateLdap} dynamicSecretUpdateLdap 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateLdap(dynamicSecretUpdateLdap) {
      return this.dynamicSecretUpdateLdapWithHttpInfo(dynamicSecretUpdateLdap)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateMongoDb} dynamicSecretUpdateMongoDb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateMongoDbWithHttpInfo(dynamicSecretUpdateMongoDb) {
      let postBody = dynamicSecretUpdateMongoDb;
      // verify the required parameter 'dynamicSecretUpdateMongoDb' is set
      if (dynamicSecretUpdateMongoDb === undefined || dynamicSecretUpdateMongoDb === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateMongoDb' when calling dynamicSecretUpdateMongoDb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-mongo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateMongoDb} dynamicSecretUpdateMongoDb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateMongoDb(dynamicSecretUpdateMongoDb) {
      return this.dynamicSecretUpdateMongoDbWithHttpInfo(dynamicSecretUpdateMongoDb)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateMsSql} dynamicSecretUpdateMsSql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateMsSqlWithHttpInfo(dynamicSecretUpdateMsSql) {
      let postBody = dynamicSecretUpdateMsSql;
      // verify the required parameter 'dynamicSecretUpdateMsSql' is set
      if (dynamicSecretUpdateMsSql === undefined || dynamicSecretUpdateMsSql === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateMsSql' when calling dynamicSecretUpdateMsSql");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-mssql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateMsSql} dynamicSecretUpdateMsSql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateMsSql(dynamicSecretUpdateMsSql) {
      return this.dynamicSecretUpdateMsSqlWithHttpInfo(dynamicSecretUpdateMsSql)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateMySql} dynamicSecretUpdateMySql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateMySqlWithHttpInfo(dynamicSecretUpdateMySql) {
      let postBody = dynamicSecretUpdateMySql;
      // verify the required parameter 'dynamicSecretUpdateMySql' is set
      if (dynamicSecretUpdateMySql === undefined || dynamicSecretUpdateMySql === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateMySql' when calling dynamicSecretUpdateMySql");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-mysql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateMySql} dynamicSecretUpdateMySql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateMySql(dynamicSecretUpdateMySql) {
      return this.dynamicSecretUpdateMySqlWithHttpInfo(dynamicSecretUpdateMySql)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateOracleDb} dynamicSecretUpdateOracleDb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateOracleDbWithHttpInfo(dynamicSecretUpdateOracleDb) {
      let postBody = dynamicSecretUpdateOracleDb;
      // verify the required parameter 'dynamicSecretUpdateOracleDb' is set
      if (dynamicSecretUpdateOracleDb === undefined || dynamicSecretUpdateOracleDb === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateOracleDb' when calling dynamicSecretUpdateOracleDb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-oracle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateOracleDb} dynamicSecretUpdateOracleDb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateOracleDb(dynamicSecretUpdateOracleDb) {
      return this.dynamicSecretUpdateOracleDbWithHttpInfo(dynamicSecretUpdateOracleDb)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdatePing} dynamicSecretUpdatePing 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdatePingWithHttpInfo(dynamicSecretUpdatePing) {
      let postBody = dynamicSecretUpdatePing;
      // verify the required parameter 'dynamicSecretUpdatePing' is set
      if (dynamicSecretUpdatePing === undefined || dynamicSecretUpdatePing === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdatePing' when calling dynamicSecretUpdatePing");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-ping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdatePing} dynamicSecretUpdatePing 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdatePing(dynamicSecretUpdatePing) {
      return this.dynamicSecretUpdatePingWithHttpInfo(dynamicSecretUpdatePing)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdatePostgreSql} dynamicSecretUpdatePostgreSql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdatePostgreSqlWithHttpInfo(dynamicSecretUpdatePostgreSql) {
      let postBody = dynamicSecretUpdatePostgreSql;
      // verify the required parameter 'dynamicSecretUpdatePostgreSql' is set
      if (dynamicSecretUpdatePostgreSql === undefined || dynamicSecretUpdatePostgreSql === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdatePostgreSql' when calling dynamicSecretUpdatePostgreSql");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-postgresql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdatePostgreSql} dynamicSecretUpdatePostgreSql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdatePostgreSql(dynamicSecretUpdatePostgreSql) {
      return this.dynamicSecretUpdatePostgreSqlWithHttpInfo(dynamicSecretUpdatePostgreSql)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateRabbitMq} dynamicSecretUpdateRabbitMq 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateRabbitMqWithHttpInfo(dynamicSecretUpdateRabbitMq) {
      let postBody = dynamicSecretUpdateRabbitMq;
      // verify the required parameter 'dynamicSecretUpdateRabbitMq' is set
      if (dynamicSecretUpdateRabbitMq === undefined || dynamicSecretUpdateRabbitMq === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateRabbitMq' when calling dynamicSecretUpdateRabbitMq");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-rabbitmq', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateRabbitMq} dynamicSecretUpdateRabbitMq 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateRabbitMq(dynamicSecretUpdateRabbitMq) {
      return this.dynamicSecretUpdateRabbitMqWithHttpInfo(dynamicSecretUpdateRabbitMq)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateRdp} dynamicSecretUpdateRdp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateRdpWithHttpInfo(dynamicSecretUpdateRdp) {
      let postBody = dynamicSecretUpdateRdp;
      // verify the required parameter 'dynamicSecretUpdateRdp' is set
      if (dynamicSecretUpdateRdp === undefined || dynamicSecretUpdateRdp === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateRdp' when calling dynamicSecretUpdateRdp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-rdp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateRdp} dynamicSecretUpdateRdp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateRdp(dynamicSecretUpdateRdp) {
      return this.dynamicSecretUpdateRdpWithHttpInfo(dynamicSecretUpdateRdp)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateRedis} dynamicSecretUpdateRedis 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateRedisWithHttpInfo(dynamicSecretUpdateRedis) {
      let postBody = dynamicSecretUpdateRedis;
      // verify the required parameter 'dynamicSecretUpdateRedis' is set
      if (dynamicSecretUpdateRedis === undefined || dynamicSecretUpdateRedis === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateRedis' when calling dynamicSecretUpdateRedis");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-redis', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateRedis} dynamicSecretUpdateRedis 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateRedis(dynamicSecretUpdateRedis) {
      return this.dynamicSecretUpdateRedisWithHttpInfo(dynamicSecretUpdateRedis)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateRedshift} dynamicSecretUpdateRedshift 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateRedshiftWithHttpInfo(dynamicSecretUpdateRedshift) {
      let postBody = dynamicSecretUpdateRedshift;
      // verify the required parameter 'dynamicSecretUpdateRedshift' is set
      if (dynamicSecretUpdateRedshift === undefined || dynamicSecretUpdateRedshift === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateRedshift' when calling dynamicSecretUpdateRedshift");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-redshift', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateRedshift} dynamicSecretUpdateRedshift 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateRedshift(dynamicSecretUpdateRedshift) {
      return this.dynamicSecretUpdateRedshiftWithHttpInfo(dynamicSecretUpdateRedshift)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateSnowflake} dynamicSecretUpdateSnowflake 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateSnowflakeWithHttpInfo(dynamicSecretUpdateSnowflake) {
      let postBody = dynamicSecretUpdateSnowflake;
      // verify the required parameter 'dynamicSecretUpdateSnowflake' is set
      if (dynamicSecretUpdateSnowflake === undefined || dynamicSecretUpdateSnowflake === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateSnowflake' when calling dynamicSecretUpdateSnowflake");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-snowflake', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateSnowflake} dynamicSecretUpdateSnowflake 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateSnowflake(dynamicSecretUpdateSnowflake) {
      return this.dynamicSecretUpdateSnowflakeWithHttpInfo(dynamicSecretUpdateSnowflake)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DynamicSecretUpdateVenafi} dynamicSecretUpdateVenafi 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DynamicSecretUpdateOutput} and HTTP response
     */
    dynamicSecretUpdateVenafiWithHttpInfo(dynamicSecretUpdateVenafi) {
      let postBody = dynamicSecretUpdateVenafi;
      // verify the required parameter 'dynamicSecretUpdateVenafi' is set
      if (dynamicSecretUpdateVenafi === undefined || dynamicSecretUpdateVenafi === null) {
        throw new Error("Missing the required parameter 'dynamicSecretUpdateVenafi' when calling dynamicSecretUpdateVenafi");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicSecretUpdateOutput;
      return this.apiClient.callApi(
        '/dynamic-secret-update-venafi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DynamicSecretUpdateVenafi} dynamicSecretUpdateVenafi 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DynamicSecretUpdateOutput}
     */
    dynamicSecretUpdateVenafi(dynamicSecretUpdateVenafi) {
      return this.dynamicSecretUpdateVenafiWithHttpInfo(dynamicSecretUpdateVenafi)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/Encrypt} encrypt 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptOutput} and HTTP response
     */
    encryptWithHttpInfo(encrypt) {
      let postBody = encrypt;
      // verify the required parameter 'encrypt' is set
      if (encrypt === undefined || encrypt === null) {
        throw new Error("Missing the required parameter 'encrypt' when calling encrypt");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EncryptOutput;
      return this.apiClient.callApi(
        '/encrypt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/Encrypt} encrypt 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptOutput}
     */
    encrypt(encrypt) {
      return this.encryptWithHttpInfo(encrypt)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Array.<module:model/BatchEncryptionRequestLine>} batchEncryptionRequestLine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptOutput} and HTTP response
     */
    encryptBatchWithHttpInfo(batchEncryptionRequestLine) {
      let postBody = batchEncryptionRequestLine;
      // verify the required parameter 'batchEncryptionRequestLine' is set
      if (batchEncryptionRequestLine === undefined || batchEncryptionRequestLine === null) {
        throw new Error("Missing the required parameter 'batchEncryptionRequestLine' when calling encryptBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EncryptOutput;
      return this.apiClient.callApi(
        '/encrypt-batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Array.<module:model/BatchEncryptionRequestLine>} batchEncryptionRequestLine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptOutput}
     */
    encryptBatch(batchEncryptionRequestLine) {
      return this.encryptBatchWithHttpInfo(batchEncryptionRequestLine)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/EncryptGPG} encryptGPG 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptGPGOutput} and HTTP response
     */
    encryptGPGWithHttpInfo(encryptGPG) {
      let postBody = encryptGPG;
      // verify the required parameter 'encryptGPG' is set
      if (encryptGPG === undefined || encryptGPG === null) {
        throw new Error("Missing the required parameter 'encryptGPG' when calling encryptGPG");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EncryptGPGOutput;
      return this.apiClient.callApi(
        '/encrypt-gpg', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/EncryptGPG} encryptGPG 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptGPGOutput}
     */
    encryptGPG(encryptGPG) {
      return this.encryptGPGWithHttpInfo(encryptGPG)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/EncryptWithClassicKey} encryptWithClassicKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptOutput} and HTTP response
     */
    encryptWithClassicKeyWithHttpInfo(encryptWithClassicKey) {
      let postBody = encryptWithClassicKey;
      // verify the required parameter 'encryptWithClassicKey' is set
      if (encryptWithClassicKey === undefined || encryptWithClassicKey === null) {
        throw new Error("Missing the required parameter 'encryptWithClassicKey' when calling encryptWithClassicKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EncryptOutput;
      return this.apiClient.callApi(
        '/encrypt-with-classic-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/EncryptWithClassicKey} encryptWithClassicKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptOutput}
     */
    encryptWithClassicKey(encryptWithClassicKey) {
      return this.encryptWithClassicKeyWithHttpInfo(encryptWithClassicKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/EsmCreate} esmCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EsmCreateSecretOutput} and HTTP response
     */
    esmCreateWithHttpInfo(esmCreate) {
      let postBody = esmCreate;
      // verify the required parameter 'esmCreate' is set
      if (esmCreate === undefined || esmCreate === null) {
        throw new Error("Missing the required parameter 'esmCreate' when calling esmCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EsmCreateSecretOutput;
      return this.apiClient.callApi(
        '/esm-create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/EsmCreate} esmCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EsmCreateSecretOutput}
     */
    esmCreate(esmCreate) {
      return this.esmCreateWithHttpInfo(esmCreate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/EsmDelete} esmDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EsmDeleteSecretOutput} and HTTP response
     */
    esmDeleteWithHttpInfo(esmDelete) {
      let postBody = esmDelete;
      // verify the required parameter 'esmDelete' is set
      if (esmDelete === undefined || esmDelete === null) {
        throw new Error("Missing the required parameter 'esmDelete' when calling esmDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EsmDeleteSecretOutput;
      return this.apiClient.callApi(
        '/esm-delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/EsmDelete} esmDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EsmDeleteSecretOutput}
     */
    esmDelete(esmDelete) {
      return this.esmDeleteWithHttpInfo(esmDelete)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/EsmGet} esmGet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EsmGetSecretOutput} and HTTP response
     */
    esmGetWithHttpInfo(esmGet) {
      let postBody = esmGet;
      // verify the required parameter 'esmGet' is set
      if (esmGet === undefined || esmGet === null) {
        throw new Error("Missing the required parameter 'esmGet' when calling esmGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EsmGetSecretOutput;
      return this.apiClient.callApi(
        '/esm-get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/EsmGet} esmGet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EsmGetSecretOutput}
     */
    esmGet(esmGet) {
      return this.esmGetWithHttpInfo(esmGet)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/EsmList} esmList 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EsmListSecretsOutput} and HTTP response
     */
    esmListWithHttpInfo(esmList) {
      let postBody = esmList;
      // verify the required parameter 'esmList' is set
      if (esmList === undefined || esmList === null) {
        throw new Error("Missing the required parameter 'esmList' when calling esmList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EsmListSecretsOutput;
      return this.apiClient.callApi(
        '/esm-list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/EsmList} esmList 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EsmListSecretsOutput}
     */
    esmList(esmList) {
      return this.esmListWithHttpInfo(esmList)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/EsmUpdate} esmUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EsmUpdateSecretOutput} and HTTP response
     */
    esmUpdateWithHttpInfo(esmUpdate) {
      let postBody = esmUpdate;
      // verify the required parameter 'esmUpdate' is set
      if (esmUpdate === undefined || esmUpdate === null) {
        throw new Error("Missing the required parameter 'esmUpdate' when calling esmUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EsmUpdateSecretOutput;
      return this.apiClient.callApi(
        '/esm-update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/EsmUpdate} esmUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EsmUpdateSecretOutput}
     */
    esmUpdate(esmUpdate) {
      return this.esmUpdateWithHttpInfo(esmUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/EventAction} eventAction 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    eventActionWithHttpInfo(eventAction) {
      let postBody = eventAction;
      // verify the required parameter 'eventAction' is set
      if (eventAction === undefined || eventAction === null) {
        throw new Error("Missing the required parameter 'eventAction' when calling eventAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/event-action', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/EventAction} eventAction 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    eventAction(eventAction) {
      return this.eventActionWithHttpInfo(eventAction)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/EventForwarderCreateEmail} eventForwarderCreateEmail 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventForwarderCreateUpdateOutput} and HTTP response
     */
    eventForwarderCreateEmailWithHttpInfo(eventForwarderCreateEmail) {
      let postBody = eventForwarderCreateEmail;
      // verify the required parameter 'eventForwarderCreateEmail' is set
      if (eventForwarderCreateEmail === undefined || eventForwarderCreateEmail === null) {
        throw new Error("Missing the required parameter 'eventForwarderCreateEmail' when calling eventForwarderCreateEmail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventForwarderCreateUpdateOutput;
      return this.apiClient.callApi(
        '/event-forwarder-create-email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/EventForwarderCreateEmail} eventForwarderCreateEmail 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventForwarderCreateUpdateOutput}
     */
    eventForwarderCreateEmail(eventForwarderCreateEmail) {
      return this.eventForwarderCreateEmailWithHttpInfo(eventForwarderCreateEmail)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/EventForwarderCreateServiceNow} eventForwarderCreateServiceNow 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventForwarderCreateUpdateOutput} and HTTP response
     */
    eventForwarderCreateServiceNowWithHttpInfo(eventForwarderCreateServiceNow) {
      let postBody = eventForwarderCreateServiceNow;
      // verify the required parameter 'eventForwarderCreateServiceNow' is set
      if (eventForwarderCreateServiceNow === undefined || eventForwarderCreateServiceNow === null) {
        throw new Error("Missing the required parameter 'eventForwarderCreateServiceNow' when calling eventForwarderCreateServiceNow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventForwarderCreateUpdateOutput;
      return this.apiClient.callApi(
        '/event-forwarder-create-servicenow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/EventForwarderCreateServiceNow} eventForwarderCreateServiceNow 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventForwarderCreateUpdateOutput}
     */
    eventForwarderCreateServiceNow(eventForwarderCreateServiceNow) {
      return this.eventForwarderCreateServiceNowWithHttpInfo(eventForwarderCreateServiceNow)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/EventForwarderCreateSlack} eventForwarderCreateSlack 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventForwarderCreateUpdateOutput} and HTTP response
     */
    eventForwarderCreateSlackWithHttpInfo(eventForwarderCreateSlack) {
      let postBody = eventForwarderCreateSlack;
      // verify the required parameter 'eventForwarderCreateSlack' is set
      if (eventForwarderCreateSlack === undefined || eventForwarderCreateSlack === null) {
        throw new Error("Missing the required parameter 'eventForwarderCreateSlack' when calling eventForwarderCreateSlack");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventForwarderCreateUpdateOutput;
      return this.apiClient.callApi(
        '/event-forwarder-create-slack', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/EventForwarderCreateSlack} eventForwarderCreateSlack 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventForwarderCreateUpdateOutput}
     */
    eventForwarderCreateSlack(eventForwarderCreateSlack) {
      return this.eventForwarderCreateSlackWithHttpInfo(eventForwarderCreateSlack)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/EventForwarderCreateWebhook} eventForwarderCreateWebhook 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventForwarderCreateUpdateOutput} and HTTP response
     */
    eventForwarderCreateWebhookWithHttpInfo(eventForwarderCreateWebhook) {
      let postBody = eventForwarderCreateWebhook;
      // verify the required parameter 'eventForwarderCreateWebhook' is set
      if (eventForwarderCreateWebhook === undefined || eventForwarderCreateWebhook === null) {
        throw new Error("Missing the required parameter 'eventForwarderCreateWebhook' when calling eventForwarderCreateWebhook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventForwarderCreateUpdateOutput;
      return this.apiClient.callApi(
        '/event-forwarder-create-webhook', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/EventForwarderCreateWebhook} eventForwarderCreateWebhook 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventForwarderCreateUpdateOutput}
     */
    eventForwarderCreateWebhook(eventForwarderCreateWebhook) {
      return this.eventForwarderCreateWebhookWithHttpInfo(eventForwarderCreateWebhook)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/EventForwarderDelete} eventForwarderDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventForwarderDeleteOutput} and HTTP response
     */
    eventForwarderDeleteWithHttpInfo(eventForwarderDelete) {
      let postBody = eventForwarderDelete;
      // verify the required parameter 'eventForwarderDelete' is set
      if (eventForwarderDelete === undefined || eventForwarderDelete === null) {
        throw new Error("Missing the required parameter 'eventForwarderDelete' when calling eventForwarderDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventForwarderDeleteOutput;
      return this.apiClient.callApi(
        '/event-forwarder-delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/EventForwarderDelete} eventForwarderDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventForwarderDeleteOutput}
     */
    eventForwarderDelete(eventForwarderDelete) {
      return this.eventForwarderDeleteWithHttpInfo(eventForwarderDelete)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/EventForwarderGet} eventForwarderGet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventForwarderGetOutput} and HTTP response
     */
    eventForwarderGetWithHttpInfo(eventForwarderGet) {
      let postBody = eventForwarderGet;
      // verify the required parameter 'eventForwarderGet' is set
      if (eventForwarderGet === undefined || eventForwarderGet === null) {
        throw new Error("Missing the required parameter 'eventForwarderGet' when calling eventForwarderGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventForwarderGetOutput;
      return this.apiClient.callApi(
        '/event-forwarder-get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/EventForwarderGet} eventForwarderGet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventForwarderGetOutput}
     */
    eventForwarderGet(eventForwarderGet) {
      return this.eventForwarderGetWithHttpInfo(eventForwarderGet)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/EventForwarderUpdateEmail} eventForwarderUpdateEmail 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventForwarderCreateUpdateOutput} and HTTP response
     */
    eventForwarderUpdateEmailWithHttpInfo(eventForwarderUpdateEmail) {
      let postBody = eventForwarderUpdateEmail;
      // verify the required parameter 'eventForwarderUpdateEmail' is set
      if (eventForwarderUpdateEmail === undefined || eventForwarderUpdateEmail === null) {
        throw new Error("Missing the required parameter 'eventForwarderUpdateEmail' when calling eventForwarderUpdateEmail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventForwarderCreateUpdateOutput;
      return this.apiClient.callApi(
        '/event-forwarder-update-email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/EventForwarderUpdateEmail} eventForwarderUpdateEmail 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventForwarderCreateUpdateOutput}
     */
    eventForwarderUpdateEmail(eventForwarderUpdateEmail) {
      return this.eventForwarderUpdateEmailWithHttpInfo(eventForwarderUpdateEmail)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/EventForwarderUpdateServiceNow} eventForwarderUpdateServiceNow 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventForwarderCreateUpdateOutput} and HTTP response
     */
    eventForwarderUpdateServiceNowWithHttpInfo(eventForwarderUpdateServiceNow) {
      let postBody = eventForwarderUpdateServiceNow;
      // verify the required parameter 'eventForwarderUpdateServiceNow' is set
      if (eventForwarderUpdateServiceNow === undefined || eventForwarderUpdateServiceNow === null) {
        throw new Error("Missing the required parameter 'eventForwarderUpdateServiceNow' when calling eventForwarderUpdateServiceNow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventForwarderCreateUpdateOutput;
      return this.apiClient.callApi(
        '/event-forwarder-update-servicenow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/EventForwarderUpdateServiceNow} eventForwarderUpdateServiceNow 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventForwarderCreateUpdateOutput}
     */
    eventForwarderUpdateServiceNow(eventForwarderUpdateServiceNow) {
      return this.eventForwarderUpdateServiceNowWithHttpInfo(eventForwarderUpdateServiceNow)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/EventForwarderUpdateSlack} eventForwarderUpdateSlack 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventForwarderCreateUpdateOutput} and HTTP response
     */
    eventForwarderUpdateSlackWithHttpInfo(eventForwarderUpdateSlack) {
      let postBody = eventForwarderUpdateSlack;
      // verify the required parameter 'eventForwarderUpdateSlack' is set
      if (eventForwarderUpdateSlack === undefined || eventForwarderUpdateSlack === null) {
        throw new Error("Missing the required parameter 'eventForwarderUpdateSlack' when calling eventForwarderUpdateSlack");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventForwarderCreateUpdateOutput;
      return this.apiClient.callApi(
        '/event-forwarder-update-slack', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/EventForwarderUpdateSlack} eventForwarderUpdateSlack 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventForwarderCreateUpdateOutput}
     */
    eventForwarderUpdateSlack(eventForwarderUpdateSlack) {
      return this.eventForwarderUpdateSlackWithHttpInfo(eventForwarderUpdateSlack)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/EventForwarderUpdateWebhook} eventForwarderUpdateWebhook 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventForwarderCreateUpdateOutput} and HTTP response
     */
    eventForwarderUpdateWebhookWithHttpInfo(eventForwarderUpdateWebhook) {
      let postBody = eventForwarderUpdateWebhook;
      // verify the required parameter 'eventForwarderUpdateWebhook' is set
      if (eventForwarderUpdateWebhook === undefined || eventForwarderUpdateWebhook === null) {
        throw new Error("Missing the required parameter 'eventForwarderUpdateWebhook' when calling eventForwarderUpdateWebhook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventForwarderCreateUpdateOutput;
      return this.apiClient.callApi(
        '/event-forwarder-update-webhook', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/EventForwarderUpdateWebhook} eventForwarderUpdateWebhook 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventForwarderCreateUpdateOutput}
     */
    eventForwarderUpdateWebhook(eventForwarderUpdateWebhook) {
      return this.eventForwarderUpdateWebhookWithHttpInfo(eventForwarderUpdateWebhook)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ExportClassicKey} exportClassicKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ExportClassicKeyOutput} and HTTP response
     */
    exportClassicKeyWithHttpInfo(exportClassicKey) {
      let postBody = exportClassicKey;
      // verify the required parameter 'exportClassicKey' is set
      if (exportClassicKey === undefined || exportClassicKey === null) {
        throw new Error("Missing the required parameter 'exportClassicKey' when calling exportClassicKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExportClassicKeyOutput;
      return this.apiClient.callApi(
        '/export-classic-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ExportClassicKey} exportClassicKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ExportClassicKeyOutput}
     */
    exportClassicKey(exportClassicKey) {
      return this.exportClassicKeyWithHttpInfo(exportClassicKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateAllowedAccess} gatewayCreateAllowedAccess 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AllowedAccess} and HTTP response
     */
    gatewayCreateAllowedAccessWithHttpInfo(gatewayCreateAllowedAccess) {
      let postBody = gatewayCreateAllowedAccess;
      // verify the required parameter 'gatewayCreateAllowedAccess' is set
      if (gatewayCreateAllowedAccess === undefined || gatewayCreateAllowedAccess === null) {
        throw new Error("Missing the required parameter 'gatewayCreateAllowedAccess' when calling gatewayCreateAllowedAccess");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AllowedAccess;
      return this.apiClient.callApi(
        '/gateway-create-allowed-access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateAllowedAccess} gatewayCreateAllowedAccess 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AllowedAccess}
     */
    gatewayCreateAllowedAccess(gatewayCreateAllowedAccess) {
      return this.gatewayCreateAllowedAccessWithHttpInfo(gatewayCreateAllowedAccess)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateK8SAuthConfig} gatewayCreateK8SAuthConfig 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateK8SAuthConfigOutput} and HTTP response
     */
    gatewayCreateK8SAuthConfigWithHttpInfo(gatewayCreateK8SAuthConfig) {
      let postBody = gatewayCreateK8SAuthConfig;
      // verify the required parameter 'gatewayCreateK8SAuthConfig' is set
      if (gatewayCreateK8SAuthConfig === undefined || gatewayCreateK8SAuthConfig === null) {
        throw new Error("Missing the required parameter 'gatewayCreateK8SAuthConfig' when calling gatewayCreateK8SAuthConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateK8SAuthConfigOutput;
      return this.apiClient.callApi(
        '/gateway-create-k8s-auth-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateK8SAuthConfig} gatewayCreateK8SAuthConfig 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateK8SAuthConfigOutput}
     */
    gatewayCreateK8SAuthConfig(gatewayCreateK8SAuthConfig) {
      return this.gatewayCreateK8SAuthConfigWithHttpInfo(gatewayCreateK8SAuthConfig)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateMigration} gatewayCreateMigration 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigrationCreateOutput} and HTTP response
     */
    gatewayCreateMigrationWithHttpInfo(gatewayCreateMigration) {
      let postBody = gatewayCreateMigration;
      // verify the required parameter 'gatewayCreateMigration' is set
      if (gatewayCreateMigration === undefined || gatewayCreateMigration === null) {
        throw new Error("Missing the required parameter 'gatewayCreateMigration' when calling gatewayCreateMigration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayMigrationCreateOutput;
      return this.apiClient.callApi(
        '/gateway-create-migration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateMigration} gatewayCreateMigration 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigrationCreateOutput}
     */
    gatewayCreateMigration(gatewayCreateMigration) {
      return this.gatewayCreateMigrationWithHttpInfo(gatewayCreateMigration)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerArtifactory} gatewayCreateProducerArtifactory 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerArtifactoryOutput} and HTTP response
     */
    gatewayCreateProducerArtifactoryWithHttpInfo(gatewayCreateProducerArtifactory) {
      let postBody = gatewayCreateProducerArtifactory;
      // verify the required parameter 'gatewayCreateProducerArtifactory' is set
      if (gatewayCreateProducerArtifactory === undefined || gatewayCreateProducerArtifactory === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerArtifactory' when calling gatewayCreateProducerArtifactory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerArtifactoryOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-artifactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerArtifactory} gatewayCreateProducerArtifactory 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerArtifactoryOutput}
     */
    gatewayCreateProducerArtifactory(gatewayCreateProducerArtifactory) {
      return this.gatewayCreateProducerArtifactoryWithHttpInfo(gatewayCreateProducerArtifactory)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerAws} gatewayCreateProducerAws 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerAwsOutput} and HTTP response
     */
    gatewayCreateProducerAwsWithHttpInfo(gatewayCreateProducerAws) {
      let postBody = gatewayCreateProducerAws;
      // verify the required parameter 'gatewayCreateProducerAws' is set
      if (gatewayCreateProducerAws === undefined || gatewayCreateProducerAws === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerAws' when calling gatewayCreateProducerAws");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerAwsOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-aws', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerAws} gatewayCreateProducerAws 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerAwsOutput}
     */
    gatewayCreateProducerAws(gatewayCreateProducerAws) {
      return this.gatewayCreateProducerAwsWithHttpInfo(gatewayCreateProducerAws)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerAzure} gatewayCreateProducerAzure 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerAzureOutput} and HTTP response
     */
    gatewayCreateProducerAzureWithHttpInfo(gatewayCreateProducerAzure) {
      let postBody = gatewayCreateProducerAzure;
      // verify the required parameter 'gatewayCreateProducerAzure' is set
      if (gatewayCreateProducerAzure === undefined || gatewayCreateProducerAzure === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerAzure' when calling gatewayCreateProducerAzure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerAzureOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-azure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerAzure} gatewayCreateProducerAzure 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerAzureOutput}
     */
    gatewayCreateProducerAzure(gatewayCreateProducerAzure) {
      return this.gatewayCreateProducerAzureWithHttpInfo(gatewayCreateProducerAzure)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerCassandra} gatewayCreateProducerCassandra 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerCassandraOutput} and HTTP response
     */
    gatewayCreateProducerCassandraWithHttpInfo(gatewayCreateProducerCassandra) {
      let postBody = gatewayCreateProducerCassandra;
      // verify the required parameter 'gatewayCreateProducerCassandra' is set
      if (gatewayCreateProducerCassandra === undefined || gatewayCreateProducerCassandra === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerCassandra' when calling gatewayCreateProducerCassandra");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerCassandraOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-cassandra', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerCassandra} gatewayCreateProducerCassandra 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerCassandraOutput}
     */
    gatewayCreateProducerCassandra(gatewayCreateProducerCassandra) {
      return this.gatewayCreateProducerCassandraWithHttpInfo(gatewayCreateProducerCassandra)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerChef} gatewayCreateProducerChef 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerChefOutput} and HTTP response
     */
    gatewayCreateProducerChefWithHttpInfo(gatewayCreateProducerChef) {
      let postBody = gatewayCreateProducerChef;
      // verify the required parameter 'gatewayCreateProducerChef' is set
      if (gatewayCreateProducerChef === undefined || gatewayCreateProducerChef === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerChef' when calling gatewayCreateProducerChef");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerChefOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-chef', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerChef} gatewayCreateProducerChef 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerChefOutput}
     */
    gatewayCreateProducerChef(gatewayCreateProducerChef) {
      return this.gatewayCreateProducerChefWithHttpInfo(gatewayCreateProducerChef)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GatewayCreateProducerCustom} [gatewayCreateProducerCustom] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerCustomOutput} and HTTP response
     */
    gatewayCreateProducerCustomWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['gatewayCreateProducerCustom'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerCustomOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-custom', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GatewayCreateProducerCustom} opts.gatewayCreateProducerCustom 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerCustomOutput}
     */
    gatewayCreateProducerCustom(opts) {
      return this.gatewayCreateProducerCustomWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerDockerhub} gatewayCreateProducerDockerhub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerDockerhubOutput} and HTTP response
     */
    gatewayCreateProducerDockerhubWithHttpInfo(gatewayCreateProducerDockerhub) {
      let postBody = gatewayCreateProducerDockerhub;
      // verify the required parameter 'gatewayCreateProducerDockerhub' is set
      if (gatewayCreateProducerDockerhub === undefined || gatewayCreateProducerDockerhub === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerDockerhub' when calling gatewayCreateProducerDockerhub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerDockerhubOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-dockerhub', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerDockerhub} gatewayCreateProducerDockerhub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerDockerhubOutput}
     */
    gatewayCreateProducerDockerhub(gatewayCreateProducerDockerhub) {
      return this.gatewayCreateProducerDockerhubWithHttpInfo(gatewayCreateProducerDockerhub)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerEks} gatewayCreateProducerEks 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerEksOutput} and HTTP response
     */
    gatewayCreateProducerEksWithHttpInfo(gatewayCreateProducerEks) {
      let postBody = gatewayCreateProducerEks;
      // verify the required parameter 'gatewayCreateProducerEks' is set
      if (gatewayCreateProducerEks === undefined || gatewayCreateProducerEks === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerEks' when calling gatewayCreateProducerEks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerEksOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-eks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerEks} gatewayCreateProducerEks 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerEksOutput}
     */
    gatewayCreateProducerEks(gatewayCreateProducerEks) {
      return this.gatewayCreateProducerEksWithHttpInfo(gatewayCreateProducerEks)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerGcp} gatewayCreateProducerGcp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerGcpOutput} and HTTP response
     */
    gatewayCreateProducerGcpWithHttpInfo(gatewayCreateProducerGcp) {
      let postBody = gatewayCreateProducerGcp;
      // verify the required parameter 'gatewayCreateProducerGcp' is set
      if (gatewayCreateProducerGcp === undefined || gatewayCreateProducerGcp === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerGcp' when calling gatewayCreateProducerGcp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerGcpOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-gcp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerGcp} gatewayCreateProducerGcp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerGcpOutput}
     */
    gatewayCreateProducerGcp(gatewayCreateProducerGcp) {
      return this.gatewayCreateProducerGcpWithHttpInfo(gatewayCreateProducerGcp)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerGithub} gatewayCreateProducerGithub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerGithubOutput} and HTTP response
     */
    gatewayCreateProducerGithubWithHttpInfo(gatewayCreateProducerGithub) {
      let postBody = gatewayCreateProducerGithub;
      // verify the required parameter 'gatewayCreateProducerGithub' is set
      if (gatewayCreateProducerGithub === undefined || gatewayCreateProducerGithub === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerGithub' when calling gatewayCreateProducerGithub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerGithubOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-github', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerGithub} gatewayCreateProducerGithub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerGithubOutput}
     */
    gatewayCreateProducerGithub(gatewayCreateProducerGithub) {
      return this.gatewayCreateProducerGithubWithHttpInfo(gatewayCreateProducerGithub)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerGke} gatewayCreateProducerGke 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerGkeOutput} and HTTP response
     */
    gatewayCreateProducerGkeWithHttpInfo(gatewayCreateProducerGke) {
      let postBody = gatewayCreateProducerGke;
      // verify the required parameter 'gatewayCreateProducerGke' is set
      if (gatewayCreateProducerGke === undefined || gatewayCreateProducerGke === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerGke' when calling gatewayCreateProducerGke");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerGkeOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-gke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerGke} gatewayCreateProducerGke 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerGkeOutput}
     */
    gatewayCreateProducerGke(gatewayCreateProducerGke) {
      return this.gatewayCreateProducerGkeWithHttpInfo(gatewayCreateProducerGke)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerHanaDb} gatewayCreateProducerHanaDb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerHanaDbOutput} and HTTP response
     */
    gatewayCreateProducerHanaDbWithHttpInfo(gatewayCreateProducerHanaDb) {
      let postBody = gatewayCreateProducerHanaDb;
      // verify the required parameter 'gatewayCreateProducerHanaDb' is set
      if (gatewayCreateProducerHanaDb === undefined || gatewayCreateProducerHanaDb === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerHanaDb' when calling gatewayCreateProducerHanaDb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerHanaDbOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-hanadb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerHanaDb} gatewayCreateProducerHanaDb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerHanaDbOutput}
     */
    gatewayCreateProducerHanaDb(gatewayCreateProducerHanaDb) {
      return this.gatewayCreateProducerHanaDbWithHttpInfo(gatewayCreateProducerHanaDb)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerLdap} gatewayCreateProducerLdap 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerLdapOutput} and HTTP response
     */
    gatewayCreateProducerLdapWithHttpInfo(gatewayCreateProducerLdap) {
      let postBody = gatewayCreateProducerLdap;
      // verify the required parameter 'gatewayCreateProducerLdap' is set
      if (gatewayCreateProducerLdap === undefined || gatewayCreateProducerLdap === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerLdap' when calling gatewayCreateProducerLdap");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerLdapOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-ldap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerLdap} gatewayCreateProducerLdap 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerLdapOutput}
     */
    gatewayCreateProducerLdap(gatewayCreateProducerLdap) {
      return this.gatewayCreateProducerLdapWithHttpInfo(gatewayCreateProducerLdap)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerMSSQL} gatewayCreateProducerMSSQL 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerMSSQLOutput} and HTTP response
     */
    gatewayCreateProducerMSSQLWithHttpInfo(gatewayCreateProducerMSSQL) {
      let postBody = gatewayCreateProducerMSSQL;
      // verify the required parameter 'gatewayCreateProducerMSSQL' is set
      if (gatewayCreateProducerMSSQL === undefined || gatewayCreateProducerMSSQL === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerMSSQL' when calling gatewayCreateProducerMSSQL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerMSSQLOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-mssql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerMSSQL} gatewayCreateProducerMSSQL 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerMSSQLOutput}
     */
    gatewayCreateProducerMSSQL(gatewayCreateProducerMSSQL) {
      return this.gatewayCreateProducerMSSQLWithHttpInfo(gatewayCreateProducerMSSQL)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerMongo} gatewayCreateProducerMongo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerMongoOutput} and HTTP response
     */
    gatewayCreateProducerMongoWithHttpInfo(gatewayCreateProducerMongo) {
      let postBody = gatewayCreateProducerMongo;
      // verify the required parameter 'gatewayCreateProducerMongo' is set
      if (gatewayCreateProducerMongo === undefined || gatewayCreateProducerMongo === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerMongo' when calling gatewayCreateProducerMongo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerMongoOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-mongo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerMongo} gatewayCreateProducerMongo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerMongoOutput}
     */
    gatewayCreateProducerMongo(gatewayCreateProducerMongo) {
      return this.gatewayCreateProducerMongoWithHttpInfo(gatewayCreateProducerMongo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerMySQL} gatewayCreateProducerMySQL 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerMySQLOutput} and HTTP response
     */
    gatewayCreateProducerMySQLWithHttpInfo(gatewayCreateProducerMySQL) {
      let postBody = gatewayCreateProducerMySQL;
      // verify the required parameter 'gatewayCreateProducerMySQL' is set
      if (gatewayCreateProducerMySQL === undefined || gatewayCreateProducerMySQL === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerMySQL' when calling gatewayCreateProducerMySQL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerMySQLOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-mysql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerMySQL} gatewayCreateProducerMySQL 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerMySQLOutput}
     */
    gatewayCreateProducerMySQL(gatewayCreateProducerMySQL) {
      return this.gatewayCreateProducerMySQLWithHttpInfo(gatewayCreateProducerMySQL)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerNativeK8S} gatewayCreateProducerNativeK8S 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerNativeK8SOutput} and HTTP response
     */
    gatewayCreateProducerNativeK8SWithHttpInfo(gatewayCreateProducerNativeK8S) {
      let postBody = gatewayCreateProducerNativeK8S;
      // verify the required parameter 'gatewayCreateProducerNativeK8S' is set
      if (gatewayCreateProducerNativeK8S === undefined || gatewayCreateProducerNativeK8S === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerNativeK8S' when calling gatewayCreateProducerNativeK8S");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerNativeK8SOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-k8s', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerNativeK8S} gatewayCreateProducerNativeK8S 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerNativeK8SOutput}
     */
    gatewayCreateProducerNativeK8S(gatewayCreateProducerNativeK8S) {
      return this.gatewayCreateProducerNativeK8SWithHttpInfo(gatewayCreateProducerNativeK8S)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerOracleDb} gatewayCreateProducerOracleDb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerOracleDbOutput} and HTTP response
     */
    gatewayCreateProducerOracleDbWithHttpInfo(gatewayCreateProducerOracleDb) {
      let postBody = gatewayCreateProducerOracleDb;
      // verify the required parameter 'gatewayCreateProducerOracleDb' is set
      if (gatewayCreateProducerOracleDb === undefined || gatewayCreateProducerOracleDb === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerOracleDb' when calling gatewayCreateProducerOracleDb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerOracleDbOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-oracle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerOracleDb} gatewayCreateProducerOracleDb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerOracleDbOutput}
     */
    gatewayCreateProducerOracleDb(gatewayCreateProducerOracleDb) {
      return this.gatewayCreateProducerOracleDbWithHttpInfo(gatewayCreateProducerOracleDb)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerPing} gatewayCreateProducerPing 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerPingOutput} and HTTP response
     */
    gatewayCreateProducerPingWithHttpInfo(gatewayCreateProducerPing) {
      let postBody = gatewayCreateProducerPing;
      // verify the required parameter 'gatewayCreateProducerPing' is set
      if (gatewayCreateProducerPing === undefined || gatewayCreateProducerPing === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerPing' when calling gatewayCreateProducerPing");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerPingOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-ping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerPing} gatewayCreateProducerPing 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerPingOutput}
     */
    gatewayCreateProducerPing(gatewayCreateProducerPing) {
      return this.gatewayCreateProducerPingWithHttpInfo(gatewayCreateProducerPing)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerPostgreSQL} gatewayCreateProducerPostgreSQL 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerPostgreSQLOutput} and HTTP response
     */
    gatewayCreateProducerPostgreSQLWithHttpInfo(gatewayCreateProducerPostgreSQL) {
      let postBody = gatewayCreateProducerPostgreSQL;
      // verify the required parameter 'gatewayCreateProducerPostgreSQL' is set
      if (gatewayCreateProducerPostgreSQL === undefined || gatewayCreateProducerPostgreSQL === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerPostgreSQL' when calling gatewayCreateProducerPostgreSQL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerPostgreSQLOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-postgresql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerPostgreSQL} gatewayCreateProducerPostgreSQL 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerPostgreSQLOutput}
     */
    gatewayCreateProducerPostgreSQL(gatewayCreateProducerPostgreSQL) {
      return this.gatewayCreateProducerPostgreSQLWithHttpInfo(gatewayCreateProducerPostgreSQL)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerRabbitMQ} gatewayCreateProducerRabbitMQ 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerRabbitMQOutput} and HTTP response
     */
    gatewayCreateProducerRabbitMQWithHttpInfo(gatewayCreateProducerRabbitMQ) {
      let postBody = gatewayCreateProducerRabbitMQ;
      // verify the required parameter 'gatewayCreateProducerRabbitMQ' is set
      if (gatewayCreateProducerRabbitMQ === undefined || gatewayCreateProducerRabbitMQ === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerRabbitMQ' when calling gatewayCreateProducerRabbitMQ");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerRabbitMQOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-rabbitmq', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerRabbitMQ} gatewayCreateProducerRabbitMQ 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerRabbitMQOutput}
     */
    gatewayCreateProducerRabbitMQ(gatewayCreateProducerRabbitMQ) {
      return this.gatewayCreateProducerRabbitMQWithHttpInfo(gatewayCreateProducerRabbitMQ)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerRdp} gatewayCreateProducerRdp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerRdpOutput} and HTTP response
     */
    gatewayCreateProducerRdpWithHttpInfo(gatewayCreateProducerRdp) {
      let postBody = gatewayCreateProducerRdp;
      // verify the required parameter 'gatewayCreateProducerRdp' is set
      if (gatewayCreateProducerRdp === undefined || gatewayCreateProducerRdp === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerRdp' when calling gatewayCreateProducerRdp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerRdpOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-rdp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerRdp} gatewayCreateProducerRdp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerRdpOutput}
     */
    gatewayCreateProducerRdp(gatewayCreateProducerRdp) {
      return this.gatewayCreateProducerRdpWithHttpInfo(gatewayCreateProducerRdp)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerRedis} gatewayCreateProducerRedis 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerRedisOutput} and HTTP response
     */
    gatewayCreateProducerRedisWithHttpInfo(gatewayCreateProducerRedis) {
      let postBody = gatewayCreateProducerRedis;
      // verify the required parameter 'gatewayCreateProducerRedis' is set
      if (gatewayCreateProducerRedis === undefined || gatewayCreateProducerRedis === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerRedis' when calling gatewayCreateProducerRedis");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerRedisOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-Redis', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerRedis} gatewayCreateProducerRedis 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerRedisOutput}
     */
    gatewayCreateProducerRedis(gatewayCreateProducerRedis) {
      return this.gatewayCreateProducerRedisWithHttpInfo(gatewayCreateProducerRedis)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerRedshift} gatewayCreateProducerRedshift 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerRedshiftOutput} and HTTP response
     */
    gatewayCreateProducerRedshiftWithHttpInfo(gatewayCreateProducerRedshift) {
      let postBody = gatewayCreateProducerRedshift;
      // verify the required parameter 'gatewayCreateProducerRedshift' is set
      if (gatewayCreateProducerRedshift === undefined || gatewayCreateProducerRedshift === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerRedshift' when calling gatewayCreateProducerRedshift");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerRedshiftOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-redshift', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerRedshift} gatewayCreateProducerRedshift 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerRedshiftOutput}
     */
    gatewayCreateProducerRedshift(gatewayCreateProducerRedshift) {
      return this.gatewayCreateProducerRedshiftWithHttpInfo(gatewayCreateProducerRedshift)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerSnowflake} gatewayCreateProducerSnowflake 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerSnowflakeOutput} and HTTP response
     */
    gatewayCreateProducerSnowflakeWithHttpInfo(gatewayCreateProducerSnowflake) {
      let postBody = gatewayCreateProducerSnowflake;
      // verify the required parameter 'gatewayCreateProducerSnowflake' is set
      if (gatewayCreateProducerSnowflake === undefined || gatewayCreateProducerSnowflake === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerSnowflake' when calling gatewayCreateProducerSnowflake");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerSnowflakeOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-snowflake', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerSnowflake} gatewayCreateProducerSnowflake 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerSnowflakeOutput}
     */
    gatewayCreateProducerSnowflake(gatewayCreateProducerSnowflake) {
      return this.gatewayCreateProducerSnowflakeWithHttpInfo(gatewayCreateProducerSnowflake)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerVenafi} gatewayCreateProducerVenafi 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerVenafiOutput} and HTTP response
     */
    gatewayCreateProducerVenafiWithHttpInfo(gatewayCreateProducerVenafi) {
      let postBody = gatewayCreateProducerVenafi;
      // verify the required parameter 'gatewayCreateProducerVenafi' is set
      if (gatewayCreateProducerVenafi === undefined || gatewayCreateProducerVenafi === null) {
        throw new Error("Missing the required parameter 'gatewayCreateProducerVenafi' when calling gatewayCreateProducerVenafi");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerVenafiOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-certificate-automation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerVenafi} gatewayCreateProducerVenafi 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerVenafiOutput}
     */
    gatewayCreateProducerVenafi(gatewayCreateProducerVenafi) {
      return this.gatewayCreateProducerVenafiWithHttpInfo(gatewayCreateProducerVenafi)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayDeleteAllowedAccess} gatewayDeleteAllowedAccess 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayDeleteAllowedAccessOutput} and HTTP response
     */
    gatewayDeleteAllowedAccessWithHttpInfo(gatewayDeleteAllowedAccess) {
      let postBody = gatewayDeleteAllowedAccess;
      // verify the required parameter 'gatewayDeleteAllowedAccess' is set
      if (gatewayDeleteAllowedAccess === undefined || gatewayDeleteAllowedAccess === null) {
        throw new Error("Missing the required parameter 'gatewayDeleteAllowedAccess' when calling gatewayDeleteAllowedAccess");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayDeleteAllowedAccessOutput;
      return this.apiClient.callApi(
        '/gateway-delete-allowed-access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayDeleteAllowedAccess} gatewayDeleteAllowedAccess 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayDeleteAllowedAccessOutput}
     */
    gatewayDeleteAllowedAccess(gatewayDeleteAllowedAccess) {
      return this.gatewayDeleteAllowedAccessWithHttpInfo(gatewayDeleteAllowedAccess)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayDeleteK8SAuthConfig} gatewayDeleteK8SAuthConfig 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayDeleteK8SAuthConfigOutput} and HTTP response
     */
    gatewayDeleteK8SAuthConfigWithHttpInfo(gatewayDeleteK8SAuthConfig) {
      let postBody = gatewayDeleteK8SAuthConfig;
      // verify the required parameter 'gatewayDeleteK8SAuthConfig' is set
      if (gatewayDeleteK8SAuthConfig === undefined || gatewayDeleteK8SAuthConfig === null) {
        throw new Error("Missing the required parameter 'gatewayDeleteK8SAuthConfig' when calling gatewayDeleteK8SAuthConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayDeleteK8SAuthConfigOutput;
      return this.apiClient.callApi(
        '/gateway-delete-k8s-auth-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayDeleteK8SAuthConfig} gatewayDeleteK8SAuthConfig 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayDeleteK8SAuthConfigOutput}
     */
    gatewayDeleteK8SAuthConfig(gatewayDeleteK8SAuthConfig) {
      return this.gatewayDeleteK8SAuthConfigWithHttpInfo(gatewayDeleteK8SAuthConfig)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayDeleteMigration} gatewayDeleteMigration 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigrationDeleteOutput} and HTTP response
     */
    gatewayDeleteMigrationWithHttpInfo(gatewayDeleteMigration) {
      let postBody = gatewayDeleteMigration;
      // verify the required parameter 'gatewayDeleteMigration' is set
      if (gatewayDeleteMigration === undefined || gatewayDeleteMigration === null) {
        throw new Error("Missing the required parameter 'gatewayDeleteMigration' when calling gatewayDeleteMigration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayMigrationDeleteOutput;
      return this.apiClient.callApi(
        '/gateway-delete-migration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayDeleteMigration} gatewayDeleteMigration 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigrationDeleteOutput}
     */
    gatewayDeleteMigration(gatewayDeleteMigration) {
      return this.gatewayDeleteMigrationWithHttpInfo(gatewayDeleteMigration)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayDeleteProducer} gatewayDeleteProducer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayDeleteProducerOutput} and HTTP response
     */
    gatewayDeleteProducerWithHttpInfo(gatewayDeleteProducer) {
      let postBody = gatewayDeleteProducer;
      // verify the required parameter 'gatewayDeleteProducer' is set
      if (gatewayDeleteProducer === undefined || gatewayDeleteProducer === null) {
        throw new Error("Missing the required parameter 'gatewayDeleteProducer' when calling gatewayDeleteProducer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayDeleteProducerOutput;
      return this.apiClient.callApi(
        '/gateway-delete-producer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayDeleteProducer} gatewayDeleteProducer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayDeleteProducerOutput}
     */
    gatewayDeleteProducer(gatewayDeleteProducer) {
      return this.gatewayDeleteProducerWithHttpInfo(gatewayDeleteProducer)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayDownloadCustomerFragments} gatewayDownloadCustomerFragments 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayDownloadCustomerFragmentsOutput} and HTTP response
     */
    gatewayDownloadCustomerFragmentsWithHttpInfo(gatewayDownloadCustomerFragments) {
      let postBody = gatewayDownloadCustomerFragments;
      // verify the required parameter 'gatewayDownloadCustomerFragments' is set
      if (gatewayDownloadCustomerFragments === undefined || gatewayDownloadCustomerFragments === null) {
        throw new Error("Missing the required parameter 'gatewayDownloadCustomerFragments' when calling gatewayDownloadCustomerFragments");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayDownloadCustomerFragmentsOutput;
      return this.apiClient.callApi(
        '/gateway-download-customer-fragments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayDownloadCustomerFragments} gatewayDownloadCustomerFragments 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayDownloadCustomerFragmentsOutput}
     */
    gatewayDownloadCustomerFragments(gatewayDownloadCustomerFragments) {
      return this.gatewayDownloadCustomerFragmentsWithHttpInfo(gatewayDownloadCustomerFragments)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayGetAllowedAccess} gatewayGetAllowedAccess 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AllowedAccess} and HTTP response
     */
    gatewayGetAllowedAccessWithHttpInfo(gatewayGetAllowedAccess) {
      let postBody = gatewayGetAllowedAccess;
      // verify the required parameter 'gatewayGetAllowedAccess' is set
      if (gatewayGetAllowedAccess === undefined || gatewayGetAllowedAccess === null) {
        throw new Error("Missing the required parameter 'gatewayGetAllowedAccess' when calling gatewayGetAllowedAccess");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AllowedAccess;
      return this.apiClient.callApi(
        '/gateway-get-allowed-access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayGetAllowedAccess} gatewayGetAllowedAccess 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AllowedAccess}
     */
    gatewayGetAllowedAccess(gatewayGetAllowedAccess) {
      return this.gatewayGetAllowedAccessWithHttpInfo(gatewayGetAllowedAccess)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayGetCache} gatewayGetCache 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CacheConfigPart} and HTTP response
     */
    gatewayGetCacheWithHttpInfo(gatewayGetCache) {
      let postBody = gatewayGetCache;
      // verify the required parameter 'gatewayGetCache' is set
      if (gatewayGetCache === undefined || gatewayGetCache === null) {
        throw new Error("Missing the required parameter 'gatewayGetCache' when calling gatewayGetCache");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CacheConfigPart;
      return this.apiClient.callApi(
        '/gateway-get-cache', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayGetCache} gatewayGetCache 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CacheConfigPart}
     */
    gatewayGetCache(gatewayGetCache) {
      return this.gatewayGetCacheWithHttpInfo(gatewayGetCache)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayGetConfig} gatewayGetConfig 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AkeylessGatewayConfig} and HTTP response
     */
    gatewayGetConfigWithHttpInfo(gatewayGetConfig) {
      let postBody = gatewayGetConfig;
      // verify the required parameter 'gatewayGetConfig' is set
      if (gatewayGetConfig === undefined || gatewayGetConfig === null) {
        throw new Error("Missing the required parameter 'gatewayGetConfig' when calling gatewayGetConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AkeylessGatewayConfig;
      return this.apiClient.callApi(
        '/gateway-get-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayGetConfig} gatewayGetConfig 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AkeylessGatewayConfig}
     */
    gatewayGetConfig(gatewayGetConfig) {
      return this.gatewayGetConfigWithHttpInfo(gatewayGetConfig)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayGetDefaults} gatewayGetDefaults 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayGetDefaultsOutput} and HTTP response
     */
    gatewayGetDefaultsWithHttpInfo(gatewayGetDefaults) {
      let postBody = gatewayGetDefaults;
      // verify the required parameter 'gatewayGetDefaults' is set
      if (gatewayGetDefaults === undefined || gatewayGetDefaults === null) {
        throw new Error("Missing the required parameter 'gatewayGetDefaults' when calling gatewayGetDefaults");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayGetDefaultsOutput;
      return this.apiClient.callApi(
        '/gateway-get-defaults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayGetDefaults} gatewayGetDefaults 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayGetDefaultsOutput}
     */
    gatewayGetDefaults(gatewayGetDefaults) {
      return this.gatewayGetDefaultsWithHttpInfo(gatewayGetDefaults)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayGetK8SAuthConfig} gatewayGetK8SAuthConfig 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayGetK8SAuthConfigOutput} and HTTP response
     */
    gatewayGetK8SAuthConfigWithHttpInfo(gatewayGetK8SAuthConfig) {
      let postBody = gatewayGetK8SAuthConfig;
      // verify the required parameter 'gatewayGetK8SAuthConfig' is set
      if (gatewayGetK8SAuthConfig === undefined || gatewayGetK8SAuthConfig === null) {
        throw new Error("Missing the required parameter 'gatewayGetK8SAuthConfig' when calling gatewayGetK8SAuthConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayGetK8SAuthConfigOutput;
      return this.apiClient.callApi(
        '/gateway-get-k8s-auth-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayGetK8SAuthConfig} gatewayGetK8SAuthConfig 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayGetK8SAuthConfigOutput}
     */
    gatewayGetK8SAuthConfig(gatewayGetK8SAuthConfig) {
      return this.gatewayGetK8SAuthConfigWithHttpInfo(gatewayGetK8SAuthConfig)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayGetLdapAuthConfig} gatewayGetLdapAuthConfig 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayGetLdapAuthConfigOutput} and HTTP response
     */
    gatewayGetLdapAuthConfigWithHttpInfo(gatewayGetLdapAuthConfig) {
      let postBody = gatewayGetLdapAuthConfig;
      // verify the required parameter 'gatewayGetLdapAuthConfig' is set
      if (gatewayGetLdapAuthConfig === undefined || gatewayGetLdapAuthConfig === null) {
        throw new Error("Missing the required parameter 'gatewayGetLdapAuthConfig' when calling gatewayGetLdapAuthConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayGetLdapAuthConfigOutput;
      return this.apiClient.callApi(
        '/gateway-get-ldap-auth-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayGetLdapAuthConfig} gatewayGetLdapAuthConfig 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayGetLdapAuthConfigOutput}
     */
    gatewayGetLdapAuthConfig(gatewayGetLdapAuthConfig) {
      return this.gatewayGetLdapAuthConfigWithHttpInfo(gatewayGetLdapAuthConfig)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayGetLogForwarding} gatewayGetLogForwarding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogForwardingConfigPart} and HTTP response
     */
    gatewayGetLogForwardingWithHttpInfo(gatewayGetLogForwarding) {
      let postBody = gatewayGetLogForwarding;
      // verify the required parameter 'gatewayGetLogForwarding' is set
      if (gatewayGetLogForwarding === undefined || gatewayGetLogForwarding === null) {
        throw new Error("Missing the required parameter 'gatewayGetLogForwarding' when calling gatewayGetLogForwarding");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogForwardingConfigPart;
      return this.apiClient.callApi(
        '/gateway-get-log-forwarding', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayGetLogForwarding} gatewayGetLogForwarding 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogForwardingConfigPart}
     */
    gatewayGetLogForwarding(gatewayGetLogForwarding) {
      return this.gatewayGetLogForwardingWithHttpInfo(gatewayGetLogForwarding)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayGetMigration} gatewayGetMigration 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigrationGetOutput} and HTTP response
     */
    gatewayGetMigrationWithHttpInfo(gatewayGetMigration) {
      let postBody = gatewayGetMigration;
      // verify the required parameter 'gatewayGetMigration' is set
      if (gatewayGetMigration === undefined || gatewayGetMigration === null) {
        throw new Error("Missing the required parameter 'gatewayGetMigration' when calling gatewayGetMigration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayMigrationGetOutput;
      return this.apiClient.callApi(
        '/gateway-get-migration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayGetMigration} gatewayGetMigration 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigrationGetOutput}
     */
    gatewayGetMigration(gatewayGetMigration) {
      return this.gatewayGetMigrationWithHttpInfo(gatewayGetMigration)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayGetProducer} gatewayGetProducer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DSProducerDetails} and HTTP response
     */
    gatewayGetProducerWithHttpInfo(gatewayGetProducer) {
      let postBody = gatewayGetProducer;
      // verify the required parameter 'gatewayGetProducer' is set
      if (gatewayGetProducer === undefined || gatewayGetProducer === null) {
        throw new Error("Missing the required parameter 'gatewayGetProducer' when calling gatewayGetProducer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DSProducerDetails;
      return this.apiClient.callApi(
        '/gateway-get-producer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayGetProducer} gatewayGetProducer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DSProducerDetails}
     */
    gatewayGetProducer(gatewayGetProducer) {
      return this.gatewayGetProducerWithHttpInfo(gatewayGetProducer)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayGetRemoteAccess} gatewayGetRemoteAccess 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BastionConfigReplyObj} and HTTP response
     */
    gatewayGetRemoteAccessWithHttpInfo(gatewayGetRemoteAccess) {
      let postBody = gatewayGetRemoteAccess;
      // verify the required parameter 'gatewayGetRemoteAccess' is set
      if (gatewayGetRemoteAccess === undefined || gatewayGetRemoteAccess === null) {
        throw new Error("Missing the required parameter 'gatewayGetRemoteAccess' when calling gatewayGetRemoteAccess");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BastionConfigReplyObj;
      return this.apiClient.callApi(
        '/gateway-get-remote-access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayGetRemoteAccess} gatewayGetRemoteAccess 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BastionConfigReplyObj}
     */
    gatewayGetRemoteAccess(gatewayGetRemoteAccess) {
      return this.gatewayGetRemoteAccessWithHttpInfo(gatewayGetRemoteAccess)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayGetTmpUsers} gatewayGetTmpUsers 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TmpUserData>} and HTTP response
     */
    gatewayGetTmpUsersWithHttpInfo(gatewayGetTmpUsers) {
      let postBody = gatewayGetTmpUsers;
      // verify the required parameter 'gatewayGetTmpUsers' is set
      if (gatewayGetTmpUsers === undefined || gatewayGetTmpUsers === null) {
        throw new Error("Missing the required parameter 'gatewayGetTmpUsers' when calling gatewayGetTmpUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TmpUserData];
      return this.apiClient.callApi(
        '/gateway-get-producer-tmp-creds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayGetTmpUsers} gatewayGetTmpUsers 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TmpUserData>}
     */
    gatewayGetTmpUsers(gatewayGetTmpUsers) {
      return this.gatewayGetTmpUsersWithHttpInfo(gatewayGetTmpUsers)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayListCustomerFragments} gatewayListCustomerFragments 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: Object}>} and HTTP response
     */
    gatewayListCustomerFragmentsWithHttpInfo(gatewayListCustomerFragments) {
      let postBody = gatewayListCustomerFragments;
      // verify the required parameter 'gatewayListCustomerFragments' is set
      if (gatewayListCustomerFragments === undefined || gatewayListCustomerFragments === null) {
        throw new Error("Missing the required parameter 'gatewayListCustomerFragments' when calling gatewayListCustomerFragments");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/gateway-list-customer-fragments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayListCustomerFragments} gatewayListCustomerFragments 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: Object}>}
     */
    gatewayListCustomerFragments(gatewayListCustomerFragments) {
      return this.gatewayListCustomerFragmentsWithHttpInfo(gatewayListCustomerFragments)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayListMigration} gatewayListMigration 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigrationListOutput} and HTTP response
     */
    gatewayListMigrationWithHttpInfo(gatewayListMigration) {
      let postBody = gatewayListMigration;
      // verify the required parameter 'gatewayListMigration' is set
      if (gatewayListMigration === undefined || gatewayListMigration === null) {
        throw new Error("Missing the required parameter 'gatewayListMigration' when calling gatewayListMigration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayMigrationListOutput;
      return this.apiClient.callApi(
        '/gateway-list-migration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayListMigration} gatewayListMigration 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigrationListOutput}
     */
    gatewayListMigration(gatewayListMigration) {
      return this.gatewayListMigrationWithHttpInfo(gatewayListMigration)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayListProducers} gatewayListProducers 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProducersListReplyObj} and HTTP response
     */
    gatewayListProducersWithHttpInfo(gatewayListProducers) {
      let postBody = gatewayListProducers;
      // verify the required parameter 'gatewayListProducers' is set
      if (gatewayListProducers === undefined || gatewayListProducers === null) {
        throw new Error("Missing the required parameter 'gatewayListProducers' when calling gatewayListProducers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetProducersListReplyObj;
      return this.apiClient.callApi(
        '/gateway-list-producers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayListProducers} gatewayListProducers 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProducersListReplyObj}
     */
    gatewayListProducers(gatewayListProducers) {
      return this.gatewayListProducersWithHttpInfo(gatewayListProducers)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayListRotatedSecrets} gatewayListRotatedSecrets 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListItemsOutput} and HTTP response
     */
    gatewayListRotatedSecretsWithHttpInfo(gatewayListRotatedSecrets) {
      let postBody = gatewayListRotatedSecrets;
      // verify the required parameter 'gatewayListRotatedSecrets' is set
      if (gatewayListRotatedSecrets === undefined || gatewayListRotatedSecrets === null) {
        throw new Error("Missing the required parameter 'gatewayListRotatedSecrets' when calling gatewayListRotatedSecrets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListItemsOutput;
      return this.apiClient.callApi(
        '/gateway-list-rotated-secrets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayListRotatedSecrets} gatewayListRotatedSecrets 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListItemsOutput}
     */
    gatewayListRotatedSecrets(gatewayListRotatedSecrets) {
      return this.gatewayListRotatedSecretsWithHttpInfo(gatewayListRotatedSecrets)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GatewayMigratePersonalItems} [gatewayMigratePersonalItems] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigratePersonalItemsOutput} and HTTP response
     */
    gatewayMigratePersonalItemsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['gatewayMigratePersonalItems'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayMigratePersonalItemsOutput;
      return this.apiClient.callApi(
        '/gateway-migrate-personal-items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GatewayMigratePersonalItems} opts.gatewayMigratePersonalItems 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigratePersonalItemsOutput}
     */
    gatewayMigratePersonalItems(opts) {
      return this.gatewayMigratePersonalItemsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayRevokeTmpUsers} gatewayRevokeTmpUsers 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    gatewayRevokeTmpUsersWithHttpInfo(gatewayRevokeTmpUsers) {
      let postBody = gatewayRevokeTmpUsers;
      // verify the required parameter 'gatewayRevokeTmpUsers' is set
      if (gatewayRevokeTmpUsers === undefined || gatewayRevokeTmpUsers === null) {
        throw new Error("Missing the required parameter 'gatewayRevokeTmpUsers' when calling gatewayRevokeTmpUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/gateway-revoke-producer-tmp-creds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayRevokeTmpUsers} gatewayRevokeTmpUsers 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    gatewayRevokeTmpUsers(gatewayRevokeTmpUsers) {
      return this.gatewayRevokeTmpUsersWithHttpInfo(gatewayRevokeTmpUsers)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayStartProducer} gatewayStartProducer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayStartProducerOutput} and HTTP response
     */
    gatewayStartProducerWithHttpInfo(gatewayStartProducer) {
      let postBody = gatewayStartProducer;
      // verify the required parameter 'gatewayStartProducer' is set
      if (gatewayStartProducer === undefined || gatewayStartProducer === null) {
        throw new Error("Missing the required parameter 'gatewayStartProducer' when calling gatewayStartProducer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayStartProducerOutput;
      return this.apiClient.callApi(
        '/gateway-start-producer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayStartProducer} gatewayStartProducer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayStartProducerOutput}
     */
    gatewayStartProducer(gatewayStartProducer) {
      return this.gatewayStartProducerWithHttpInfo(gatewayStartProducer)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayStatusMigration} gatewayStatusMigration 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MigrationStatusReplyObj} and HTTP response
     */
    gatewayStatusMigrationWithHttpInfo(gatewayStatusMigration) {
      let postBody = gatewayStatusMigration;
      // verify the required parameter 'gatewayStatusMigration' is set
      if (gatewayStatusMigration === undefined || gatewayStatusMigration === null) {
        throw new Error("Missing the required parameter 'gatewayStatusMigration' when calling gatewayStatusMigration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MigrationStatusReplyObj;
      return this.apiClient.callApi(
        '/gateway-migration-status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayStatusMigration} gatewayStatusMigration 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MigrationStatusReplyObj}
     */
    gatewayStatusMigration(gatewayStatusMigration) {
      return this.gatewayStatusMigrationWithHttpInfo(gatewayStatusMigration)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayStopProducer} gatewayStopProducer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayStopProducerOutput} and HTTP response
     */
    gatewayStopProducerWithHttpInfo(gatewayStopProducer) {
      let postBody = gatewayStopProducer;
      // verify the required parameter 'gatewayStopProducer' is set
      if (gatewayStopProducer === undefined || gatewayStopProducer === null) {
        throw new Error("Missing the required parameter 'gatewayStopProducer' when calling gatewayStopProducer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayStopProducerOutput;
      return this.apiClient.callApi(
        '/gateway-stop-producer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayStopProducer} gatewayStopProducer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayStopProducerOutput}
     */
    gatewayStopProducer(gatewayStopProducer) {
      return this.gatewayStopProducerWithHttpInfo(gatewayStopProducer)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewaySyncMigration} gatewaySyncMigration 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigrationSyncOutput} and HTTP response
     */
    gatewaySyncMigrationWithHttpInfo(gatewaySyncMigration) {
      let postBody = gatewaySyncMigration;
      // verify the required parameter 'gatewaySyncMigration' is set
      if (gatewaySyncMigration === undefined || gatewaySyncMigration === null) {
        throw new Error("Missing the required parameter 'gatewaySyncMigration' when calling gatewaySyncMigration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayMigrationSyncOutput;
      return this.apiClient.callApi(
        '/gateway-sync-migration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewaySyncMigration} gatewaySyncMigration 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigrationSyncOutput}
     */
    gatewaySyncMigration(gatewaySyncMigration) {
      return this.gatewaySyncMigrationWithHttpInfo(gatewaySyncMigration)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateAllowedAccess} gatewayUpdateAllowedAccess 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AllowedAccess} and HTTP response
     */
    gatewayUpdateAllowedAccessWithHttpInfo(gatewayUpdateAllowedAccess) {
      let postBody = gatewayUpdateAllowedAccess;
      // verify the required parameter 'gatewayUpdateAllowedAccess' is set
      if (gatewayUpdateAllowedAccess === undefined || gatewayUpdateAllowedAccess === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateAllowedAccess' when calling gatewayUpdateAllowedAccess");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AllowedAccess;
      return this.apiClient.callApi(
        '/gateway-update-allowed-access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateAllowedAccess} gatewayUpdateAllowedAccess 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AllowedAccess}
     */
    gatewayUpdateAllowedAccess(gatewayUpdateAllowedAccess) {
      return this.gatewayUpdateAllowedAccessWithHttpInfo(gatewayUpdateAllowedAccess)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateCache} gatewayUpdateCache 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateOutput} and HTTP response
     */
    gatewayUpdateCacheWithHttpInfo(gatewayUpdateCache) {
      let postBody = gatewayUpdateCache;
      // verify the required parameter 'gatewayUpdateCache' is set
      if (gatewayUpdateCache === undefined || gatewayUpdateCache === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateCache' when calling gatewayUpdateCache");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateOutput;
      return this.apiClient.callApi(
        '/gateway-update-cache', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateCache} gatewayUpdateCache 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateOutput}
     */
    gatewayUpdateCache(gatewayUpdateCache) {
      return this.gatewayUpdateCacheWithHttpInfo(gatewayUpdateCache)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateDefaults} gatewayUpdateDefaults 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateOutput} and HTTP response
     */
    gatewayUpdateDefaultsWithHttpInfo(gatewayUpdateDefaults) {
      let postBody = gatewayUpdateDefaults;
      // verify the required parameter 'gatewayUpdateDefaults' is set
      if (gatewayUpdateDefaults === undefined || gatewayUpdateDefaults === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateDefaults' when calling gatewayUpdateDefaults");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateOutput;
      return this.apiClient.callApi(
        '/gateway-update-defaults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateDefaults} gatewayUpdateDefaults 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateOutput}
     */
    gatewayUpdateDefaults(gatewayUpdateDefaults) {
      return this.gatewayUpdateDefaultsWithHttpInfo(gatewayUpdateDefaults)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateItem} gatewayUpdateItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateItemOutput} and HTTP response
     */
    gatewayUpdateItemWithHttpInfo(gatewayUpdateItem) {
      let postBody = gatewayUpdateItem;
      // verify the required parameter 'gatewayUpdateItem' is set
      if (gatewayUpdateItem === undefined || gatewayUpdateItem === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateItem' when calling gatewayUpdateItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateItemOutput;
      return this.apiClient.callApi(
        '/gateway-update-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateItem} gatewayUpdateItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateItemOutput}
     */
    gatewayUpdateItem(gatewayUpdateItem) {
      return this.gatewayUpdateItemWithHttpInfo(gatewayUpdateItem)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateK8SAuthConfig} gatewayUpdateK8SAuthConfig 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateK8SAuthConfigOutput} and HTTP response
     */
    gatewayUpdateK8SAuthConfigWithHttpInfo(gatewayUpdateK8SAuthConfig) {
      let postBody = gatewayUpdateK8SAuthConfig;
      // verify the required parameter 'gatewayUpdateK8SAuthConfig' is set
      if (gatewayUpdateK8SAuthConfig === undefined || gatewayUpdateK8SAuthConfig === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateK8SAuthConfig' when calling gatewayUpdateK8SAuthConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateK8SAuthConfigOutput;
      return this.apiClient.callApi(
        '/gateway-update-k8s-auth-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateK8SAuthConfig} gatewayUpdateK8SAuthConfig 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateK8SAuthConfigOutput}
     */
    gatewayUpdateK8SAuthConfig(gatewayUpdateK8SAuthConfig) {
      return this.gatewayUpdateK8SAuthConfigWithHttpInfo(gatewayUpdateK8SAuthConfig)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateLdapAuthConfig} gatewayUpdateLdapAuthConfig 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLdapAuthConfigOutput} and HTTP response
     */
    gatewayUpdateLdapAuthConfigWithHttpInfo(gatewayUpdateLdapAuthConfig) {
      let postBody = gatewayUpdateLdapAuthConfig;
      // verify the required parameter 'gatewayUpdateLdapAuthConfig' is set
      if (gatewayUpdateLdapAuthConfig === undefined || gatewayUpdateLdapAuthConfig === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateLdapAuthConfig' when calling gatewayUpdateLdapAuthConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLdapAuthConfigOutput;
      return this.apiClient.callApi(
        '/gateway-update-ldap-auth-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateLdapAuthConfig} gatewayUpdateLdapAuthConfig 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLdapAuthConfigOutput}
     */
    gatewayUpdateLdapAuthConfig(gatewayUpdateLdapAuthConfig) {
      return this.gatewayUpdateLdapAuthConfigWithHttpInfo(gatewayUpdateLdapAuthConfig)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateLogForwardingAwsS3} gatewayUpdateLogForwardingAwsS3 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gatewayUpdateLogForwardingAwsS3WithHttpInfo(gatewayUpdateLogForwardingAwsS3) {
      let postBody = gatewayUpdateLogForwardingAwsS3;
      // verify the required parameter 'gatewayUpdateLogForwardingAwsS3' is set
      if (gatewayUpdateLogForwardingAwsS3 === undefined || gatewayUpdateLogForwardingAwsS3 === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateLogForwardingAwsS3' when calling gatewayUpdateLogForwardingAwsS3");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-log-forwarding-aws-s3', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateLogForwardingAwsS3} gatewayUpdateLogForwardingAwsS3 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gatewayUpdateLogForwardingAwsS3(gatewayUpdateLogForwardingAwsS3) {
      return this.gatewayUpdateLogForwardingAwsS3WithHttpInfo(gatewayUpdateLogForwardingAwsS3)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateLogForwardingAzureAnalytics} gatewayUpdateLogForwardingAzureAnalytics 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gatewayUpdateLogForwardingAzureAnalyticsWithHttpInfo(gatewayUpdateLogForwardingAzureAnalytics) {
      let postBody = gatewayUpdateLogForwardingAzureAnalytics;
      // verify the required parameter 'gatewayUpdateLogForwardingAzureAnalytics' is set
      if (gatewayUpdateLogForwardingAzureAnalytics === undefined || gatewayUpdateLogForwardingAzureAnalytics === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateLogForwardingAzureAnalytics' when calling gatewayUpdateLogForwardingAzureAnalytics");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-log-forwarding-azure-analytics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateLogForwardingAzureAnalytics} gatewayUpdateLogForwardingAzureAnalytics 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gatewayUpdateLogForwardingAzureAnalytics(gatewayUpdateLogForwardingAzureAnalytics) {
      return this.gatewayUpdateLogForwardingAzureAnalyticsWithHttpInfo(gatewayUpdateLogForwardingAzureAnalytics)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateLogForwardingDatadog} gatewayUpdateLogForwardingDatadog 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gatewayUpdateLogForwardingDatadogWithHttpInfo(gatewayUpdateLogForwardingDatadog) {
      let postBody = gatewayUpdateLogForwardingDatadog;
      // verify the required parameter 'gatewayUpdateLogForwardingDatadog' is set
      if (gatewayUpdateLogForwardingDatadog === undefined || gatewayUpdateLogForwardingDatadog === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateLogForwardingDatadog' when calling gatewayUpdateLogForwardingDatadog");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-log-forwarding-datadog', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateLogForwardingDatadog} gatewayUpdateLogForwardingDatadog 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gatewayUpdateLogForwardingDatadog(gatewayUpdateLogForwardingDatadog) {
      return this.gatewayUpdateLogForwardingDatadogWithHttpInfo(gatewayUpdateLogForwardingDatadog)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateLogForwardingElasticsearch} gatewayUpdateLogForwardingElasticsearch 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gatewayUpdateLogForwardingElasticsearchWithHttpInfo(gatewayUpdateLogForwardingElasticsearch) {
      let postBody = gatewayUpdateLogForwardingElasticsearch;
      // verify the required parameter 'gatewayUpdateLogForwardingElasticsearch' is set
      if (gatewayUpdateLogForwardingElasticsearch === undefined || gatewayUpdateLogForwardingElasticsearch === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateLogForwardingElasticsearch' when calling gatewayUpdateLogForwardingElasticsearch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-log-forwarding-elasticsearch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateLogForwardingElasticsearch} gatewayUpdateLogForwardingElasticsearch 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gatewayUpdateLogForwardingElasticsearch(gatewayUpdateLogForwardingElasticsearch) {
      return this.gatewayUpdateLogForwardingElasticsearchWithHttpInfo(gatewayUpdateLogForwardingElasticsearch)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateLogForwardingGoogleChronicle} gatewayUpdateLogForwardingGoogleChronicle 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gatewayUpdateLogForwardingGoogleChronicleWithHttpInfo(gatewayUpdateLogForwardingGoogleChronicle) {
      let postBody = gatewayUpdateLogForwardingGoogleChronicle;
      // verify the required parameter 'gatewayUpdateLogForwardingGoogleChronicle' is set
      if (gatewayUpdateLogForwardingGoogleChronicle === undefined || gatewayUpdateLogForwardingGoogleChronicle === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateLogForwardingGoogleChronicle' when calling gatewayUpdateLogForwardingGoogleChronicle");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-log-forwarding-google-chronicle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateLogForwardingGoogleChronicle} gatewayUpdateLogForwardingGoogleChronicle 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gatewayUpdateLogForwardingGoogleChronicle(gatewayUpdateLogForwardingGoogleChronicle) {
      return this.gatewayUpdateLogForwardingGoogleChronicleWithHttpInfo(gatewayUpdateLogForwardingGoogleChronicle)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateLogForwardingLogstash} gatewayUpdateLogForwardingLogstash 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gatewayUpdateLogForwardingLogstashWithHttpInfo(gatewayUpdateLogForwardingLogstash) {
      let postBody = gatewayUpdateLogForwardingLogstash;
      // verify the required parameter 'gatewayUpdateLogForwardingLogstash' is set
      if (gatewayUpdateLogForwardingLogstash === undefined || gatewayUpdateLogForwardingLogstash === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateLogForwardingLogstash' when calling gatewayUpdateLogForwardingLogstash");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-log-forwarding-logstash', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateLogForwardingLogstash} gatewayUpdateLogForwardingLogstash 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gatewayUpdateLogForwardingLogstash(gatewayUpdateLogForwardingLogstash) {
      return this.gatewayUpdateLogForwardingLogstashWithHttpInfo(gatewayUpdateLogForwardingLogstash)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateLogForwardingLogzIo} gatewayUpdateLogForwardingLogzIo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gatewayUpdateLogForwardingLogzIoWithHttpInfo(gatewayUpdateLogForwardingLogzIo) {
      let postBody = gatewayUpdateLogForwardingLogzIo;
      // verify the required parameter 'gatewayUpdateLogForwardingLogzIo' is set
      if (gatewayUpdateLogForwardingLogzIo === undefined || gatewayUpdateLogForwardingLogzIo === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateLogForwardingLogzIo' when calling gatewayUpdateLogForwardingLogzIo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-log-forwarding-logz-io', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateLogForwardingLogzIo} gatewayUpdateLogForwardingLogzIo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gatewayUpdateLogForwardingLogzIo(gatewayUpdateLogForwardingLogzIo) {
      return this.gatewayUpdateLogForwardingLogzIoWithHttpInfo(gatewayUpdateLogForwardingLogzIo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateLogForwardingSplunk} gatewayUpdateLogForwardingSplunk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gatewayUpdateLogForwardingSplunkWithHttpInfo(gatewayUpdateLogForwardingSplunk) {
      let postBody = gatewayUpdateLogForwardingSplunk;
      // verify the required parameter 'gatewayUpdateLogForwardingSplunk' is set
      if (gatewayUpdateLogForwardingSplunk === undefined || gatewayUpdateLogForwardingSplunk === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateLogForwardingSplunk' when calling gatewayUpdateLogForwardingSplunk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-log-forwarding-splunk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateLogForwardingSplunk} gatewayUpdateLogForwardingSplunk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gatewayUpdateLogForwardingSplunk(gatewayUpdateLogForwardingSplunk) {
      return this.gatewayUpdateLogForwardingSplunkWithHttpInfo(gatewayUpdateLogForwardingSplunk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateLogForwardingStdout} gatewayUpdateLogForwardingStdout 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gatewayUpdateLogForwardingStdoutWithHttpInfo(gatewayUpdateLogForwardingStdout) {
      let postBody = gatewayUpdateLogForwardingStdout;
      // verify the required parameter 'gatewayUpdateLogForwardingStdout' is set
      if (gatewayUpdateLogForwardingStdout === undefined || gatewayUpdateLogForwardingStdout === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateLogForwardingStdout' when calling gatewayUpdateLogForwardingStdout");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-log-forwarding-stdout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateLogForwardingStdout} gatewayUpdateLogForwardingStdout 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gatewayUpdateLogForwardingStdout(gatewayUpdateLogForwardingStdout) {
      return this.gatewayUpdateLogForwardingStdoutWithHttpInfo(gatewayUpdateLogForwardingStdout)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateLogForwardingSumologic} gatewayUpdateLogForwardingSumologic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gatewayUpdateLogForwardingSumologicWithHttpInfo(gatewayUpdateLogForwardingSumologic) {
      let postBody = gatewayUpdateLogForwardingSumologic;
      // verify the required parameter 'gatewayUpdateLogForwardingSumologic' is set
      if (gatewayUpdateLogForwardingSumologic === undefined || gatewayUpdateLogForwardingSumologic === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateLogForwardingSumologic' when calling gatewayUpdateLogForwardingSumologic");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-log-forwarding-sumologic', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateLogForwardingSumologic} gatewayUpdateLogForwardingSumologic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gatewayUpdateLogForwardingSumologic(gatewayUpdateLogForwardingSumologic) {
      return this.gatewayUpdateLogForwardingSumologicWithHttpInfo(gatewayUpdateLogForwardingSumologic)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateLogForwardingSyslog} gatewayUpdateLogForwardingSyslog 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gatewayUpdateLogForwardingSyslogWithHttpInfo(gatewayUpdateLogForwardingSyslog) {
      let postBody = gatewayUpdateLogForwardingSyslog;
      // verify the required parameter 'gatewayUpdateLogForwardingSyslog' is set
      if (gatewayUpdateLogForwardingSyslog === undefined || gatewayUpdateLogForwardingSyslog === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateLogForwardingSyslog' when calling gatewayUpdateLogForwardingSyslog");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-log-forwarding-syslog', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateLogForwardingSyslog} gatewayUpdateLogForwardingSyslog 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gatewayUpdateLogForwardingSyslog(gatewayUpdateLogForwardingSyslog) {
      return this.gatewayUpdateLogForwardingSyslogWithHttpInfo(gatewayUpdateLogForwardingSyslog)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateMigration} gatewayUpdateMigration 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigrationUpdateOutput} and HTTP response
     */
    gatewayUpdateMigrationWithHttpInfo(gatewayUpdateMigration) {
      let postBody = gatewayUpdateMigration;
      // verify the required parameter 'gatewayUpdateMigration' is set
      if (gatewayUpdateMigration === undefined || gatewayUpdateMigration === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateMigration' when calling gatewayUpdateMigration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayMigrationUpdateOutput;
      return this.apiClient.callApi(
        '/gateway-update-migration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateMigration} gatewayUpdateMigration 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigrationUpdateOutput}
     */
    gatewayUpdateMigration(gatewayUpdateMigration) {
      return this.gatewayUpdateMigrationWithHttpInfo(gatewayUpdateMigration)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerArtifactory} gatewayUpdateProducerArtifactory 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerArtifactoryOutput} and HTTP response
     */
    gatewayUpdateProducerArtifactoryWithHttpInfo(gatewayUpdateProducerArtifactory) {
      let postBody = gatewayUpdateProducerArtifactory;
      // verify the required parameter 'gatewayUpdateProducerArtifactory' is set
      if (gatewayUpdateProducerArtifactory === undefined || gatewayUpdateProducerArtifactory === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerArtifactory' when calling gatewayUpdateProducerArtifactory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerArtifactoryOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-artifactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerArtifactory} gatewayUpdateProducerArtifactory 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerArtifactoryOutput}
     */
    gatewayUpdateProducerArtifactory(gatewayUpdateProducerArtifactory) {
      return this.gatewayUpdateProducerArtifactoryWithHttpInfo(gatewayUpdateProducerArtifactory)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerAws} gatewayUpdateProducerAws 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerAwsOutput} and HTTP response
     */
    gatewayUpdateProducerAwsWithHttpInfo(gatewayUpdateProducerAws) {
      let postBody = gatewayUpdateProducerAws;
      // verify the required parameter 'gatewayUpdateProducerAws' is set
      if (gatewayUpdateProducerAws === undefined || gatewayUpdateProducerAws === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerAws' when calling gatewayUpdateProducerAws");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerAwsOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-aws', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerAws} gatewayUpdateProducerAws 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerAwsOutput}
     */
    gatewayUpdateProducerAws(gatewayUpdateProducerAws) {
      return this.gatewayUpdateProducerAwsWithHttpInfo(gatewayUpdateProducerAws)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerAzure} gatewayUpdateProducerAzure 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerAzureOutput} and HTTP response
     */
    gatewayUpdateProducerAzureWithHttpInfo(gatewayUpdateProducerAzure) {
      let postBody = gatewayUpdateProducerAzure;
      // verify the required parameter 'gatewayUpdateProducerAzure' is set
      if (gatewayUpdateProducerAzure === undefined || gatewayUpdateProducerAzure === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerAzure' when calling gatewayUpdateProducerAzure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerAzureOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-azure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerAzure} gatewayUpdateProducerAzure 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerAzureOutput}
     */
    gatewayUpdateProducerAzure(gatewayUpdateProducerAzure) {
      return this.gatewayUpdateProducerAzureWithHttpInfo(gatewayUpdateProducerAzure)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerCassandra} gatewayUpdateProducerCassandra 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerCassandraOutput} and HTTP response
     */
    gatewayUpdateProducerCassandraWithHttpInfo(gatewayUpdateProducerCassandra) {
      let postBody = gatewayUpdateProducerCassandra;
      // verify the required parameter 'gatewayUpdateProducerCassandra' is set
      if (gatewayUpdateProducerCassandra === undefined || gatewayUpdateProducerCassandra === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerCassandra' when calling gatewayUpdateProducerCassandra");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerCassandraOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-cassandra', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerCassandra} gatewayUpdateProducerCassandra 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerCassandraOutput}
     */
    gatewayUpdateProducerCassandra(gatewayUpdateProducerCassandra) {
      return this.gatewayUpdateProducerCassandraWithHttpInfo(gatewayUpdateProducerCassandra)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerChef} gatewayUpdateProducerChef 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerChefOutput} and HTTP response
     */
    gatewayUpdateProducerChefWithHttpInfo(gatewayUpdateProducerChef) {
      let postBody = gatewayUpdateProducerChef;
      // verify the required parameter 'gatewayUpdateProducerChef' is set
      if (gatewayUpdateProducerChef === undefined || gatewayUpdateProducerChef === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerChef' when calling gatewayUpdateProducerChef");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerChefOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-chef', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerChef} gatewayUpdateProducerChef 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerChefOutput}
     */
    gatewayUpdateProducerChef(gatewayUpdateProducerChef) {
      return this.gatewayUpdateProducerChefWithHttpInfo(gatewayUpdateProducerChef)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GatewayUpdateProducerCustom} [gatewayUpdateProducerCustom] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerCustomOutput} and HTTP response
     */
    gatewayUpdateProducerCustomWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['gatewayUpdateProducerCustom'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerCustomOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-custom', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GatewayUpdateProducerCustom} opts.gatewayUpdateProducerCustom 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerCustomOutput}
     */
    gatewayUpdateProducerCustom(opts) {
      return this.gatewayUpdateProducerCustomWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerDockerhub} gatewayUpdateProducerDockerhub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerDockerhubOutput} and HTTP response
     */
    gatewayUpdateProducerDockerhubWithHttpInfo(gatewayUpdateProducerDockerhub) {
      let postBody = gatewayUpdateProducerDockerhub;
      // verify the required parameter 'gatewayUpdateProducerDockerhub' is set
      if (gatewayUpdateProducerDockerhub === undefined || gatewayUpdateProducerDockerhub === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerDockerhub' when calling gatewayUpdateProducerDockerhub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerDockerhubOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-dockerhub', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerDockerhub} gatewayUpdateProducerDockerhub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerDockerhubOutput}
     */
    gatewayUpdateProducerDockerhub(gatewayUpdateProducerDockerhub) {
      return this.gatewayUpdateProducerDockerhubWithHttpInfo(gatewayUpdateProducerDockerhub)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerEks} gatewayUpdateProducerEks 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerEksOutput} and HTTP response
     */
    gatewayUpdateProducerEksWithHttpInfo(gatewayUpdateProducerEks) {
      let postBody = gatewayUpdateProducerEks;
      // verify the required parameter 'gatewayUpdateProducerEks' is set
      if (gatewayUpdateProducerEks === undefined || gatewayUpdateProducerEks === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerEks' when calling gatewayUpdateProducerEks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerEksOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-eks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerEks} gatewayUpdateProducerEks 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerEksOutput}
     */
    gatewayUpdateProducerEks(gatewayUpdateProducerEks) {
      return this.gatewayUpdateProducerEksWithHttpInfo(gatewayUpdateProducerEks)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerGcp} gatewayUpdateProducerGcp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerGcpOutput} and HTTP response
     */
    gatewayUpdateProducerGcpWithHttpInfo(gatewayUpdateProducerGcp) {
      let postBody = gatewayUpdateProducerGcp;
      // verify the required parameter 'gatewayUpdateProducerGcp' is set
      if (gatewayUpdateProducerGcp === undefined || gatewayUpdateProducerGcp === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerGcp' when calling gatewayUpdateProducerGcp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerGcpOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-gcp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerGcp} gatewayUpdateProducerGcp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerGcpOutput}
     */
    gatewayUpdateProducerGcp(gatewayUpdateProducerGcp) {
      return this.gatewayUpdateProducerGcpWithHttpInfo(gatewayUpdateProducerGcp)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerGithub} gatewayUpdateProducerGithub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerGithubOutput} and HTTP response
     */
    gatewayUpdateProducerGithubWithHttpInfo(gatewayUpdateProducerGithub) {
      let postBody = gatewayUpdateProducerGithub;
      // verify the required parameter 'gatewayUpdateProducerGithub' is set
      if (gatewayUpdateProducerGithub === undefined || gatewayUpdateProducerGithub === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerGithub' when calling gatewayUpdateProducerGithub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerGithubOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-github', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerGithub} gatewayUpdateProducerGithub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerGithubOutput}
     */
    gatewayUpdateProducerGithub(gatewayUpdateProducerGithub) {
      return this.gatewayUpdateProducerGithubWithHttpInfo(gatewayUpdateProducerGithub)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerGke} gatewayUpdateProducerGke 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerGkeOutput} and HTTP response
     */
    gatewayUpdateProducerGkeWithHttpInfo(gatewayUpdateProducerGke) {
      let postBody = gatewayUpdateProducerGke;
      // verify the required parameter 'gatewayUpdateProducerGke' is set
      if (gatewayUpdateProducerGke === undefined || gatewayUpdateProducerGke === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerGke' when calling gatewayUpdateProducerGke");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerGkeOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-gke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerGke} gatewayUpdateProducerGke 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerGkeOutput}
     */
    gatewayUpdateProducerGke(gatewayUpdateProducerGke) {
      return this.gatewayUpdateProducerGkeWithHttpInfo(gatewayUpdateProducerGke)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerHanaDb} gatewayUpdateProducerHanaDb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerHanaDbOutput} and HTTP response
     */
    gatewayUpdateProducerHanaDbWithHttpInfo(gatewayUpdateProducerHanaDb) {
      let postBody = gatewayUpdateProducerHanaDb;
      // verify the required parameter 'gatewayUpdateProducerHanaDb' is set
      if (gatewayUpdateProducerHanaDb === undefined || gatewayUpdateProducerHanaDb === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerHanaDb' when calling gatewayUpdateProducerHanaDb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerHanaDbOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-hana', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerHanaDb} gatewayUpdateProducerHanaDb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerHanaDbOutput}
     */
    gatewayUpdateProducerHanaDb(gatewayUpdateProducerHanaDb) {
      return this.gatewayUpdateProducerHanaDbWithHttpInfo(gatewayUpdateProducerHanaDb)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerLdap} gatewayUpdateProducerLdap 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerLdapOutput} and HTTP response
     */
    gatewayUpdateProducerLdapWithHttpInfo(gatewayUpdateProducerLdap) {
      let postBody = gatewayUpdateProducerLdap;
      // verify the required parameter 'gatewayUpdateProducerLdap' is set
      if (gatewayUpdateProducerLdap === undefined || gatewayUpdateProducerLdap === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerLdap' when calling gatewayUpdateProducerLdap");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerLdapOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-ldap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerLdap} gatewayUpdateProducerLdap 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerLdapOutput}
     */
    gatewayUpdateProducerLdap(gatewayUpdateProducerLdap) {
      return this.gatewayUpdateProducerLdapWithHttpInfo(gatewayUpdateProducerLdap)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerMSSQL} gatewayUpdateProducerMSSQL 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerMSSQLOutput} and HTTP response
     */
    gatewayUpdateProducerMSSQLWithHttpInfo(gatewayUpdateProducerMSSQL) {
      let postBody = gatewayUpdateProducerMSSQL;
      // verify the required parameter 'gatewayUpdateProducerMSSQL' is set
      if (gatewayUpdateProducerMSSQL === undefined || gatewayUpdateProducerMSSQL === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerMSSQL' when calling gatewayUpdateProducerMSSQL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerMSSQLOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-mssql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerMSSQL} gatewayUpdateProducerMSSQL 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerMSSQLOutput}
     */
    gatewayUpdateProducerMSSQL(gatewayUpdateProducerMSSQL) {
      return this.gatewayUpdateProducerMSSQLWithHttpInfo(gatewayUpdateProducerMSSQL)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerMongo} gatewayUpdateProducerMongo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerMongoOutput} and HTTP response
     */
    gatewayUpdateProducerMongoWithHttpInfo(gatewayUpdateProducerMongo) {
      let postBody = gatewayUpdateProducerMongo;
      // verify the required parameter 'gatewayUpdateProducerMongo' is set
      if (gatewayUpdateProducerMongo === undefined || gatewayUpdateProducerMongo === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerMongo' when calling gatewayUpdateProducerMongo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerMongoOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-mongo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerMongo} gatewayUpdateProducerMongo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerMongoOutput}
     */
    gatewayUpdateProducerMongo(gatewayUpdateProducerMongo) {
      return this.gatewayUpdateProducerMongoWithHttpInfo(gatewayUpdateProducerMongo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerMySQL} gatewayUpdateProducerMySQL 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerMySQLOutput} and HTTP response
     */
    gatewayUpdateProducerMySQLWithHttpInfo(gatewayUpdateProducerMySQL) {
      let postBody = gatewayUpdateProducerMySQL;
      // verify the required parameter 'gatewayUpdateProducerMySQL' is set
      if (gatewayUpdateProducerMySQL === undefined || gatewayUpdateProducerMySQL === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerMySQL' when calling gatewayUpdateProducerMySQL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerMySQLOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-mysql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerMySQL} gatewayUpdateProducerMySQL 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerMySQLOutput}
     */
    gatewayUpdateProducerMySQL(gatewayUpdateProducerMySQL) {
      return this.gatewayUpdateProducerMySQLWithHttpInfo(gatewayUpdateProducerMySQL)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerNativeK8S} gatewayUpdateProducerNativeK8S 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerNativeK8SOutput} and HTTP response
     */
    gatewayUpdateProducerNativeK8SWithHttpInfo(gatewayUpdateProducerNativeK8S) {
      let postBody = gatewayUpdateProducerNativeK8S;
      // verify the required parameter 'gatewayUpdateProducerNativeK8S' is set
      if (gatewayUpdateProducerNativeK8S === undefined || gatewayUpdateProducerNativeK8S === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerNativeK8S' when calling gatewayUpdateProducerNativeK8S");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerNativeK8SOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-k8s', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerNativeK8S} gatewayUpdateProducerNativeK8S 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerNativeK8SOutput}
     */
    gatewayUpdateProducerNativeK8S(gatewayUpdateProducerNativeK8S) {
      return this.gatewayUpdateProducerNativeK8SWithHttpInfo(gatewayUpdateProducerNativeK8S)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerOracleDb} gatewayUpdateProducerOracleDb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerOracleDbOutput} and HTTP response
     */
    gatewayUpdateProducerOracleDbWithHttpInfo(gatewayUpdateProducerOracleDb) {
      let postBody = gatewayUpdateProducerOracleDb;
      // verify the required parameter 'gatewayUpdateProducerOracleDb' is set
      if (gatewayUpdateProducerOracleDb === undefined || gatewayUpdateProducerOracleDb === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerOracleDb' when calling gatewayUpdateProducerOracleDb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerOracleDbOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-oracle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerOracleDb} gatewayUpdateProducerOracleDb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerOracleDbOutput}
     */
    gatewayUpdateProducerOracleDb(gatewayUpdateProducerOracleDb) {
      return this.gatewayUpdateProducerOracleDbWithHttpInfo(gatewayUpdateProducerOracleDb)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerPing} gatewayUpdateProducerPing 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerPingOutput} and HTTP response
     */
    gatewayUpdateProducerPingWithHttpInfo(gatewayUpdateProducerPing) {
      let postBody = gatewayUpdateProducerPing;
      // verify the required parameter 'gatewayUpdateProducerPing' is set
      if (gatewayUpdateProducerPing === undefined || gatewayUpdateProducerPing === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerPing' when calling gatewayUpdateProducerPing");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerPingOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-ping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerPing} gatewayUpdateProducerPing 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerPingOutput}
     */
    gatewayUpdateProducerPing(gatewayUpdateProducerPing) {
      return this.gatewayUpdateProducerPingWithHttpInfo(gatewayUpdateProducerPing)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerPostgreSQL} gatewayUpdateProducerPostgreSQL 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerPostgreSQLOutput} and HTTP response
     */
    gatewayUpdateProducerPostgreSQLWithHttpInfo(gatewayUpdateProducerPostgreSQL) {
      let postBody = gatewayUpdateProducerPostgreSQL;
      // verify the required parameter 'gatewayUpdateProducerPostgreSQL' is set
      if (gatewayUpdateProducerPostgreSQL === undefined || gatewayUpdateProducerPostgreSQL === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerPostgreSQL' when calling gatewayUpdateProducerPostgreSQL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerPostgreSQLOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-postgresql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerPostgreSQL} gatewayUpdateProducerPostgreSQL 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerPostgreSQLOutput}
     */
    gatewayUpdateProducerPostgreSQL(gatewayUpdateProducerPostgreSQL) {
      return this.gatewayUpdateProducerPostgreSQLWithHttpInfo(gatewayUpdateProducerPostgreSQL)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerRabbitMQ} gatewayUpdateProducerRabbitMQ 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerRabbitMQOutput} and HTTP response
     */
    gatewayUpdateProducerRabbitMQWithHttpInfo(gatewayUpdateProducerRabbitMQ) {
      let postBody = gatewayUpdateProducerRabbitMQ;
      // verify the required parameter 'gatewayUpdateProducerRabbitMQ' is set
      if (gatewayUpdateProducerRabbitMQ === undefined || gatewayUpdateProducerRabbitMQ === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerRabbitMQ' when calling gatewayUpdateProducerRabbitMQ");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerRabbitMQOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-rabbitmq', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerRabbitMQ} gatewayUpdateProducerRabbitMQ 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerRabbitMQOutput}
     */
    gatewayUpdateProducerRabbitMQ(gatewayUpdateProducerRabbitMQ) {
      return this.gatewayUpdateProducerRabbitMQWithHttpInfo(gatewayUpdateProducerRabbitMQ)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerRdp} gatewayUpdateProducerRdp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerRdpOutput} and HTTP response
     */
    gatewayUpdateProducerRdpWithHttpInfo(gatewayUpdateProducerRdp) {
      let postBody = gatewayUpdateProducerRdp;
      // verify the required parameter 'gatewayUpdateProducerRdp' is set
      if (gatewayUpdateProducerRdp === undefined || gatewayUpdateProducerRdp === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerRdp' when calling gatewayUpdateProducerRdp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerRdpOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-rdp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerRdp} gatewayUpdateProducerRdp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerRdpOutput}
     */
    gatewayUpdateProducerRdp(gatewayUpdateProducerRdp) {
      return this.gatewayUpdateProducerRdpWithHttpInfo(gatewayUpdateProducerRdp)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerRedis} gatewayUpdateProducerRedis 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerRedisOutput} and HTTP response
     */
    gatewayUpdateProducerRedisWithHttpInfo(gatewayUpdateProducerRedis) {
      let postBody = gatewayUpdateProducerRedis;
      // verify the required parameter 'gatewayUpdateProducerRedis' is set
      if (gatewayUpdateProducerRedis === undefined || gatewayUpdateProducerRedis === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerRedis' when calling gatewayUpdateProducerRedis");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerRedisOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-redis', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerRedis} gatewayUpdateProducerRedis 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerRedisOutput}
     */
    gatewayUpdateProducerRedis(gatewayUpdateProducerRedis) {
      return this.gatewayUpdateProducerRedisWithHttpInfo(gatewayUpdateProducerRedis)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerRedshift} gatewayUpdateProducerRedshift 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerRedshiftOutput} and HTTP response
     */
    gatewayUpdateProducerRedshiftWithHttpInfo(gatewayUpdateProducerRedshift) {
      let postBody = gatewayUpdateProducerRedshift;
      // verify the required parameter 'gatewayUpdateProducerRedshift' is set
      if (gatewayUpdateProducerRedshift === undefined || gatewayUpdateProducerRedshift === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerRedshift' when calling gatewayUpdateProducerRedshift");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerRedshiftOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-redshift', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerRedshift} gatewayUpdateProducerRedshift 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerRedshiftOutput}
     */
    gatewayUpdateProducerRedshift(gatewayUpdateProducerRedshift) {
      return this.gatewayUpdateProducerRedshiftWithHttpInfo(gatewayUpdateProducerRedshift)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerSnowflake} gatewayUpdateProducerSnowflake 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerSnowflakeOutput} and HTTP response
     */
    gatewayUpdateProducerSnowflakeWithHttpInfo(gatewayUpdateProducerSnowflake) {
      let postBody = gatewayUpdateProducerSnowflake;
      // verify the required parameter 'gatewayUpdateProducerSnowflake' is set
      if (gatewayUpdateProducerSnowflake === undefined || gatewayUpdateProducerSnowflake === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerSnowflake' when calling gatewayUpdateProducerSnowflake");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerSnowflakeOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-snowflake', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerSnowflake} gatewayUpdateProducerSnowflake 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerSnowflakeOutput}
     */
    gatewayUpdateProducerSnowflake(gatewayUpdateProducerSnowflake) {
      return this.gatewayUpdateProducerSnowflakeWithHttpInfo(gatewayUpdateProducerSnowflake)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerVenafi} gatewayUpdateProducerVenafi 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerVenafiOutput} and HTTP response
     */
    gatewayUpdateProducerVenafiWithHttpInfo(gatewayUpdateProducerVenafi) {
      let postBody = gatewayUpdateProducerVenafi;
      // verify the required parameter 'gatewayUpdateProducerVenafi' is set
      if (gatewayUpdateProducerVenafi === undefined || gatewayUpdateProducerVenafi === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateProducerVenafi' when calling gatewayUpdateProducerVenafi");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerVenafiOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-certificate-automation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerVenafi} gatewayUpdateProducerVenafi 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerVenafiOutput}
     */
    gatewayUpdateProducerVenafi(gatewayUpdateProducerVenafi) {
      return this.gatewayUpdateProducerVenafiWithHttpInfo(gatewayUpdateProducerVenafi)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateRemoteAccess} gatewayUpdateRemoteAccess 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    gatewayUpdateRemoteAccessWithHttpInfo(gatewayUpdateRemoteAccess) {
      let postBody = gatewayUpdateRemoteAccess;
      // verify the required parameter 'gatewayUpdateRemoteAccess' is set
      if (gatewayUpdateRemoteAccess === undefined || gatewayUpdateRemoteAccess === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateRemoteAccess' when calling gatewayUpdateRemoteAccess");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/gateway-update-remote-access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateRemoteAccess} gatewayUpdateRemoteAccess 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    gatewayUpdateRemoteAccess(gatewayUpdateRemoteAccess) {
      return this.gatewayUpdateRemoteAccessWithHttpInfo(gatewayUpdateRemoteAccess)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateRemoteAccessRdpRecordings} gatewayUpdateRemoteAccessRdpRecordings 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    gatewayUpdateRemoteAccessRdpRecordingsWithHttpInfo(gatewayUpdateRemoteAccessRdpRecordings) {
      let postBody = gatewayUpdateRemoteAccessRdpRecordings;
      // verify the required parameter 'gatewayUpdateRemoteAccessRdpRecordings' is set
      if (gatewayUpdateRemoteAccessRdpRecordings === undefined || gatewayUpdateRemoteAccessRdpRecordings === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateRemoteAccessRdpRecordings' when calling gatewayUpdateRemoteAccessRdpRecordings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/gateway-update-remote-access-rdp-recording', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateRemoteAccessRdpRecordings} gatewayUpdateRemoteAccessRdpRecordings 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    gatewayUpdateRemoteAccessRdpRecordings(gatewayUpdateRemoteAccessRdpRecordings) {
      return this.gatewayUpdateRemoteAccessRdpRecordingsWithHttpInfo(gatewayUpdateRemoteAccessRdpRecordings)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateTlsCert} gatewayUpdateTlsCert 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateTlsCertOutput} and HTTP response
     */
    gatewayUpdateTlsCertWithHttpInfo(gatewayUpdateTlsCert) {
      let postBody = gatewayUpdateTlsCert;
      // verify the required parameter 'gatewayUpdateTlsCert' is set
      if (gatewayUpdateTlsCert === undefined || gatewayUpdateTlsCert === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateTlsCert' when calling gatewayUpdateTlsCert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateTlsCertOutput;
      return this.apiClient.callApi(
        '/gateway-update-tls-cert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateTlsCert} gatewayUpdateTlsCert 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateTlsCertOutput}
     */
    gatewayUpdateTlsCert(gatewayUpdateTlsCert) {
      return this.gatewayUpdateTlsCertWithHttpInfo(gatewayUpdateTlsCert)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateTmpUsers} gatewayUpdateTmpUsers 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    gatewayUpdateTmpUsersWithHttpInfo(gatewayUpdateTmpUsers) {
      let postBody = gatewayUpdateTmpUsers;
      // verify the required parameter 'gatewayUpdateTmpUsers' is set
      if (gatewayUpdateTmpUsers === undefined || gatewayUpdateTmpUsers === null) {
        throw new Error("Missing the required parameter 'gatewayUpdateTmpUsers' when calling gatewayUpdateTmpUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/gateway-update-producer-tmp-creds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateTmpUsers} gatewayUpdateTmpUsers 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    gatewayUpdateTmpUsers(gatewayUpdateTmpUsers) {
      return this.gatewayUpdateTmpUsersWithHttpInfo(gatewayUpdateTmpUsers)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GenerateAcmeEab} generateAcmeEab 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenerateAcmeEabOutput} and HTTP response
     */
    generateAcmeEabWithHttpInfo(generateAcmeEab) {
      let postBody = generateAcmeEab;
      // verify the required parameter 'generateAcmeEab' is set
      if (generateAcmeEab === undefined || generateAcmeEab === null) {
        throw new Error("Missing the required parameter 'generateAcmeEab' when calling generateAcmeEab");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateAcmeEabOutput;
      return this.apiClient.callApi(
        '/generate-acme-eab', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GenerateAcmeEab} generateAcmeEab 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenerateAcmeEabOutput}
     */
    generateAcmeEab(generateAcmeEab) {
      return this.generateAcmeEabWithHttpInfo(generateAcmeEab)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GenerateCA} generateCA 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenerateCAOutput} and HTTP response
     */
    generateCAWithHttpInfo(generateCA) {
      let postBody = generateCA;
      // verify the required parameter 'generateCA' is set
      if (generateCA === undefined || generateCA === null) {
        throw new Error("Missing the required parameter 'generateCA' when calling generateCA");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateCAOutput;
      return this.apiClient.callApi(
        '/generate-ca', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GenerateCA} generateCA 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenerateCAOutput}
     */
    generateCA(generateCA) {
      return this.generateCAWithHttpInfo(generateCA)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GenerateCsr} generateCsr 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenerateCsrOutput} and HTTP response
     */
    generateCsrWithHttpInfo(generateCsr) {
      let postBody = generateCsr;
      // verify the required parameter 'generateCsr' is set
      if (generateCsr === undefined || generateCsr === null) {
        throw new Error("Missing the required parameter 'generateCsr' when calling generateCsr");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateCsrOutput;
      return this.apiClient.callApi(
        '/generate-csr', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GenerateCsr} generateCsr 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenerateCsrOutput}
     */
    generateCsr(generateCsr) {
      return this.generateCsrWithHttpInfo(generateCsr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    getAccountLogoWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/get-account-logo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    getAccountLogo() {
      return this.getAccountLogoWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetAccountSettings} getAccountSettings 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAccountSettingsCommandOutput} and HTTP response
     */
    getAccountSettingsWithHttpInfo(getAccountSettings) {
      let postBody = getAccountSettings;
      // verify the required parameter 'getAccountSettings' is set
      if (getAccountSettings === undefined || getAccountSettings === null) {
        throw new Error("Missing the required parameter 'getAccountSettings' when calling getAccountSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAccountSettingsCommandOutput;
      return this.apiClient.callApi(
        '/get-account-settings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetAccountSettings} getAccountSettings 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAccountSettingsCommandOutput}
     */
    getAccountSettings(getAccountSettings) {
      return this.getAccountSettingsWithHttpInfo(getAccountSettings)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetAnalyticsData} getAnalyticsData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AllAnalyticsData} and HTTP response
     */
    getAnalyticsDataWithHttpInfo(getAnalyticsData) {
      let postBody = getAnalyticsData;
      // verify the required parameter 'getAnalyticsData' is set
      if (getAnalyticsData === undefined || getAnalyticsData === null) {
        throw new Error("Missing the required parameter 'getAnalyticsData' when calling getAnalyticsData");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AllAnalyticsData;
      return this.apiClient.callApi(
        '/get-analytics-data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetAnalyticsData} getAnalyticsData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AllAnalyticsData}
     */
    getAnalyticsData(getAnalyticsData) {
      return this.getAnalyticsDataWithHttpInfo(getAnalyticsData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetAuthMethod} getAuthMethod 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethod} and HTTP response
     */
    getAuthMethodWithHttpInfo(getAuthMethod) {
      let postBody = getAuthMethod;
      // verify the required parameter 'getAuthMethod' is set
      if (getAuthMethod === undefined || getAuthMethod === null) {
        throw new Error("Missing the required parameter 'getAuthMethod' when calling getAuthMethod");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethod;
      return this.apiClient.callApi(
        '/get-auth-method', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetAuthMethod} getAuthMethod 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethod}
     */
    getAuthMethod(getAuthMethod) {
      return this.getAuthMethodWithHttpInfo(getAuthMethod)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetCertificateValue} getCertificateValue 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCertificateValueOutput} and HTTP response
     */
    getCertificateValueWithHttpInfo(getCertificateValue) {
      let postBody = getCertificateValue;
      // verify the required parameter 'getCertificateValue' is set
      if (getCertificateValue === undefined || getCertificateValue === null) {
        throw new Error("Missing the required parameter 'getCertificateValue' when calling getCertificateValue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetCertificateValueOutput;
      return this.apiClient.callApi(
        '/get-certificate-value', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetCertificateValue} getCertificateValue 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCertificateValueOutput}
     */
    getCertificateValue(getCertificateValue) {
      return this.getCertificateValueWithHttpInfo(getCertificateValue)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetDynamicSecretValue} getDynamicSecretValue 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getDynamicSecretValueWithHttpInfo(getDynamicSecretValue) {
      let postBody = getDynamicSecretValue;
      // verify the required parameter 'getDynamicSecretValue' is set
      if (getDynamicSecretValue === undefined || getDynamicSecretValue === null) {
        throw new Error("Missing the required parameter 'getDynamicSecretValue' when calling getDynamicSecretValue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/get-dynamic-secret-value', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetDynamicSecretValue} getDynamicSecretValue 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getDynamicSecretValue(getDynamicSecretValue) {
      return this.getDynamicSecretValueWithHttpInfo(getDynamicSecretValue)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetEventForwarder} getEventForwarder 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetEventForwarderOutput} and HTTP response
     */
    getEventForwarderWithHttpInfo(getEventForwarder) {
      let postBody = getEventForwarder;
      // verify the required parameter 'getEventForwarder' is set
      if (getEventForwarder === undefined || getEventForwarder === null) {
        throw new Error("Missing the required parameter 'getEventForwarder' when calling getEventForwarder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetEventForwarderOutput;
      return this.apiClient.callApi(
        '/get-event-forwarder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetEventForwarder} getEventForwarder 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetEventForwarderOutput}
     */
    getEventForwarder(getEventForwarder) {
      return this.getEventForwarderWithHttpInfo(getEventForwarder)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetGroup} getGroup 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetGroupOutput} and HTTP response
     */
    getGroupWithHttpInfo(getGroup) {
      let postBody = getGroup;
      // verify the required parameter 'getGroup' is set
      if (getGroup === undefined || getGroup === null) {
        throw new Error("Missing the required parameter 'getGroup' when calling getGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetGroupOutput;
      return this.apiClient.callApi(
        '/get-group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetGroup} getGroup 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetGroupOutput}
     */
    getGroup(getGroup) {
      return this.getGroupWithHttpInfo(getGroup)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetKubeExecCreds} getKubeExecCreds 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetKubeExecCredsOutput} and HTTP response
     */
    getKubeExecCredsWithHttpInfo(getKubeExecCreds) {
      let postBody = getKubeExecCreds;
      // verify the required parameter 'getKubeExecCreds' is set
      if (getKubeExecCreds === undefined || getKubeExecCreds === null) {
        throw new Error("Missing the required parameter 'getKubeExecCreds' when calling getKubeExecCreds");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetKubeExecCredsOutput;
      return this.apiClient.callApi(
        '/get-kube-exec-creds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetKubeExecCreds} getKubeExecCreds 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetKubeExecCredsOutput}
     */
    getKubeExecCreds(getKubeExecCreds) {
      return this.getKubeExecCredsWithHttpInfo(getKubeExecCreds)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetLastUserEventStatus} getLastUserEventStatus 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetUserEventStatusOutput} and HTTP response
     */
    getLastUserEventStatusWithHttpInfo(getLastUserEventStatus) {
      let postBody = getLastUserEventStatus;
      // verify the required parameter 'getLastUserEventStatus' is set
      if (getLastUserEventStatus === undefined || getLastUserEventStatus === null) {
        throw new Error("Missing the required parameter 'getLastUserEventStatus' when calling getLastUserEventStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetUserEventStatusOutput;
      return this.apiClient.callApi(
        '/user-event-last-status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetLastUserEventStatus} getLastUserEventStatus 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetUserEventStatusOutput}
     */
    getLastUserEventStatus(getLastUserEventStatus) {
      return this.getLastUserEventStatusWithHttpInfo(getLastUserEventStatus)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetPKICertificate} getPKICertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetPKICertificateOutput} and HTTP response
     */
    getPKICertificateWithHttpInfo(getPKICertificate) {
      let postBody = getPKICertificate;
      // verify the required parameter 'getPKICertificate' is set
      if (getPKICertificate === undefined || getPKICertificate === null) {
        throw new Error("Missing the required parameter 'getPKICertificate' when calling getPKICertificate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPKICertificateOutput;
      return this.apiClient.callApi(
        '/get-pki-certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetPKICertificate} getPKICertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetPKICertificateOutput}
     */
    getPKICertificate(getPKICertificate) {
      return this.getPKICertificateWithHttpInfo(getPKICertificate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetRSAPublic} getRSAPublic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetRSAPublicOutput} and HTTP response
     */
    getRSAPublicWithHttpInfo(getRSAPublic) {
      let postBody = getRSAPublic;
      // verify the required parameter 'getRSAPublic' is set
      if (getRSAPublic === undefined || getRSAPublic === null) {
        throw new Error("Missing the required parameter 'getRSAPublic' when calling getRSAPublic");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetRSAPublicOutput;
      return this.apiClient.callApi(
        '/get-rsa-public', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetRSAPublic} getRSAPublic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetRSAPublicOutput}
     */
    getRSAPublic(getRSAPublic) {
      return this.getRSAPublicWithHttpInfo(getRSAPublic)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetRole} getRole 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Role} and HTTP response
     */
    getRoleWithHttpInfo(getRole) {
      let postBody = getRole;
      // verify the required parameter 'getRole' is set
      if (getRole === undefined || getRole === null) {
        throw new Error("Missing the required parameter 'getRole' when calling getRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/get-role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetRole} getRole 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Role}
     */
    getRole(getRole) {
      return this.getRoleWithHttpInfo(getRole)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetRotatedSecretValue} getRotatedSecretValue 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getRotatedSecretValueWithHttpInfo(getRotatedSecretValue) {
      let postBody = getRotatedSecretValue;
      // verify the required parameter 'getRotatedSecretValue' is set
      if (getRotatedSecretValue === undefined || getRotatedSecretValue === null) {
        throw new Error("Missing the required parameter 'getRotatedSecretValue' when calling getRotatedSecretValue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/get-rotated-secret-value', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetRotatedSecretValue} getRotatedSecretValue 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getRotatedSecretValue(getRotatedSecretValue) {
      return this.getRotatedSecretValueWithHttpInfo(getRotatedSecretValue)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetSSHCertificate} getSSHCertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSSHCertificateOutput} and HTTP response
     */
    getSSHCertificateWithHttpInfo(getSSHCertificate) {
      let postBody = getSSHCertificate;
      // verify the required parameter 'getSSHCertificate' is set
      if (getSSHCertificate === undefined || getSSHCertificate === null) {
        throw new Error("Missing the required parameter 'getSSHCertificate' when calling getSSHCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSSHCertificateOutput;
      return this.apiClient.callApi(
        '/get-ssh-certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetSSHCertificate} getSSHCertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSSHCertificateOutput}
     */
    getSSHCertificate(getSSHCertificate) {
      return this.getSSHCertificateWithHttpInfo(getSSHCertificate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetSecretValue} getSecretValue 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getSecretValueWithHttpInfo(getSecretValue) {
      let postBody = getSecretValue;
      // verify the required parameter 'getSecretValue' is set
      if (getSecretValue === undefined || getSecretValue === null) {
        throw new Error("Missing the required parameter 'getSecretValue' when calling getSecretValue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/get-secret-value', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetSecretValue} getSecretValue 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getSecretValue(getSecretValue) {
      return this.getSecretValueWithHttpInfo(getSecretValue)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetTags} getTags 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    getTagsWithHttpInfo(getTags) {
      let postBody = getTags;
      // verify the required parameter 'getTags' is set
      if (getTags === undefined || getTags === null) {
        throw new Error("Missing the required parameter 'getTags' when calling getTags");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/get-tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetTags} getTags 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    getTags(getTags) {
      return this.getTagsWithHttpInfo(getTags)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetTarget} getTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Target} and HTTP response
     */
    getTargetWithHttpInfo(getTarget) {
      let postBody = getTarget;
      // verify the required parameter 'getTarget' is set
      if (getTarget === undefined || getTarget === null) {
        throw new Error("Missing the required parameter 'getTarget' when calling getTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Target;
      return this.apiClient.callApi(
        '/get-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetTarget} getTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Target}
     */
    getTarget(getTarget) {
      return this.getTargetWithHttpInfo(getTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetTargetDetails} getTargetDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTargetDetailsOutput} and HTTP response
     */
    getTargetDetailsWithHttpInfo(getTargetDetails) {
      let postBody = getTargetDetails;
      // verify the required parameter 'getTargetDetails' is set
      if (getTargetDetails === undefined || getTargetDetails === null) {
        throw new Error("Missing the required parameter 'getTargetDetails' when calling getTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTargetDetailsOutput;
      return this.apiClient.callApi(
        '/get-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetTargetDetails} getTargetDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTargetDetailsOutput}
     */
    getTargetDetails(getTargetDetails) {
      return this.getTargetDetailsWithHttpInfo(getTargetDetails)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsAwsS3} gwUpdateRemoteAccessSessionLogsAwsS3 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gwUpdateRemoteAccessSessionLogsAwsS3WithHttpInfo(gwUpdateRemoteAccessSessionLogsAwsS3) {
      let postBody = gwUpdateRemoteAccessSessionLogsAwsS3;
      // verify the required parameter 'gwUpdateRemoteAccessSessionLogsAwsS3' is set
      if (gwUpdateRemoteAccessSessionLogsAwsS3 === undefined || gwUpdateRemoteAccessSessionLogsAwsS3 === null) {
        throw new Error("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsAwsS3' when calling gwUpdateRemoteAccessSessionLogsAwsS3");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-remote-access-session-forwarding-aws-s3', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsAwsS3} gwUpdateRemoteAccessSessionLogsAwsS3 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gwUpdateRemoteAccessSessionLogsAwsS3(gwUpdateRemoteAccessSessionLogsAwsS3) {
      return this.gwUpdateRemoteAccessSessionLogsAwsS3WithHttpInfo(gwUpdateRemoteAccessSessionLogsAwsS3)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsAzureAnalytics} gwUpdateRemoteAccessSessionLogsAzureAnalytics 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gwUpdateRemoteAccessSessionLogsAzureAnalyticsWithHttpInfo(gwUpdateRemoteAccessSessionLogsAzureAnalytics) {
      let postBody = gwUpdateRemoteAccessSessionLogsAzureAnalytics;
      // verify the required parameter 'gwUpdateRemoteAccessSessionLogsAzureAnalytics' is set
      if (gwUpdateRemoteAccessSessionLogsAzureAnalytics === undefined || gwUpdateRemoteAccessSessionLogsAzureAnalytics === null) {
        throw new Error("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsAzureAnalytics' when calling gwUpdateRemoteAccessSessionLogsAzureAnalytics");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-remote-access-session-forwarding-azure-analytics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsAzureAnalytics} gwUpdateRemoteAccessSessionLogsAzureAnalytics 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gwUpdateRemoteAccessSessionLogsAzureAnalytics(gwUpdateRemoteAccessSessionLogsAzureAnalytics) {
      return this.gwUpdateRemoteAccessSessionLogsAzureAnalyticsWithHttpInfo(gwUpdateRemoteAccessSessionLogsAzureAnalytics)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsDatadog} gwUpdateRemoteAccessSessionLogsDatadog 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gwUpdateRemoteAccessSessionLogsDatadogWithHttpInfo(gwUpdateRemoteAccessSessionLogsDatadog) {
      let postBody = gwUpdateRemoteAccessSessionLogsDatadog;
      // verify the required parameter 'gwUpdateRemoteAccessSessionLogsDatadog' is set
      if (gwUpdateRemoteAccessSessionLogsDatadog === undefined || gwUpdateRemoteAccessSessionLogsDatadog === null) {
        throw new Error("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsDatadog' when calling gwUpdateRemoteAccessSessionLogsDatadog");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-remote-access-session-forwarding-datadog', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsDatadog} gwUpdateRemoteAccessSessionLogsDatadog 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gwUpdateRemoteAccessSessionLogsDatadog(gwUpdateRemoteAccessSessionLogsDatadog) {
      return this.gwUpdateRemoteAccessSessionLogsDatadogWithHttpInfo(gwUpdateRemoteAccessSessionLogsDatadog)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsElasticsearch} gwUpdateRemoteAccessSessionLogsElasticsearch 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gwUpdateRemoteAccessSessionLogsElasticsearchWithHttpInfo(gwUpdateRemoteAccessSessionLogsElasticsearch) {
      let postBody = gwUpdateRemoteAccessSessionLogsElasticsearch;
      // verify the required parameter 'gwUpdateRemoteAccessSessionLogsElasticsearch' is set
      if (gwUpdateRemoteAccessSessionLogsElasticsearch === undefined || gwUpdateRemoteAccessSessionLogsElasticsearch === null) {
        throw new Error("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsElasticsearch' when calling gwUpdateRemoteAccessSessionLogsElasticsearch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-remote-access-session-forwarding-elasticsearch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsElasticsearch} gwUpdateRemoteAccessSessionLogsElasticsearch 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gwUpdateRemoteAccessSessionLogsElasticsearch(gwUpdateRemoteAccessSessionLogsElasticsearch) {
      return this.gwUpdateRemoteAccessSessionLogsElasticsearchWithHttpInfo(gwUpdateRemoteAccessSessionLogsElasticsearch)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsGoogleChronicle} gwUpdateRemoteAccessSessionLogsGoogleChronicle 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gwUpdateRemoteAccessSessionLogsGoogleChronicleWithHttpInfo(gwUpdateRemoteAccessSessionLogsGoogleChronicle) {
      let postBody = gwUpdateRemoteAccessSessionLogsGoogleChronicle;
      // verify the required parameter 'gwUpdateRemoteAccessSessionLogsGoogleChronicle' is set
      if (gwUpdateRemoteAccessSessionLogsGoogleChronicle === undefined || gwUpdateRemoteAccessSessionLogsGoogleChronicle === null) {
        throw new Error("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsGoogleChronicle' when calling gwUpdateRemoteAccessSessionLogsGoogleChronicle");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-remote-access-session-forwarding-google-chronicle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsGoogleChronicle} gwUpdateRemoteAccessSessionLogsGoogleChronicle 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gwUpdateRemoteAccessSessionLogsGoogleChronicle(gwUpdateRemoteAccessSessionLogsGoogleChronicle) {
      return this.gwUpdateRemoteAccessSessionLogsGoogleChronicleWithHttpInfo(gwUpdateRemoteAccessSessionLogsGoogleChronicle)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsLogstash} gwUpdateRemoteAccessSessionLogsLogstash 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gwUpdateRemoteAccessSessionLogsLogstashWithHttpInfo(gwUpdateRemoteAccessSessionLogsLogstash) {
      let postBody = gwUpdateRemoteAccessSessionLogsLogstash;
      // verify the required parameter 'gwUpdateRemoteAccessSessionLogsLogstash' is set
      if (gwUpdateRemoteAccessSessionLogsLogstash === undefined || gwUpdateRemoteAccessSessionLogsLogstash === null) {
        throw new Error("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsLogstash' when calling gwUpdateRemoteAccessSessionLogsLogstash");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-remote-access-session-forwarding-logstash', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsLogstash} gwUpdateRemoteAccessSessionLogsLogstash 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gwUpdateRemoteAccessSessionLogsLogstash(gwUpdateRemoteAccessSessionLogsLogstash) {
      return this.gwUpdateRemoteAccessSessionLogsLogstashWithHttpInfo(gwUpdateRemoteAccessSessionLogsLogstash)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsLogzIo} gwUpdateRemoteAccessSessionLogsLogzIo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gwUpdateRemoteAccessSessionLogsLogzIoWithHttpInfo(gwUpdateRemoteAccessSessionLogsLogzIo) {
      let postBody = gwUpdateRemoteAccessSessionLogsLogzIo;
      // verify the required parameter 'gwUpdateRemoteAccessSessionLogsLogzIo' is set
      if (gwUpdateRemoteAccessSessionLogsLogzIo === undefined || gwUpdateRemoteAccessSessionLogsLogzIo === null) {
        throw new Error("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsLogzIo' when calling gwUpdateRemoteAccessSessionLogsLogzIo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-remote-access-session-forwarding-logz-io', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsLogzIo} gwUpdateRemoteAccessSessionLogsLogzIo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gwUpdateRemoteAccessSessionLogsLogzIo(gwUpdateRemoteAccessSessionLogsLogzIo) {
      return this.gwUpdateRemoteAccessSessionLogsLogzIoWithHttpInfo(gwUpdateRemoteAccessSessionLogsLogzIo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsSplunk} gwUpdateRemoteAccessSessionLogsSplunk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gwUpdateRemoteAccessSessionLogsSplunkWithHttpInfo(gwUpdateRemoteAccessSessionLogsSplunk) {
      let postBody = gwUpdateRemoteAccessSessionLogsSplunk;
      // verify the required parameter 'gwUpdateRemoteAccessSessionLogsSplunk' is set
      if (gwUpdateRemoteAccessSessionLogsSplunk === undefined || gwUpdateRemoteAccessSessionLogsSplunk === null) {
        throw new Error("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsSplunk' when calling gwUpdateRemoteAccessSessionLogsSplunk");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-remote-access-session-forwarding-splunk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsSplunk} gwUpdateRemoteAccessSessionLogsSplunk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gwUpdateRemoteAccessSessionLogsSplunk(gwUpdateRemoteAccessSessionLogsSplunk) {
      return this.gwUpdateRemoteAccessSessionLogsSplunkWithHttpInfo(gwUpdateRemoteAccessSessionLogsSplunk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsStdout} gwUpdateRemoteAccessSessionLogsStdout 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gwUpdateRemoteAccessSessionLogsStdoutWithHttpInfo(gwUpdateRemoteAccessSessionLogsStdout) {
      let postBody = gwUpdateRemoteAccessSessionLogsStdout;
      // verify the required parameter 'gwUpdateRemoteAccessSessionLogsStdout' is set
      if (gwUpdateRemoteAccessSessionLogsStdout === undefined || gwUpdateRemoteAccessSessionLogsStdout === null) {
        throw new Error("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsStdout' when calling gwUpdateRemoteAccessSessionLogsStdout");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-remote-access-session-forwarding-stdout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsStdout} gwUpdateRemoteAccessSessionLogsStdout 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gwUpdateRemoteAccessSessionLogsStdout(gwUpdateRemoteAccessSessionLogsStdout) {
      return this.gwUpdateRemoteAccessSessionLogsStdoutWithHttpInfo(gwUpdateRemoteAccessSessionLogsStdout)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsSumologic} gwUpdateRemoteAccessSessionLogsSumologic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gwUpdateRemoteAccessSessionLogsSumologicWithHttpInfo(gwUpdateRemoteAccessSessionLogsSumologic) {
      let postBody = gwUpdateRemoteAccessSessionLogsSumologic;
      // verify the required parameter 'gwUpdateRemoteAccessSessionLogsSumologic' is set
      if (gwUpdateRemoteAccessSessionLogsSumologic === undefined || gwUpdateRemoteAccessSessionLogsSumologic === null) {
        throw new Error("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsSumologic' when calling gwUpdateRemoteAccessSessionLogsSumologic");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-remote-access-session-forwarding-sumologic', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsSumologic} gwUpdateRemoteAccessSessionLogsSumologic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gwUpdateRemoteAccessSessionLogsSumologic(gwUpdateRemoteAccessSessionLogsSumologic) {
      return this.gwUpdateRemoteAccessSessionLogsSumologicWithHttpInfo(gwUpdateRemoteAccessSessionLogsSumologic)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsSyslog} gwUpdateRemoteAccessSessionLogsSyslog 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLogForwardingOutput} and HTTP response
     */
    gwUpdateRemoteAccessSessionLogsSyslogWithHttpInfo(gwUpdateRemoteAccessSessionLogsSyslog) {
      let postBody = gwUpdateRemoteAccessSessionLogsSyslog;
      // verify the required parameter 'gwUpdateRemoteAccessSessionLogsSyslog' is set
      if (gwUpdateRemoteAccessSessionLogsSyslog === undefined || gwUpdateRemoteAccessSessionLogsSyslog === null) {
        throw new Error("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsSyslog' when calling gwUpdateRemoteAccessSessionLogsSyslog");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLogForwardingOutput;
      return this.apiClient.callApi(
        '/gateway-update-remote-access-session-forwarding-syslog', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GwUpdateRemoteAccessSessionLogsSyslog} gwUpdateRemoteAccessSessionLogsSyslog 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLogForwardingOutput}
     */
    gwUpdateRemoteAccessSessionLogsSyslog(gwUpdateRemoteAccessSessionLogsSyslog) {
      return this.gwUpdateRemoteAccessSessionLogsSyslogWithHttpInfo(gwUpdateRemoteAccessSessionLogsSyslog)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/Hmac} hmac 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HmacOutput} and HTTP response
     */
    hmacWithHttpInfo(hmac) {
      let postBody = hmac;
      // verify the required parameter 'hmac' is set
      if (hmac === undefined || hmac === null) {
        throw new Error("Missing the required parameter 'hmac' when calling hmac");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HmacOutput;
      return this.apiClient.callApi(
        '/hmac', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/Hmac} hmac 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HmacOutput}
     */
    hmac(hmac) {
      return this.hmacWithHttpInfo(hmac)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ImportPasswords} importPasswords 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImportPasswordsOutput} and HTTP response
     */
    importPasswordsWithHttpInfo(importPasswords) {
      let postBody = importPasswords;
      // verify the required parameter 'importPasswords' is set
      if (importPasswords === undefined || importPasswords === null) {
        throw new Error("Missing the required parameter 'importPasswords' when calling importPasswords");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportPasswordsOutput;
      return this.apiClient.callApi(
        '/import-passwords', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ImportPasswords} importPasswords 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImportPasswordsOutput}
     */
    importPasswords(importPasswords) {
      return this.importPasswordsWithHttpInfo(importPasswords)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipClientDeleteRule} [kmipClientDeleteRule] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KMIPClientUpdateResponse} and HTTP response
     */
    kmipClientDeleteRuleWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['kmipClientDeleteRule'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KMIPClientUpdateResponse;
      return this.apiClient.callApi(
        '/kmip-client-delete-rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipClientDeleteRule} opts.kmipClientDeleteRule 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KMIPClientUpdateResponse}
     */
    kmipClientDeleteRule(opts) {
      return this.kmipClientDeleteRuleWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipClientSetRule} [kmipClientSetRule] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KMIPClientUpdateResponse} and HTTP response
     */
    kmipClientSetRuleWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['kmipClientSetRule'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KMIPClientUpdateResponse;
      return this.apiClient.callApi(
        '/kmip-client-set-rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipClientSetRule} opts.kmipClientSetRule 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KMIPClientUpdateResponse}
     */
    kmipClientSetRule(opts) {
      return this.kmipClientSetRuleWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipCreateClient} [kmipCreateClient] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KmipCreateClientOutput} and HTTP response
     */
    kmipCreateClientWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['kmipCreateClient'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KmipCreateClientOutput;
      return this.apiClient.callApi(
        '/kmip-create-client', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipCreateClient} opts.kmipCreateClient 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KmipCreateClientOutput}
     */
    kmipCreateClient(opts) {
      return this.kmipCreateClientWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDeleteClient} [kmipDeleteClient] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    kmipDeleteClientWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['kmipDeleteClient'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/kmip-delete-client', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDeleteClient} opts.kmipDeleteClient 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    kmipDeleteClient(opts) {
      return this.kmipDeleteClientWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDeleteServer} [kmipDeleteServer] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    kmipDeleteServerWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['kmipDeleteServer'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/kmip-delete-environment', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDeleteServer} opts.kmipDeleteServer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    kmipDeleteServer(opts) {
      return this.kmipDeleteServerWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDescribeClient} [kmipDescribeClient] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KMIPClientGetResponse} and HTTP response
     */
    kmipDescribeClientWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['kmipDescribeClient'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KMIPClientGetResponse;
      return this.apiClient.callApi(
        '/kmip-get-client', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDescribeClient} opts.kmipDescribeClient 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KMIPClientGetResponse}
     */
    kmipDescribeClient(opts) {
      return this.kmipDescribeClientWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDescribeServer} [kmipDescribeServer] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KmipDescribeServerOutput} and HTTP response
     */
    kmipDescribeServerWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['kmipDescribeServer'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KmipDescribeServerOutput;
      return this.apiClient.callApi(
        '/kmip-get-environment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDescribeServer} opts.kmipDescribeServer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KmipDescribeServerOutput}
     */
    kmipDescribeServer(opts) {
      return this.kmipDescribeServerWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipListClients} [kmipListClients] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KMIPClientListResponse} and HTTP response
     */
    kmipListClientsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['kmipListClients'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KMIPClientListResponse;
      return this.apiClient.callApi(
        '/kmip-list-clients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipListClients} opts.kmipListClients 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KMIPClientListResponse}
     */
    kmipListClients(opts) {
      return this.kmipListClientsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipMoveServer} [kmipMoveServer] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KmipMoveServerOutput} and HTTP response
     */
    kmipMoveServerWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['kmipMoveServer'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KmipMoveServerOutput;
      return this.apiClient.callApi(
        '/kmip-move-environment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipMoveServer} opts.kmipMoveServer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KmipMoveServerOutput}
     */
    kmipMoveServer(opts) {
      return this.kmipMoveServerWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipRenewClientCertificate} [kmipRenewClientCertificate] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KmipRenewClientCertificateOutput} and HTTP response
     */
    kmipRenewClientCertificateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['kmipRenewClientCertificate'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KmipRenewClientCertificateOutput;
      return this.apiClient.callApi(
        '/kmip-renew-client', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipRenewClientCertificate} opts.kmipRenewClientCertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KmipRenewClientCertificateOutput}
     */
    kmipRenewClientCertificate(opts) {
      return this.kmipRenewClientCertificateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipRenewServerCertificate} [kmipRenewServerCertificate] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KmipRenewServerCertificateOutput} and HTTP response
     */
    kmipRenewServerCertificateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['kmipRenewServerCertificate'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KmipRenewServerCertificateOutput;
      return this.apiClient.callApi(
        '/kmip-renew-environment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipRenewServerCertificate} opts.kmipRenewServerCertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KmipRenewServerCertificateOutput}
     */
    kmipRenewServerCertificate(opts) {
      return this.kmipRenewServerCertificateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipServerSetup} [kmipServerSetup] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KMIPEnvironmentCreateResponse} and HTTP response
     */
    kmipServerSetupWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['kmipServerSetup'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KMIPEnvironmentCreateResponse;
      return this.apiClient.callApi(
        '/kmip-create-environment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipServerSetup} opts.kmipServerSetup 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KMIPEnvironmentCreateResponse}
     */
    kmipServerSetup(opts) {
      return this.kmipServerSetupWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipSetServerState} [kmipSetServerState] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KmipSetServerStateOutput} and HTTP response
     */
    kmipSetServerStateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['kmipSetServerState'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KmipSetServerStateOutput;
      return this.apiClient.callApi(
        '/kmip-set-environment-state', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipSetServerState} opts.kmipSetServerState 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KmipSetServerStateOutput}
     */
    kmipSetServerState(opts) {
      return this.kmipSetServerStateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KubeconfigGenerateOutput} and HTTP response
     */
    kubeconfigGenerateWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KubeconfigGenerateOutput;
      return this.apiClient.callApi(
        '/kubeconfig-generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KubeconfigGenerateOutput}
     */
    kubeconfigGenerate() {
      return this.kubeconfigGenerateWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ListAcmeAccounts} listAcmeAccounts 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListAcmeAccountsOutput} and HTTP response
     */
    listAcmeAccountsWithHttpInfo(listAcmeAccounts) {
      let postBody = listAcmeAccounts;
      // verify the required parameter 'listAcmeAccounts' is set
      if (listAcmeAccounts === undefined || listAcmeAccounts === null) {
        throw new Error("Missing the required parameter 'listAcmeAccounts' when calling listAcmeAccounts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAcmeAccountsOutput;
      return this.apiClient.callApi(
        '/list-acme-accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ListAcmeAccounts} listAcmeAccounts 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListAcmeAccountsOutput}
     */
    listAcmeAccounts(listAcmeAccounts) {
      return this.listAcmeAccountsWithHttpInfo(listAcmeAccounts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ListAuthMethods} listAuthMethods 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListAuthMethodsOutput} and HTTP response
     */
    listAuthMethodsWithHttpInfo(listAuthMethods) {
      let postBody = listAuthMethods;
      // verify the required parameter 'listAuthMethods' is set
      if (listAuthMethods === undefined || listAuthMethods === null) {
        throw new Error("Missing the required parameter 'listAuthMethods' when calling listAuthMethods");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAuthMethodsOutput;
      return this.apiClient.callApi(
        '/list-auth-methods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ListAuthMethods} listAuthMethods 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListAuthMethodsOutput}
     */
    listAuthMethods(listAuthMethods) {
      return this.listAuthMethodsWithHttpInfo(listAuthMethods)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ListGateways} listGateways 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewaysListResponse} and HTTP response
     */
    listGatewaysWithHttpInfo(listGateways) {
      let postBody = listGateways;
      // verify the required parameter 'listGateways' is set
      if (listGateways === undefined || listGateways === null) {
        throw new Error("Missing the required parameter 'listGateways' when calling listGateways");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewaysListResponse;
      return this.apiClient.callApi(
        '/list-gateways', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ListGateways} listGateways 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewaysListResponse}
     */
    listGateways(listGateways) {
      return this.listGatewaysWithHttpInfo(listGateways)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ListGroups} listGroups 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListGroupsOutput} and HTTP response
     */
    listGroupsWithHttpInfo(listGroups) {
      let postBody = listGroups;
      // verify the required parameter 'listGroups' is set
      if (listGroups === undefined || listGroups === null) {
        throw new Error("Missing the required parameter 'listGroups' when calling listGroups");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListGroupsOutput;
      return this.apiClient.callApi(
        '/list-group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ListGroups} listGroups 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListGroupsOutput}
     */
    listGroups(listGroups) {
      return this.listGroupsWithHttpInfo(listGroups)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ListItems} listItems 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListItemsInPathOutput} and HTTP response
     */
    listItemsWithHttpInfo(listItems) {
      let postBody = listItems;
      // verify the required parameter 'listItems' is set
      if (listItems === undefined || listItems === null) {
        throw new Error("Missing the required parameter 'listItems' when calling listItems");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListItemsInPathOutput;
      return this.apiClient.callApi(
        '/list-items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ListItems} listItems 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListItemsInPathOutput}
     */
    listItems(listItems) {
      return this.listItemsWithHttpInfo(listItems)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ListRoles} listRoles 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListRolesOutput} and HTTP response
     */
    listRolesWithHttpInfo(listRoles) {
      let postBody = listRoles;
      // verify the required parameter 'listRoles' is set
      if (listRoles === undefined || listRoles === null) {
        throw new Error("Missing the required parameter 'listRoles' when calling listRoles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListRolesOutput;
      return this.apiClient.callApi(
        '/list-roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ListRoles} listRoles 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListRolesOutput}
     */
    listRoles(listRoles) {
      return this.listRolesWithHttpInfo(listRoles)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ListSRABastions} listSRABastions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BastionsList} and HTTP response
     */
    listSRABastionsWithHttpInfo(listSRABastions) {
      let postBody = listSRABastions;
      // verify the required parameter 'listSRABastions' is set
      if (listSRABastions === undefined || listSRABastions === null) {
        throw new Error("Missing the required parameter 'listSRABastions' when calling listSRABastions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BastionsList;
      return this.apiClient.callApi(
        '/list-sra-bastions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ListSRABastions} listSRABastions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BastionsList}
     */
    listSRABastions(listSRABastions) {
      return this.listSRABastionsWithHttpInfo(listSRABastions)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ListSRASessions} listSRASessions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSraSessionsOutput} and HTTP response
     */
    listSRASessionsWithHttpInfo(listSRASessions) {
      let postBody = listSRASessions;
      // verify the required parameter 'listSRASessions' is set
      if (listSRASessions === undefined || listSRASessions === null) {
        throw new Error("Missing the required parameter 'listSRASessions' when calling listSRASessions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSraSessionsOutput;
      return this.apiClient.callApi(
        '/list-sra-sessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ListSRASessions} listSRASessions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSraSessionsOutput}
     */
    listSRASessions(listSRASessions) {
      return this.listSRASessionsWithHttpInfo(listSRASessions)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ListSharedItems} listSharedItems 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    listSharedItemsWithHttpInfo(listSharedItems) {
      let postBody = listSharedItems;
      // verify the required parameter 'listSharedItems' is set
      if (listSharedItems === undefined || listSharedItems === null) {
        throw new Error("Missing the required parameter 'listSharedItems' when calling listSharedItems");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/list-shared-items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ListSharedItems} listSharedItems 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    listSharedItems(listSharedItems) {
      return this.listSharedItemsWithHttpInfo(listSharedItems)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ListTargets} listTargets 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTargetsOutput} and HTTP response
     */
    listTargetsWithHttpInfo(listTargets) {
      let postBody = listTargets;
      // verify the required parameter 'listTargets' is set
      if (listTargets === undefined || listTargets === null) {
        throw new Error("Missing the required parameter 'listTargets' when calling listTargets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTargetsOutput;
      return this.apiClient.callApi(
        '/list-targets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ListTargets} listTargets 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTargetsOutput}
     */
    listTargets(listTargets) {
      return this.listTargetsWithHttpInfo(listTargets)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/MoveObjects} moveObjects 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    moveObjectsWithHttpInfo(moveObjects) {
      let postBody = moveObjects;
      // verify the required parameter 'moveObjects' is set
      if (moveObjects === undefined || moveObjects === null) {
        throw new Error("Missing the required parameter 'moveObjects' when calling moveObjects");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/move-objects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/MoveObjects} moveObjects 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    moveObjects(moveObjects) {
      return this.moveObjectsWithHttpInfo(moveObjects)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ProvisionCertificate} provisionCertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProvisionCertificateOutput} and HTTP response
     */
    provisionCertificateWithHttpInfo(provisionCertificate) {
      let postBody = provisionCertificate;
      // verify the required parameter 'provisionCertificate' is set
      if (provisionCertificate === undefined || provisionCertificate === null) {
        throw new Error("Missing the required parameter 'provisionCertificate' when calling provisionCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProvisionCertificateOutput;
      return this.apiClient.callApi(
        '/provision-certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ProvisionCertificate} provisionCertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProvisionCertificateOutput}
     */
    provisionCertificate(provisionCertificate) {
      return this.provisionCertificateWithHttpInfo(provisionCertificate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/RawCreds} [rawCreds] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SystemAccessCredentialsReplyObj} and HTTP response
     */
    rawCredsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['rawCreds'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SystemAccessCredentialsReplyObj;
      return this.apiClient.callApi(
        '/raw-creds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/RawCreds} opts.rawCreds 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SystemAccessCredentialsReplyObj}
     */
    rawCreds(opts) {
      return this.rawCredsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RefreshKey} refreshKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RefreshKeyOutput} and HTTP response
     */
    refreshKeyWithHttpInfo(refreshKey) {
      let postBody = refreshKey;
      // verify the required parameter 'refreshKey' is set
      if (refreshKey === undefined || refreshKey === null) {
        throw new Error("Missing the required parameter 'refreshKey' when calling refreshKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RefreshKeyOutput;
      return this.apiClient.callApi(
        '/refresh-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RefreshKey} refreshKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RefreshKeyOutput}
     */
    refreshKey(refreshKey) {
      return this.refreshKeyWithHttpInfo(refreshKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RenewCertificate} renewCertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RenewCertificateOutput} and HTTP response
     */
    renewCertificateWithHttpInfo(renewCertificate) {
      let postBody = renewCertificate;
      // verify the required parameter 'renewCertificate' is set
      if (renewCertificate === undefined || renewCertificate === null) {
        throw new Error("Missing the required parameter 'renewCertificate' when calling renewCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RenewCertificateOutput;
      return this.apiClient.callApi(
        '/renew-certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RenewCertificate} renewCertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RenewCertificateOutput}
     */
    renewCertificate(renewCertificate) {
      return this.renewCertificateWithHttpInfo(renewCertificate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RequestAccess} requestAccess 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RequestAccessOutput} and HTTP response
     */
    requestAccessWithHttpInfo(requestAccess) {
      let postBody = requestAccess;
      // verify the required parameter 'requestAccess' is set
      if (requestAccess === undefined || requestAccess === null) {
        throw new Error("Missing the required parameter 'requestAccess' when calling requestAccess");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RequestAccessOutput;
      return this.apiClient.callApi(
        '/request-access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RequestAccess} requestAccess 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RequestAccessOutput}
     */
    requestAccess(requestAccess) {
      return this.requestAccessWithHttpInfo(requestAccess)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ResetAccessKey} resetAccessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResetAuthMethodAccessKeyOutput} and HTTP response
     */
    resetAccessKeyWithHttpInfo(resetAccessKey) {
      let postBody = resetAccessKey;
      // verify the required parameter 'resetAccessKey' is set
      if (resetAccessKey === undefined || resetAccessKey === null) {
        throw new Error("Missing the required parameter 'resetAccessKey' when calling resetAccessKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResetAuthMethodAccessKeyOutput;
      return this.apiClient.callApi(
        '/reset-access-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ResetAccessKey} resetAccessKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResetAuthMethodAccessKeyOutput}
     */
    resetAccessKey(resetAccessKey) {
      return this.resetAccessKeyWithHttpInfo(resetAccessKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ReverseRBAC} reverseRBAC 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReverseRBACOutput} and HTTP response
     */
    reverseRBACWithHttpInfo(reverseRBAC) {
      let postBody = reverseRBAC;
      // verify the required parameter 'reverseRBAC' is set
      if (reverseRBAC === undefined || reverseRBAC === null) {
        throw new Error("Missing the required parameter 'reverseRBAC' when calling reverseRBAC");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReverseRBACOutput;
      return this.apiClient.callApi(
        '/reverse-rbac', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ReverseRBAC} reverseRBAC 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ReverseRBACOutput}
     */
    reverseRBAC(reverseRBAC) {
      return this.reverseRBACWithHttpInfo(reverseRBAC)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RevokeCertificate} revokeCertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    revokeCertificateWithHttpInfo(revokeCertificate) {
      let postBody = revokeCertificate;
      // verify the required parameter 'revokeCertificate' is set
      if (revokeCertificate === undefined || revokeCertificate === null) {
        throw new Error("Missing the required parameter 'revokeCertificate' when calling revokeCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/revoke-certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RevokeCertificate} revokeCertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    revokeCertificate(revokeCertificate) {
      return this.revokeCertificateWithHttpInfo(revokeCertificate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    revokeCredsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/revoke-creds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    revokeCreds() {
      return this.revokeCredsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RollbackSecret} rollbackSecret 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RollbackSecretOutput} and HTTP response
     */
    rollbackSecretWithHttpInfo(rollbackSecret) {
      let postBody = rollbackSecret;
      // verify the required parameter 'rollbackSecret' is set
      if (rollbackSecret === undefined || rollbackSecret === null) {
        throw new Error("Missing the required parameter 'rollbackSecret' when calling rollbackSecret");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RollbackSecretOutput;
      return this.apiClient.callApi(
        '/rollback-secret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RollbackSecret} rollbackSecret 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RollbackSecretOutput}
     */
    rollbackSecret(rollbackSecret) {
      return this.rollbackSecretWithHttpInfo(rollbackSecret)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotateKey} rotateKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotateKeyOutput} and HTTP response
     */
    rotateKeyWithHttpInfo(rotateKey) {
      let postBody = rotateKey;
      // verify the required parameter 'rotateKey' is set
      if (rotateKey === undefined || rotateKey === null) {
        throw new Error("Missing the required parameter 'rotateKey' when calling rotateKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotateKeyOutput;
      return this.apiClient.callApi(
        '/rotate-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotateKey} rotateKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotateKeyOutput}
     */
    rotateKey(rotateKey) {
      return this.rotateKeyWithHttpInfo(rotateKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotateOidcClientSecret} rotateOidcClientSecret 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotateOidcClientOutput} and HTTP response
     */
    rotateOidcClientSecretWithHttpInfo(rotateOidcClientSecret) {
      let postBody = rotateOidcClientSecret;
      // verify the required parameter 'rotateOidcClientSecret' is set
      if (rotateOidcClientSecret === undefined || rotateOidcClientSecret === null) {
        throw new Error("Missing the required parameter 'rotateOidcClientSecret' when calling rotateOidcClientSecret");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotateOidcClientOutput;
      return this.apiClient.callApi(
        '/rotate-oidc-client-secret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotateOidcClientSecret} rotateOidcClientSecret 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotateOidcClientOutput}
     */
    rotateOidcClientSecret(rotateOidcClientSecret) {
      return this.rotateOidcClientSecretWithHttpInfo(rotateOidcClientSecret)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotateSecret} rotateSecret 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretOutput} and HTTP response
     */
    rotateSecretWithHttpInfo(rotateSecret) {
      let postBody = rotateSecret;
      // verify the required parameter 'rotateSecret' is set
      if (rotateSecret === undefined || rotateSecret === null) {
        throw new Error("Missing the required parameter 'rotateSecret' when calling rotateSecret");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretOutput;
      return this.apiClient.callApi(
        '/gateway-rotate-secret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotateSecret} rotateSecret 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretOutput}
     */
    rotateSecret(rotateSecret) {
      return this.rotateSecretWithHttpInfo(rotateSecret)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretCreateAws} rotatedSecretCreateAws 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretCreateOutput} and HTTP response
     */
    rotatedSecretCreateAwsWithHttpInfo(rotatedSecretCreateAws) {
      let postBody = rotatedSecretCreateAws;
      // verify the required parameter 'rotatedSecretCreateAws' is set
      if (rotatedSecretCreateAws === undefined || rotatedSecretCreateAws === null) {
        throw new Error("Missing the required parameter 'rotatedSecretCreateAws' when calling rotatedSecretCreateAws");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretCreateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-create-aws', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretCreateAws} rotatedSecretCreateAws 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretCreateOutput}
     */
    rotatedSecretCreateAws(rotatedSecretCreateAws) {
      return this.rotatedSecretCreateAwsWithHttpInfo(rotatedSecretCreateAws)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretCreateAzure} rotatedSecretCreateAzure 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretCreateOutput} and HTTP response
     */
    rotatedSecretCreateAzureWithHttpInfo(rotatedSecretCreateAzure) {
      let postBody = rotatedSecretCreateAzure;
      // verify the required parameter 'rotatedSecretCreateAzure' is set
      if (rotatedSecretCreateAzure === undefined || rotatedSecretCreateAzure === null) {
        throw new Error("Missing the required parameter 'rotatedSecretCreateAzure' when calling rotatedSecretCreateAzure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretCreateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-create-azure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretCreateAzure} rotatedSecretCreateAzure 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretCreateOutput}
     */
    rotatedSecretCreateAzure(rotatedSecretCreateAzure) {
      return this.rotatedSecretCreateAzureWithHttpInfo(rotatedSecretCreateAzure)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretCreateCassandra} rotatedSecretCreateCassandra 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretCreateOutput} and HTTP response
     */
    rotatedSecretCreateCassandraWithHttpInfo(rotatedSecretCreateCassandra) {
      let postBody = rotatedSecretCreateCassandra;
      // verify the required parameter 'rotatedSecretCreateCassandra' is set
      if (rotatedSecretCreateCassandra === undefined || rotatedSecretCreateCassandra === null) {
        throw new Error("Missing the required parameter 'rotatedSecretCreateCassandra' when calling rotatedSecretCreateCassandra");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretCreateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-create-cassandra', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretCreateCassandra} rotatedSecretCreateCassandra 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretCreateOutput}
     */
    rotatedSecretCreateCassandra(rotatedSecretCreateCassandra) {
      return this.rotatedSecretCreateCassandraWithHttpInfo(rotatedSecretCreateCassandra)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretCreateCustom} rotatedSecretCreateCustom 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretCreateOutput} and HTTP response
     */
    rotatedSecretCreateCustomWithHttpInfo(rotatedSecretCreateCustom) {
      let postBody = rotatedSecretCreateCustom;
      // verify the required parameter 'rotatedSecretCreateCustom' is set
      if (rotatedSecretCreateCustom === undefined || rotatedSecretCreateCustom === null) {
        throw new Error("Missing the required parameter 'rotatedSecretCreateCustom' when calling rotatedSecretCreateCustom");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretCreateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-create-custom', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretCreateCustom} rotatedSecretCreateCustom 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretCreateOutput}
     */
    rotatedSecretCreateCustom(rotatedSecretCreateCustom) {
      return this.rotatedSecretCreateCustomWithHttpInfo(rotatedSecretCreateCustom)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretCreateDockerhub} rotatedSecretCreateDockerhub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretCreateOutput} and HTTP response
     */
    rotatedSecretCreateDockerhubWithHttpInfo(rotatedSecretCreateDockerhub) {
      let postBody = rotatedSecretCreateDockerhub;
      // verify the required parameter 'rotatedSecretCreateDockerhub' is set
      if (rotatedSecretCreateDockerhub === undefined || rotatedSecretCreateDockerhub === null) {
        throw new Error("Missing the required parameter 'rotatedSecretCreateDockerhub' when calling rotatedSecretCreateDockerhub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretCreateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-create-dockerhub', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretCreateDockerhub} rotatedSecretCreateDockerhub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretCreateOutput}
     */
    rotatedSecretCreateDockerhub(rotatedSecretCreateDockerhub) {
      return this.rotatedSecretCreateDockerhubWithHttpInfo(rotatedSecretCreateDockerhub)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretCreateGcp} rotatedSecretCreateGcp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretCreateOutput} and HTTP response
     */
    rotatedSecretCreateGcpWithHttpInfo(rotatedSecretCreateGcp) {
      let postBody = rotatedSecretCreateGcp;
      // verify the required parameter 'rotatedSecretCreateGcp' is set
      if (rotatedSecretCreateGcp === undefined || rotatedSecretCreateGcp === null) {
        throw new Error("Missing the required parameter 'rotatedSecretCreateGcp' when calling rotatedSecretCreateGcp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretCreateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-create-gcp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretCreateGcp} rotatedSecretCreateGcp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretCreateOutput}
     */
    rotatedSecretCreateGcp(rotatedSecretCreateGcp) {
      return this.rotatedSecretCreateGcpWithHttpInfo(rotatedSecretCreateGcp)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretCreateHanadb} rotatedSecretCreateHanadb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretCreateOutput} and HTTP response
     */
    rotatedSecretCreateHanadbWithHttpInfo(rotatedSecretCreateHanadb) {
      let postBody = rotatedSecretCreateHanadb;
      // verify the required parameter 'rotatedSecretCreateHanadb' is set
      if (rotatedSecretCreateHanadb === undefined || rotatedSecretCreateHanadb === null) {
        throw new Error("Missing the required parameter 'rotatedSecretCreateHanadb' when calling rotatedSecretCreateHanadb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretCreateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-create-hanadb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretCreateHanadb} rotatedSecretCreateHanadb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretCreateOutput}
     */
    rotatedSecretCreateHanadb(rotatedSecretCreateHanadb) {
      return this.rotatedSecretCreateHanadbWithHttpInfo(rotatedSecretCreateHanadb)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretCreateLdap} rotatedSecretCreateLdap 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretCreateOutput} and HTTP response
     */
    rotatedSecretCreateLdapWithHttpInfo(rotatedSecretCreateLdap) {
      let postBody = rotatedSecretCreateLdap;
      // verify the required parameter 'rotatedSecretCreateLdap' is set
      if (rotatedSecretCreateLdap === undefined || rotatedSecretCreateLdap === null) {
        throw new Error("Missing the required parameter 'rotatedSecretCreateLdap' when calling rotatedSecretCreateLdap");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretCreateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-create-ldap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretCreateLdap} rotatedSecretCreateLdap 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretCreateOutput}
     */
    rotatedSecretCreateLdap(rotatedSecretCreateLdap) {
      return this.rotatedSecretCreateLdapWithHttpInfo(rotatedSecretCreateLdap)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretCreateMongodb} rotatedSecretCreateMongodb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretCreateOutput} and HTTP response
     */
    rotatedSecretCreateMongodbWithHttpInfo(rotatedSecretCreateMongodb) {
      let postBody = rotatedSecretCreateMongodb;
      // verify the required parameter 'rotatedSecretCreateMongodb' is set
      if (rotatedSecretCreateMongodb === undefined || rotatedSecretCreateMongodb === null) {
        throw new Error("Missing the required parameter 'rotatedSecretCreateMongodb' when calling rotatedSecretCreateMongodb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretCreateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-create-mongodb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretCreateMongodb} rotatedSecretCreateMongodb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretCreateOutput}
     */
    rotatedSecretCreateMongodb(rotatedSecretCreateMongodb) {
      return this.rotatedSecretCreateMongodbWithHttpInfo(rotatedSecretCreateMongodb)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretCreateMssql} rotatedSecretCreateMssql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretCreateOutput} and HTTP response
     */
    rotatedSecretCreateMssqlWithHttpInfo(rotatedSecretCreateMssql) {
      let postBody = rotatedSecretCreateMssql;
      // verify the required parameter 'rotatedSecretCreateMssql' is set
      if (rotatedSecretCreateMssql === undefined || rotatedSecretCreateMssql === null) {
        throw new Error("Missing the required parameter 'rotatedSecretCreateMssql' when calling rotatedSecretCreateMssql");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretCreateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-create-mssql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretCreateMssql} rotatedSecretCreateMssql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretCreateOutput}
     */
    rotatedSecretCreateMssql(rotatedSecretCreateMssql) {
      return this.rotatedSecretCreateMssqlWithHttpInfo(rotatedSecretCreateMssql)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretCreateMysql} rotatedSecretCreateMysql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretCreateOutput} and HTTP response
     */
    rotatedSecretCreateMysqlWithHttpInfo(rotatedSecretCreateMysql) {
      let postBody = rotatedSecretCreateMysql;
      // verify the required parameter 'rotatedSecretCreateMysql' is set
      if (rotatedSecretCreateMysql === undefined || rotatedSecretCreateMysql === null) {
        throw new Error("Missing the required parameter 'rotatedSecretCreateMysql' when calling rotatedSecretCreateMysql");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretCreateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-create-mysql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretCreateMysql} rotatedSecretCreateMysql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretCreateOutput}
     */
    rotatedSecretCreateMysql(rotatedSecretCreateMysql) {
      return this.rotatedSecretCreateMysqlWithHttpInfo(rotatedSecretCreateMysql)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretCreateOracledb} rotatedSecretCreateOracledb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretCreateOutput} and HTTP response
     */
    rotatedSecretCreateOracledbWithHttpInfo(rotatedSecretCreateOracledb) {
      let postBody = rotatedSecretCreateOracledb;
      // verify the required parameter 'rotatedSecretCreateOracledb' is set
      if (rotatedSecretCreateOracledb === undefined || rotatedSecretCreateOracledb === null) {
        throw new Error("Missing the required parameter 'rotatedSecretCreateOracledb' when calling rotatedSecretCreateOracledb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretCreateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-create-oracledb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretCreateOracledb} rotatedSecretCreateOracledb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretCreateOutput}
     */
    rotatedSecretCreateOracledb(rotatedSecretCreateOracledb) {
      return this.rotatedSecretCreateOracledbWithHttpInfo(rotatedSecretCreateOracledb)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretCreatePostgresql} rotatedSecretCreatePostgresql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretCreateOutput} and HTTP response
     */
    rotatedSecretCreatePostgresqlWithHttpInfo(rotatedSecretCreatePostgresql) {
      let postBody = rotatedSecretCreatePostgresql;
      // verify the required parameter 'rotatedSecretCreatePostgresql' is set
      if (rotatedSecretCreatePostgresql === undefined || rotatedSecretCreatePostgresql === null) {
        throw new Error("Missing the required parameter 'rotatedSecretCreatePostgresql' when calling rotatedSecretCreatePostgresql");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretCreateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-create-postgresql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretCreatePostgresql} rotatedSecretCreatePostgresql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretCreateOutput}
     */
    rotatedSecretCreatePostgresql(rotatedSecretCreatePostgresql) {
      return this.rotatedSecretCreatePostgresqlWithHttpInfo(rotatedSecretCreatePostgresql)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretCreateRedis} rotatedSecretCreateRedis 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretCreateOutput} and HTTP response
     */
    rotatedSecretCreateRedisWithHttpInfo(rotatedSecretCreateRedis) {
      let postBody = rotatedSecretCreateRedis;
      // verify the required parameter 'rotatedSecretCreateRedis' is set
      if (rotatedSecretCreateRedis === undefined || rotatedSecretCreateRedis === null) {
        throw new Error("Missing the required parameter 'rotatedSecretCreateRedis' when calling rotatedSecretCreateRedis");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretCreateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-create-redis', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretCreateRedis} rotatedSecretCreateRedis 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretCreateOutput}
     */
    rotatedSecretCreateRedis(rotatedSecretCreateRedis) {
      return this.rotatedSecretCreateRedisWithHttpInfo(rotatedSecretCreateRedis)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretCreateRedshift} rotatedSecretCreateRedshift 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretCreateOutput} and HTTP response
     */
    rotatedSecretCreateRedshiftWithHttpInfo(rotatedSecretCreateRedshift) {
      let postBody = rotatedSecretCreateRedshift;
      // verify the required parameter 'rotatedSecretCreateRedshift' is set
      if (rotatedSecretCreateRedshift === undefined || rotatedSecretCreateRedshift === null) {
        throw new Error("Missing the required parameter 'rotatedSecretCreateRedshift' when calling rotatedSecretCreateRedshift");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretCreateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-create-redshift', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretCreateRedshift} rotatedSecretCreateRedshift 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretCreateOutput}
     */
    rotatedSecretCreateRedshift(rotatedSecretCreateRedshift) {
      return this.rotatedSecretCreateRedshiftWithHttpInfo(rotatedSecretCreateRedshift)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretCreateSnowflake} rotatedSecretCreateSnowflake 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretCreateOutput} and HTTP response
     */
    rotatedSecretCreateSnowflakeWithHttpInfo(rotatedSecretCreateSnowflake) {
      let postBody = rotatedSecretCreateSnowflake;
      // verify the required parameter 'rotatedSecretCreateSnowflake' is set
      if (rotatedSecretCreateSnowflake === undefined || rotatedSecretCreateSnowflake === null) {
        throw new Error("Missing the required parameter 'rotatedSecretCreateSnowflake' when calling rotatedSecretCreateSnowflake");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretCreateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-create-snowflake', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretCreateSnowflake} rotatedSecretCreateSnowflake 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretCreateOutput}
     */
    rotatedSecretCreateSnowflake(rotatedSecretCreateSnowflake) {
      return this.rotatedSecretCreateSnowflakeWithHttpInfo(rotatedSecretCreateSnowflake)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretCreateSsh} rotatedSecretCreateSsh 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretCreateOutput} and HTTP response
     */
    rotatedSecretCreateSshWithHttpInfo(rotatedSecretCreateSsh) {
      let postBody = rotatedSecretCreateSsh;
      // verify the required parameter 'rotatedSecretCreateSsh' is set
      if (rotatedSecretCreateSsh === undefined || rotatedSecretCreateSsh === null) {
        throw new Error("Missing the required parameter 'rotatedSecretCreateSsh' when calling rotatedSecretCreateSsh");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretCreateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-create-ssh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretCreateSsh} rotatedSecretCreateSsh 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretCreateOutput}
     */
    rotatedSecretCreateSsh(rotatedSecretCreateSsh) {
      return this.rotatedSecretCreateSshWithHttpInfo(rotatedSecretCreateSsh)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretCreateWindows} rotatedSecretCreateWindows 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretCreateOutput} and HTTP response
     */
    rotatedSecretCreateWindowsWithHttpInfo(rotatedSecretCreateWindows) {
      let postBody = rotatedSecretCreateWindows;
      // verify the required parameter 'rotatedSecretCreateWindows' is set
      if (rotatedSecretCreateWindows === undefined || rotatedSecretCreateWindows === null) {
        throw new Error("Missing the required parameter 'rotatedSecretCreateWindows' when calling rotatedSecretCreateWindows");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretCreateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-create-windows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretCreateWindows} rotatedSecretCreateWindows 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretCreateOutput}
     */
    rotatedSecretCreateWindows(rotatedSecretCreateWindows) {
      return this.rotatedSecretCreateWindowsWithHttpInfo(rotatedSecretCreateWindows)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretDelete} rotatedSecretDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteItemOutput} and HTTP response
     */
    rotatedSecretDeleteWithHttpInfo(rotatedSecretDelete) {
      let postBody = rotatedSecretDelete;
      // verify the required parameter 'rotatedSecretDelete' is set
      if (rotatedSecretDelete === undefined || rotatedSecretDelete === null) {
        throw new Error("Missing the required parameter 'rotatedSecretDelete' when calling rotatedSecretDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteItemOutput;
      return this.apiClient.callApi(
        '/rotated-secret-delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretDelete} rotatedSecretDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteItemOutput}
     */
    rotatedSecretDelete(rotatedSecretDelete) {
      return this.rotatedSecretDeleteWithHttpInfo(rotatedSecretDelete)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretDeleteSync} rotatedSecretDeleteSync 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    rotatedSecretDeleteSyncWithHttpInfo(rotatedSecretDeleteSync) {
      let postBody = rotatedSecretDeleteSync;
      // verify the required parameter 'rotatedSecretDeleteSync' is set
      if (rotatedSecretDeleteSync === undefined || rotatedSecretDeleteSync === null) {
        throw new Error("Missing the required parameter 'rotatedSecretDeleteSync' when calling rotatedSecretDeleteSync");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rotated-secret-delete-sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretDeleteSync} rotatedSecretDeleteSync 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    rotatedSecretDeleteSync(rotatedSecretDeleteSync) {
      return this.rotatedSecretDeleteSyncWithHttpInfo(rotatedSecretDeleteSync)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretGetValue} rotatedSecretGetValue 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: Object}>} and HTTP response
     */
    rotatedSecretGetValueWithHttpInfo(rotatedSecretGetValue) {
      let postBody = rotatedSecretGetValue;
      // verify the required parameter 'rotatedSecretGetValue' is set
      if (rotatedSecretGetValue === undefined || rotatedSecretGetValue === null) {
        throw new Error("Missing the required parameter 'rotatedSecretGetValue' when calling rotatedSecretGetValue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/rotated-secret-get-value', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretGetValue} rotatedSecretGetValue 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: Object}>}
     */
    rotatedSecretGetValue(rotatedSecretGetValue) {
      return this.rotatedSecretGetValueWithHttpInfo(rotatedSecretGetValue)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretList} rotatedSecretList 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProducersListReplyObj} and HTTP response
     */
    rotatedSecretListWithHttpInfo(rotatedSecretList) {
      let postBody = rotatedSecretList;
      // verify the required parameter 'rotatedSecretList' is set
      if (rotatedSecretList === undefined || rotatedSecretList === null) {
        throw new Error("Missing the required parameter 'rotatedSecretList' when calling rotatedSecretList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetProducersListReplyObj;
      return this.apiClient.callApi(
        '/rotated-secret-list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretList} rotatedSecretList 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProducersListReplyObj}
     */
    rotatedSecretList(rotatedSecretList) {
      return this.rotatedSecretListWithHttpInfo(rotatedSecretList)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretSync} rotatedSecretSync 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    rotatedSecretSyncWithHttpInfo(rotatedSecretSync) {
      let postBody = rotatedSecretSync;
      // verify the required parameter 'rotatedSecretSync' is set
      if (rotatedSecretSync === undefined || rotatedSecretSync === null) {
        throw new Error("Missing the required parameter 'rotatedSecretSync' when calling rotatedSecretSync");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rotated-secret-sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretSync} rotatedSecretSync 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    rotatedSecretSync(rotatedSecretSync) {
      return this.rotatedSecretSyncWithHttpInfo(rotatedSecretSync)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretUpdateAws} rotatedSecretUpdateAws 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretUpdateOutput} and HTTP response
     */
    rotatedSecretUpdateAwsWithHttpInfo(rotatedSecretUpdateAws) {
      let postBody = rotatedSecretUpdateAws;
      // verify the required parameter 'rotatedSecretUpdateAws' is set
      if (rotatedSecretUpdateAws === undefined || rotatedSecretUpdateAws === null) {
        throw new Error("Missing the required parameter 'rotatedSecretUpdateAws' when calling rotatedSecretUpdateAws");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretUpdateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-update-aws', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretUpdateAws} rotatedSecretUpdateAws 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretUpdateOutput}
     */
    rotatedSecretUpdateAws(rotatedSecretUpdateAws) {
      return this.rotatedSecretUpdateAwsWithHttpInfo(rotatedSecretUpdateAws)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretUpdateAzure} rotatedSecretUpdateAzure 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretUpdateOutput} and HTTP response
     */
    rotatedSecretUpdateAzureWithHttpInfo(rotatedSecretUpdateAzure) {
      let postBody = rotatedSecretUpdateAzure;
      // verify the required parameter 'rotatedSecretUpdateAzure' is set
      if (rotatedSecretUpdateAzure === undefined || rotatedSecretUpdateAzure === null) {
        throw new Error("Missing the required parameter 'rotatedSecretUpdateAzure' when calling rotatedSecretUpdateAzure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretUpdateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-update-azure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretUpdateAzure} rotatedSecretUpdateAzure 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretUpdateOutput}
     */
    rotatedSecretUpdateAzure(rotatedSecretUpdateAzure) {
      return this.rotatedSecretUpdateAzureWithHttpInfo(rotatedSecretUpdateAzure)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretUpdateCassandra} rotatedSecretUpdateCassandra 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretUpdateOutput} and HTTP response
     */
    rotatedSecretUpdateCassandraWithHttpInfo(rotatedSecretUpdateCassandra) {
      let postBody = rotatedSecretUpdateCassandra;
      // verify the required parameter 'rotatedSecretUpdateCassandra' is set
      if (rotatedSecretUpdateCassandra === undefined || rotatedSecretUpdateCassandra === null) {
        throw new Error("Missing the required parameter 'rotatedSecretUpdateCassandra' when calling rotatedSecretUpdateCassandra");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretUpdateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-update-cassandra', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretUpdateCassandra} rotatedSecretUpdateCassandra 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretUpdateOutput}
     */
    rotatedSecretUpdateCassandra(rotatedSecretUpdateCassandra) {
      return this.rotatedSecretUpdateCassandraWithHttpInfo(rotatedSecretUpdateCassandra)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretUpdateCustom} rotatedSecretUpdateCustom 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretUpdateOutput} and HTTP response
     */
    rotatedSecretUpdateCustomWithHttpInfo(rotatedSecretUpdateCustom) {
      let postBody = rotatedSecretUpdateCustom;
      // verify the required parameter 'rotatedSecretUpdateCustom' is set
      if (rotatedSecretUpdateCustom === undefined || rotatedSecretUpdateCustom === null) {
        throw new Error("Missing the required parameter 'rotatedSecretUpdateCustom' when calling rotatedSecretUpdateCustom");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretUpdateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-update-custom', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretUpdateCustom} rotatedSecretUpdateCustom 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretUpdateOutput}
     */
    rotatedSecretUpdateCustom(rotatedSecretUpdateCustom) {
      return this.rotatedSecretUpdateCustomWithHttpInfo(rotatedSecretUpdateCustom)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretUpdateDockerhub} rotatedSecretUpdateDockerhub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretUpdateOutput} and HTTP response
     */
    rotatedSecretUpdateDockerhubWithHttpInfo(rotatedSecretUpdateDockerhub) {
      let postBody = rotatedSecretUpdateDockerhub;
      // verify the required parameter 'rotatedSecretUpdateDockerhub' is set
      if (rotatedSecretUpdateDockerhub === undefined || rotatedSecretUpdateDockerhub === null) {
        throw new Error("Missing the required parameter 'rotatedSecretUpdateDockerhub' when calling rotatedSecretUpdateDockerhub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretUpdateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-update-dockerhub', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretUpdateDockerhub} rotatedSecretUpdateDockerhub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretUpdateOutput}
     */
    rotatedSecretUpdateDockerhub(rotatedSecretUpdateDockerhub) {
      return this.rotatedSecretUpdateDockerhubWithHttpInfo(rotatedSecretUpdateDockerhub)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretUpdateGcp} rotatedSecretUpdateGcp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretUpdateOutput} and HTTP response
     */
    rotatedSecretUpdateGcpWithHttpInfo(rotatedSecretUpdateGcp) {
      let postBody = rotatedSecretUpdateGcp;
      // verify the required parameter 'rotatedSecretUpdateGcp' is set
      if (rotatedSecretUpdateGcp === undefined || rotatedSecretUpdateGcp === null) {
        throw new Error("Missing the required parameter 'rotatedSecretUpdateGcp' when calling rotatedSecretUpdateGcp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretUpdateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-update-gcp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretUpdateGcp} rotatedSecretUpdateGcp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretUpdateOutput}
     */
    rotatedSecretUpdateGcp(rotatedSecretUpdateGcp) {
      return this.rotatedSecretUpdateGcpWithHttpInfo(rotatedSecretUpdateGcp)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretUpdateHanadb} rotatedSecretUpdateHanadb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretUpdateOutput} and HTTP response
     */
    rotatedSecretUpdateHanadbWithHttpInfo(rotatedSecretUpdateHanadb) {
      let postBody = rotatedSecretUpdateHanadb;
      // verify the required parameter 'rotatedSecretUpdateHanadb' is set
      if (rotatedSecretUpdateHanadb === undefined || rotatedSecretUpdateHanadb === null) {
        throw new Error("Missing the required parameter 'rotatedSecretUpdateHanadb' when calling rotatedSecretUpdateHanadb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretUpdateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-update-hanadb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretUpdateHanadb} rotatedSecretUpdateHanadb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretUpdateOutput}
     */
    rotatedSecretUpdateHanadb(rotatedSecretUpdateHanadb) {
      return this.rotatedSecretUpdateHanadbWithHttpInfo(rotatedSecretUpdateHanadb)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretUpdateLdap} rotatedSecretUpdateLdap 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretUpdateOutput} and HTTP response
     */
    rotatedSecretUpdateLdapWithHttpInfo(rotatedSecretUpdateLdap) {
      let postBody = rotatedSecretUpdateLdap;
      // verify the required parameter 'rotatedSecretUpdateLdap' is set
      if (rotatedSecretUpdateLdap === undefined || rotatedSecretUpdateLdap === null) {
        throw new Error("Missing the required parameter 'rotatedSecretUpdateLdap' when calling rotatedSecretUpdateLdap");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretUpdateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-update-ldap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretUpdateLdap} rotatedSecretUpdateLdap 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretUpdateOutput}
     */
    rotatedSecretUpdateLdap(rotatedSecretUpdateLdap) {
      return this.rotatedSecretUpdateLdapWithHttpInfo(rotatedSecretUpdateLdap)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretUpdateMongodb} rotatedSecretUpdateMongodb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretUpdateOutput} and HTTP response
     */
    rotatedSecretUpdateMongodbWithHttpInfo(rotatedSecretUpdateMongodb) {
      let postBody = rotatedSecretUpdateMongodb;
      // verify the required parameter 'rotatedSecretUpdateMongodb' is set
      if (rotatedSecretUpdateMongodb === undefined || rotatedSecretUpdateMongodb === null) {
        throw new Error("Missing the required parameter 'rotatedSecretUpdateMongodb' when calling rotatedSecretUpdateMongodb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretUpdateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-update-mongodb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretUpdateMongodb} rotatedSecretUpdateMongodb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretUpdateOutput}
     */
    rotatedSecretUpdateMongodb(rotatedSecretUpdateMongodb) {
      return this.rotatedSecretUpdateMongodbWithHttpInfo(rotatedSecretUpdateMongodb)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretUpdateMssql} rotatedSecretUpdateMssql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretUpdateOutput} and HTTP response
     */
    rotatedSecretUpdateMssqlWithHttpInfo(rotatedSecretUpdateMssql) {
      let postBody = rotatedSecretUpdateMssql;
      // verify the required parameter 'rotatedSecretUpdateMssql' is set
      if (rotatedSecretUpdateMssql === undefined || rotatedSecretUpdateMssql === null) {
        throw new Error("Missing the required parameter 'rotatedSecretUpdateMssql' when calling rotatedSecretUpdateMssql");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretUpdateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-update-mssql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretUpdateMssql} rotatedSecretUpdateMssql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretUpdateOutput}
     */
    rotatedSecretUpdateMssql(rotatedSecretUpdateMssql) {
      return this.rotatedSecretUpdateMssqlWithHttpInfo(rotatedSecretUpdateMssql)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretUpdateMysql} rotatedSecretUpdateMysql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretUpdateOutput} and HTTP response
     */
    rotatedSecretUpdateMysqlWithHttpInfo(rotatedSecretUpdateMysql) {
      let postBody = rotatedSecretUpdateMysql;
      // verify the required parameter 'rotatedSecretUpdateMysql' is set
      if (rotatedSecretUpdateMysql === undefined || rotatedSecretUpdateMysql === null) {
        throw new Error("Missing the required parameter 'rotatedSecretUpdateMysql' when calling rotatedSecretUpdateMysql");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretUpdateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-update-mysql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretUpdateMysql} rotatedSecretUpdateMysql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretUpdateOutput}
     */
    rotatedSecretUpdateMysql(rotatedSecretUpdateMysql) {
      return this.rotatedSecretUpdateMysqlWithHttpInfo(rotatedSecretUpdateMysql)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretUpdateOracledb} rotatedSecretUpdateOracledb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretUpdateOutput} and HTTP response
     */
    rotatedSecretUpdateOracledbWithHttpInfo(rotatedSecretUpdateOracledb) {
      let postBody = rotatedSecretUpdateOracledb;
      // verify the required parameter 'rotatedSecretUpdateOracledb' is set
      if (rotatedSecretUpdateOracledb === undefined || rotatedSecretUpdateOracledb === null) {
        throw new Error("Missing the required parameter 'rotatedSecretUpdateOracledb' when calling rotatedSecretUpdateOracledb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretUpdateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-update-oracledb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretUpdateOracledb} rotatedSecretUpdateOracledb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretUpdateOutput}
     */
    rotatedSecretUpdateOracledb(rotatedSecretUpdateOracledb) {
      return this.rotatedSecretUpdateOracledbWithHttpInfo(rotatedSecretUpdateOracledb)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretUpdatePostgresql} rotatedSecretUpdatePostgresql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretUpdateOutput} and HTTP response
     */
    rotatedSecretUpdatePostgresqlWithHttpInfo(rotatedSecretUpdatePostgresql) {
      let postBody = rotatedSecretUpdatePostgresql;
      // verify the required parameter 'rotatedSecretUpdatePostgresql' is set
      if (rotatedSecretUpdatePostgresql === undefined || rotatedSecretUpdatePostgresql === null) {
        throw new Error("Missing the required parameter 'rotatedSecretUpdatePostgresql' when calling rotatedSecretUpdatePostgresql");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretUpdateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-update-postgresql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretUpdatePostgresql} rotatedSecretUpdatePostgresql 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretUpdateOutput}
     */
    rotatedSecretUpdatePostgresql(rotatedSecretUpdatePostgresql) {
      return this.rotatedSecretUpdatePostgresqlWithHttpInfo(rotatedSecretUpdatePostgresql)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretUpdateRedis} rotatedSecretUpdateRedis 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretUpdateOutput} and HTTP response
     */
    rotatedSecretUpdateRedisWithHttpInfo(rotatedSecretUpdateRedis) {
      let postBody = rotatedSecretUpdateRedis;
      // verify the required parameter 'rotatedSecretUpdateRedis' is set
      if (rotatedSecretUpdateRedis === undefined || rotatedSecretUpdateRedis === null) {
        throw new Error("Missing the required parameter 'rotatedSecretUpdateRedis' when calling rotatedSecretUpdateRedis");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretUpdateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-update-redis', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretUpdateRedis} rotatedSecretUpdateRedis 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretUpdateOutput}
     */
    rotatedSecretUpdateRedis(rotatedSecretUpdateRedis) {
      return this.rotatedSecretUpdateRedisWithHttpInfo(rotatedSecretUpdateRedis)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretUpdateRedshift} rotatedSecretUpdateRedshift 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretUpdateOutput} and HTTP response
     */
    rotatedSecretUpdateRedshiftWithHttpInfo(rotatedSecretUpdateRedshift) {
      let postBody = rotatedSecretUpdateRedshift;
      // verify the required parameter 'rotatedSecretUpdateRedshift' is set
      if (rotatedSecretUpdateRedshift === undefined || rotatedSecretUpdateRedshift === null) {
        throw new Error("Missing the required parameter 'rotatedSecretUpdateRedshift' when calling rotatedSecretUpdateRedshift");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretUpdateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-update-redshift', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretUpdateRedshift} rotatedSecretUpdateRedshift 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretUpdateOutput}
     */
    rotatedSecretUpdateRedshift(rotatedSecretUpdateRedshift) {
      return this.rotatedSecretUpdateRedshiftWithHttpInfo(rotatedSecretUpdateRedshift)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretUpdateSnowflake} rotatedSecretUpdateSnowflake 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretUpdateOutput} and HTTP response
     */
    rotatedSecretUpdateSnowflakeWithHttpInfo(rotatedSecretUpdateSnowflake) {
      let postBody = rotatedSecretUpdateSnowflake;
      // verify the required parameter 'rotatedSecretUpdateSnowflake' is set
      if (rotatedSecretUpdateSnowflake === undefined || rotatedSecretUpdateSnowflake === null) {
        throw new Error("Missing the required parameter 'rotatedSecretUpdateSnowflake' when calling rotatedSecretUpdateSnowflake");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretUpdateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-update-snowflake', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretUpdateSnowflake} rotatedSecretUpdateSnowflake 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretUpdateOutput}
     */
    rotatedSecretUpdateSnowflake(rotatedSecretUpdateSnowflake) {
      return this.rotatedSecretUpdateSnowflakeWithHttpInfo(rotatedSecretUpdateSnowflake)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretUpdateSsh} rotatedSecretUpdateSsh 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretUpdateOutput} and HTTP response
     */
    rotatedSecretUpdateSshWithHttpInfo(rotatedSecretUpdateSsh) {
      let postBody = rotatedSecretUpdateSsh;
      // verify the required parameter 'rotatedSecretUpdateSsh' is set
      if (rotatedSecretUpdateSsh === undefined || rotatedSecretUpdateSsh === null) {
        throw new Error("Missing the required parameter 'rotatedSecretUpdateSsh' when calling rotatedSecretUpdateSsh");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretUpdateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-update-ssh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretUpdateSsh} rotatedSecretUpdateSsh 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretUpdateOutput}
     */
    rotatedSecretUpdateSsh(rotatedSecretUpdateSsh) {
      return this.rotatedSecretUpdateSshWithHttpInfo(rotatedSecretUpdateSsh)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotatedSecretUpdateWindows} rotatedSecretUpdateWindows 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretUpdateOutput} and HTTP response
     */
    rotatedSecretUpdateWindowsWithHttpInfo(rotatedSecretUpdateWindows) {
      let postBody = rotatedSecretUpdateWindows;
      // verify the required parameter 'rotatedSecretUpdateWindows' is set
      if (rotatedSecretUpdateWindows === undefined || rotatedSecretUpdateWindows === null) {
        throw new Error("Missing the required parameter 'rotatedSecretUpdateWindows' when calling rotatedSecretUpdateWindows");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretUpdateOutput;
      return this.apiClient.callApi(
        '/rotated-secret-update-windows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotatedSecretUpdateWindows} rotatedSecretUpdateWindows 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretUpdateOutput}
     */
    rotatedSecretUpdateWindows(rotatedSecretUpdateWindows) {
      return this.rotatedSecretUpdateWindowsWithHttpInfo(rotatedSecretUpdateWindows)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/SetItemState} setItemState 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    setItemStateWithHttpInfo(setItemState) {
      let postBody = setItemState;
      // verify the required parameter 'setItemState' is set
      if (setItemState === undefined || setItemState === null) {
        throw new Error("Missing the required parameter 'setItemState' when calling setItemState");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/set-item-state', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/SetItemState} setItemState 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    setItemState(setItemState) {
      return this.setItemStateWithHttpInfo(setItemState)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/SetRoleRule} setRoleRule 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    setRoleRuleWithHttpInfo(setRoleRule) {
      let postBody = setRoleRule;
      // verify the required parameter 'setRoleRule' is set
      if (setRoleRule === undefined || setRoleRule === null) {
        throw new Error("Missing the required parameter 'setRoleRule' when calling setRoleRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/set-role-rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/SetRoleRule} setRoleRule 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    setRoleRule(setRoleRule) {
      return this.setRoleRuleWithHttpInfo(setRoleRule)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ShareItem} shareItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ShareItemOutput} and HTTP response
     */
    shareItemWithHttpInfo(shareItem) {
      let postBody = shareItem;
      // verify the required parameter 'shareItem' is set
      if (shareItem === undefined || shareItem === null) {
        throw new Error("Missing the required parameter 'shareItem' when calling shareItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShareItemOutput;
      return this.apiClient.callApi(
        '/share-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ShareItem} shareItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ShareItemOutput}
     */
    shareItem(shareItem) {
      return this.shareItemWithHttpInfo(shareItem)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/SignDataWithClassicKey} signDataWithClassicKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignOutput} and HTTP response
     */
    signDataWithClassicKeyWithHttpInfo(signDataWithClassicKey) {
      let postBody = signDataWithClassicKey;
      // verify the required parameter 'signDataWithClassicKey' is set
      if (signDataWithClassicKey === undefined || signDataWithClassicKey === null) {
        throw new Error("Missing the required parameter 'signDataWithClassicKey' when calling signDataWithClassicKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignOutput;
      return this.apiClient.callApi(
        '/sign-data-with-classic-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/SignDataWithClassicKey} signDataWithClassicKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignOutput}
     */
    signDataWithClassicKey(signDataWithClassicKey) {
      return this.signDataWithClassicKeyWithHttpInfo(signDataWithClassicKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/SignEcDsa} signEcDsa 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignEcDsaOutput} and HTTP response
     */
    signEcDsaWithHttpInfo(signEcDsa) {
      let postBody = signEcDsa;
      // verify the required parameter 'signEcDsa' is set
      if (signEcDsa === undefined || signEcDsa === null) {
        throw new Error("Missing the required parameter 'signEcDsa' when calling signEcDsa");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignEcDsaOutput;
      return this.apiClient.callApi(
        '/sign-ecdsa', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/SignEcDsa} signEcDsa 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignEcDsaOutput}
     */
    signEcDsa(signEcDsa) {
      return this.signEcDsaWithHttpInfo(signEcDsa)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/SignGPG} signGPG 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignGPGOutput} and HTTP response
     */
    signGPGWithHttpInfo(signGPG) {
      let postBody = signGPG;
      // verify the required parameter 'signGPG' is set
      if (signGPG === undefined || signGPG === null) {
        throw new Error("Missing the required parameter 'signGPG' when calling signGPG");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignGPGOutput;
      return this.apiClient.callApi(
        '/sign-gpg', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/SignGPG} signGPG 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignGPGOutput}
     */
    signGPG(signGPG) {
      return this.signGPGWithHttpInfo(signGPG)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/SignJWTWithClassicKey} signJWTWithClassicKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignJWTOutput} and HTTP response
     */
    signJWTWithClassicKeyWithHttpInfo(signJWTWithClassicKey) {
      let postBody = signJWTWithClassicKey;
      // verify the required parameter 'signJWTWithClassicKey' is set
      if (signJWTWithClassicKey === undefined || signJWTWithClassicKey === null) {
        throw new Error("Missing the required parameter 'signJWTWithClassicKey' when calling signJWTWithClassicKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignJWTOutput;
      return this.apiClient.callApi(
        '/sign-jwt-with-classic-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/SignJWTWithClassicKey} signJWTWithClassicKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignJWTOutput}
     */
    signJWTWithClassicKey(signJWTWithClassicKey) {
      return this.signJWTWithClassicKeyWithHttpInfo(signJWTWithClassicKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/SignPKCS1} signPKCS1 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignPKCS1Output} and HTTP response
     */
    signPKCS1WithHttpInfo(signPKCS1) {
      let postBody = signPKCS1;
      // verify the required parameter 'signPKCS1' is set
      if (signPKCS1 === undefined || signPKCS1 === null) {
        throw new Error("Missing the required parameter 'signPKCS1' when calling signPKCS1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignPKCS1Output;
      return this.apiClient.callApi(
        '/sign-pkcs1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/SignPKCS1} signPKCS1 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignPKCS1Output}
     */
    signPKCS1(signPKCS1) {
      return this.signPKCS1WithHttpInfo(signPKCS1)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/SignPKICertWithClassicKey} signPKICertWithClassicKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignPKICertOutput} and HTTP response
     */
    signPKICertWithClassicKeyWithHttpInfo(signPKICertWithClassicKey) {
      let postBody = signPKICertWithClassicKey;
      // verify the required parameter 'signPKICertWithClassicKey' is set
      if (signPKICertWithClassicKey === undefined || signPKICertWithClassicKey === null) {
        throw new Error("Missing the required parameter 'signPKICertWithClassicKey' when calling signPKICertWithClassicKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignPKICertOutput;
      return this.apiClient.callApi(
        '/sign-pki-cert-with-classic-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/SignPKICertWithClassicKey} signPKICertWithClassicKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignPKICertOutput}
     */
    signPKICertWithClassicKey(signPKICertWithClassicKey) {
      return this.signPKICertWithClassicKeyWithHttpInfo(signPKICertWithClassicKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/SignRsaSsaPss} signRsaSsaPss 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignRsaSsaPssOutput} and HTTP response
     */
    signRsaSsaPssWithHttpInfo(signRsaSsaPss) {
      let postBody = signRsaSsaPss;
      // verify the required parameter 'signRsaSsaPss' is set
      if (signRsaSsaPss === undefined || signRsaSsaPss === null) {
        throw new Error("Missing the required parameter 'signRsaSsaPss' when calling signRsaSsaPss");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignRsaSsaPssOutput;
      return this.apiClient.callApi(
        '/sign-rsassa-pss', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/SignRsaSsaPss} signRsaSsaPss 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignRsaSsaPssOutput}
     */
    signRsaSsaPss(signRsaSsaPss) {
      return this.signRsaSsaPssWithHttpInfo(signRsaSsaPss)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/StaticCredsAuth} staticCredsAuth 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StaticCredsAuthOutput} and HTTP response
     */
    staticCredsAuthWithHttpInfo(staticCredsAuth) {
      let postBody = staticCredsAuth;
      // verify the required parameter 'staticCredsAuth' is set
      if (staticCredsAuth === undefined || staticCredsAuth === null) {
        throw new Error("Missing the required parameter 'staticCredsAuth' when calling staticCredsAuth");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StaticCredsAuthOutput;
      return this.apiClient.callApi(
        '/static-creds-auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/StaticCredsAuth} staticCredsAuth 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StaticCredsAuthOutput}
     */
    staticCredsAuth(staticCredsAuth) {
      return this.staticCredsAuthWithHttpInfo(staticCredsAuth)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateArtifactory} targetCreateArtifactory 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateArtifactoryWithHttpInfo(targetCreateArtifactory) {
      let postBody = targetCreateArtifactory;
      // verify the required parameter 'targetCreateArtifactory' is set
      if (targetCreateArtifactory === undefined || targetCreateArtifactory === null) {
        throw new Error("Missing the required parameter 'targetCreateArtifactory' when calling targetCreateArtifactory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-artifactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateArtifactory} targetCreateArtifactory 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateArtifactory(targetCreateArtifactory) {
      return this.targetCreateArtifactoryWithHttpInfo(targetCreateArtifactory)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateAws} targetCreateAws 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateAwsWithHttpInfo(targetCreateAws) {
      let postBody = targetCreateAws;
      // verify the required parameter 'targetCreateAws' is set
      if (targetCreateAws === undefined || targetCreateAws === null) {
        throw new Error("Missing the required parameter 'targetCreateAws' when calling targetCreateAws");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-aws', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateAws} targetCreateAws 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateAws(targetCreateAws) {
      return this.targetCreateAwsWithHttpInfo(targetCreateAws)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateAzure} targetCreateAzure 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateAzureWithHttpInfo(targetCreateAzure) {
      let postBody = targetCreateAzure;
      // verify the required parameter 'targetCreateAzure' is set
      if (targetCreateAzure === undefined || targetCreateAzure === null) {
        throw new Error("Missing the required parameter 'targetCreateAzure' when calling targetCreateAzure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-azure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateAzure} targetCreateAzure 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateAzure(targetCreateAzure) {
      return this.targetCreateAzureWithHttpInfo(targetCreateAzure)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateDB} targetCreateDB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateDBWithHttpInfo(targetCreateDB) {
      let postBody = targetCreateDB;
      // verify the required parameter 'targetCreateDB' is set
      if (targetCreateDB === undefined || targetCreateDB === null) {
        throw new Error("Missing the required parameter 'targetCreateDB' when calling targetCreateDB");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-db', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateDB} targetCreateDB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateDB(targetCreateDB) {
      return this.targetCreateDBWithHttpInfo(targetCreateDB)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateDockerhub} targetCreateDockerhub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateDockerhubWithHttpInfo(targetCreateDockerhub) {
      let postBody = targetCreateDockerhub;
      // verify the required parameter 'targetCreateDockerhub' is set
      if (targetCreateDockerhub === undefined || targetCreateDockerhub === null) {
        throw new Error("Missing the required parameter 'targetCreateDockerhub' when calling targetCreateDockerhub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-dockerhub', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateDockerhub} targetCreateDockerhub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateDockerhub(targetCreateDockerhub) {
      return this.targetCreateDockerhubWithHttpInfo(targetCreateDockerhub)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateEks} targetCreateEks 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateEksWithHttpInfo(targetCreateEks) {
      let postBody = targetCreateEks;
      // verify the required parameter 'targetCreateEks' is set
      if (targetCreateEks === undefined || targetCreateEks === null) {
        throw new Error("Missing the required parameter 'targetCreateEks' when calling targetCreateEks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-eks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateEks} targetCreateEks 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateEks(targetCreateEks) {
      return this.targetCreateEksWithHttpInfo(targetCreateEks)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateGcp} targetCreateGcp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateGcpWithHttpInfo(targetCreateGcp) {
      let postBody = targetCreateGcp;
      // verify the required parameter 'targetCreateGcp' is set
      if (targetCreateGcp === undefined || targetCreateGcp === null) {
        throw new Error("Missing the required parameter 'targetCreateGcp' when calling targetCreateGcp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-gcp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateGcp} targetCreateGcp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateGcp(targetCreateGcp) {
      return this.targetCreateGcpWithHttpInfo(targetCreateGcp)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateGithub} targetCreateGithub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateGithubWithHttpInfo(targetCreateGithub) {
      let postBody = targetCreateGithub;
      // verify the required parameter 'targetCreateGithub' is set
      if (targetCreateGithub === undefined || targetCreateGithub === null) {
        throw new Error("Missing the required parameter 'targetCreateGithub' when calling targetCreateGithub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-github', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateGithub} targetCreateGithub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateGithub(targetCreateGithub) {
      return this.targetCreateGithubWithHttpInfo(targetCreateGithub)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateGitlab} targetCreateGitlab 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateGitlabWithHttpInfo(targetCreateGitlab) {
      let postBody = targetCreateGitlab;
      // verify the required parameter 'targetCreateGitlab' is set
      if (targetCreateGitlab === undefined || targetCreateGitlab === null) {
        throw new Error("Missing the required parameter 'targetCreateGitlab' when calling targetCreateGitlab");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-gitlab', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateGitlab} targetCreateGitlab 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateGitlab(targetCreateGitlab) {
      return this.targetCreateGitlabWithHttpInfo(targetCreateGitlab)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateGke} targetCreateGke 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateGkeWithHttpInfo(targetCreateGke) {
      let postBody = targetCreateGke;
      // verify the required parameter 'targetCreateGke' is set
      if (targetCreateGke === undefined || targetCreateGke === null) {
        throw new Error("Missing the required parameter 'targetCreateGke' when calling targetCreateGke");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-gke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateGke} targetCreateGke 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateGke(targetCreateGke) {
      return this.targetCreateGkeWithHttpInfo(targetCreateGke)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateGlobalSign} targetCreateGlobalSign 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateGlobalSignWithHttpInfo(targetCreateGlobalSign) {
      let postBody = targetCreateGlobalSign;
      // verify the required parameter 'targetCreateGlobalSign' is set
      if (targetCreateGlobalSign === undefined || targetCreateGlobalSign === null) {
        throw new Error("Missing the required parameter 'targetCreateGlobalSign' when calling targetCreateGlobalSign");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-globalsign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateGlobalSign} targetCreateGlobalSign 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateGlobalSign(targetCreateGlobalSign) {
      return this.targetCreateGlobalSignWithHttpInfo(targetCreateGlobalSign)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateGlobalSignAtlas} targetCreateGlobalSignAtlas 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateGlobalSignAtlasWithHttpInfo(targetCreateGlobalSignAtlas) {
      let postBody = targetCreateGlobalSignAtlas;
      // verify the required parameter 'targetCreateGlobalSignAtlas' is set
      if (targetCreateGlobalSignAtlas === undefined || targetCreateGlobalSignAtlas === null) {
        throw new Error("Missing the required parameter 'targetCreateGlobalSignAtlas' when calling targetCreateGlobalSignAtlas");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-globalsign-atlas', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateGlobalSignAtlas} targetCreateGlobalSignAtlas 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateGlobalSignAtlas(targetCreateGlobalSignAtlas) {
      return this.targetCreateGlobalSignAtlasWithHttpInfo(targetCreateGlobalSignAtlas)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateGodaddy} targetCreateGodaddy 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateGodaddyWithHttpInfo(targetCreateGodaddy) {
      let postBody = targetCreateGodaddy;
      // verify the required parameter 'targetCreateGodaddy' is set
      if (targetCreateGodaddy === undefined || targetCreateGodaddy === null) {
        throw new Error("Missing the required parameter 'targetCreateGodaddy' when calling targetCreateGodaddy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-godaddy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateGodaddy} targetCreateGodaddy 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateGodaddy(targetCreateGodaddy) {
      return this.targetCreateGodaddyWithHttpInfo(targetCreateGodaddy)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateHashiVault} targetCreateHashiVault 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateHashiVaultWithHttpInfo(targetCreateHashiVault) {
      let postBody = targetCreateHashiVault;
      // verify the required parameter 'targetCreateHashiVault' is set
      if (targetCreateHashiVault === undefined || targetCreateHashiVault === null) {
        throw new Error("Missing the required parameter 'targetCreateHashiVault' when calling targetCreateHashiVault");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-hashi-vault', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateHashiVault} targetCreateHashiVault 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateHashiVault(targetCreateHashiVault) {
      return this.targetCreateHashiVaultWithHttpInfo(targetCreateHashiVault)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateK8s} targetCreateK8s 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateK8sWithHttpInfo(targetCreateK8s) {
      let postBody = targetCreateK8s;
      // verify the required parameter 'targetCreateK8s' is set
      if (targetCreateK8s === undefined || targetCreateK8s === null) {
        throw new Error("Missing the required parameter 'targetCreateK8s' when calling targetCreateK8s");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-k8s', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateK8s} targetCreateK8s 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateK8s(targetCreateK8s) {
      return this.targetCreateK8sWithHttpInfo(targetCreateK8s)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateLdap} targetCreateLdap 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateLdapWithHttpInfo(targetCreateLdap) {
      let postBody = targetCreateLdap;
      // verify the required parameter 'targetCreateLdap' is set
      if (targetCreateLdap === undefined || targetCreateLdap === null) {
        throw new Error("Missing the required parameter 'targetCreateLdap' when calling targetCreateLdap");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-ldap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateLdap} targetCreateLdap 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateLdap(targetCreateLdap) {
      return this.targetCreateLdapWithHttpInfo(targetCreateLdap)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateLinked} targetCreateLinked 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateLinkedWithHttpInfo(targetCreateLinked) {
      let postBody = targetCreateLinked;
      // verify the required parameter 'targetCreateLinked' is set
      if (targetCreateLinked === undefined || targetCreateLinked === null) {
        throw new Error("Missing the required parameter 'targetCreateLinked' when calling targetCreateLinked");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-linked', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateLinked} targetCreateLinked 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateLinked(targetCreateLinked) {
      return this.targetCreateLinkedWithHttpInfo(targetCreateLinked)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreatePing} targetCreatePing 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreatePingWithHttpInfo(targetCreatePing) {
      let postBody = targetCreatePing;
      // verify the required parameter 'targetCreatePing' is set
      if (targetCreatePing === undefined || targetCreatePing === null) {
        throw new Error("Missing the required parameter 'targetCreatePing' when calling targetCreatePing");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-ping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreatePing} targetCreatePing 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreatePing(targetCreatePing) {
      return this.targetCreatePingWithHttpInfo(targetCreatePing)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateRabbitMq} targetCreateRabbitMq 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateRabbitMqWithHttpInfo(targetCreateRabbitMq) {
      let postBody = targetCreateRabbitMq;
      // verify the required parameter 'targetCreateRabbitMq' is set
      if (targetCreateRabbitMq === undefined || targetCreateRabbitMq === null) {
        throw new Error("Missing the required parameter 'targetCreateRabbitMq' when calling targetCreateRabbitMq");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-rabbitmq', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateRabbitMq} targetCreateRabbitMq 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateRabbitMq(targetCreateRabbitMq) {
      return this.targetCreateRabbitMqWithHttpInfo(targetCreateRabbitMq)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateSalesforce} targetCreateSalesforce 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateSalesforceWithHttpInfo(targetCreateSalesforce) {
      let postBody = targetCreateSalesforce;
      // verify the required parameter 'targetCreateSalesforce' is set
      if (targetCreateSalesforce === undefined || targetCreateSalesforce === null) {
        throw new Error("Missing the required parameter 'targetCreateSalesforce' when calling targetCreateSalesforce");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-salesforce', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateSalesforce} targetCreateSalesforce 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateSalesforce(targetCreateSalesforce) {
      return this.targetCreateSalesforceWithHttpInfo(targetCreateSalesforce)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateSectigo} targetCreateSectigo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateSectigoWithHttpInfo(targetCreateSectigo) {
      let postBody = targetCreateSectigo;
      // verify the required parameter 'targetCreateSectigo' is set
      if (targetCreateSectigo === undefined || targetCreateSectigo === null) {
        throw new Error("Missing the required parameter 'targetCreateSectigo' when calling targetCreateSectigo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-sectigo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateSectigo} targetCreateSectigo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateSectigo(targetCreateSectigo) {
      return this.targetCreateSectigoWithHttpInfo(targetCreateSectigo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateSsh} targetCreateSsh 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateSshWithHttpInfo(targetCreateSsh) {
      let postBody = targetCreateSsh;
      // verify the required parameter 'targetCreateSsh' is set
      if (targetCreateSsh === undefined || targetCreateSsh === null) {
        throw new Error("Missing the required parameter 'targetCreateSsh' when calling targetCreateSsh");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-ssh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateSsh} targetCreateSsh 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateSsh(targetCreateSsh) {
      return this.targetCreateSshWithHttpInfo(targetCreateSsh)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateWeb} targetCreateWeb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateWebWithHttpInfo(targetCreateWeb) {
      let postBody = targetCreateWeb;
      // verify the required parameter 'targetCreateWeb' is set
      if (targetCreateWeb === undefined || targetCreateWeb === null) {
        throw new Error("Missing the required parameter 'targetCreateWeb' when calling targetCreateWeb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-web', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateWeb} targetCreateWeb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateWeb(targetCreateWeb) {
      return this.targetCreateWebWithHttpInfo(targetCreateWeb)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateWindows} targetCreateWindows 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateWindowsWithHttpInfo(targetCreateWindows) {
      let postBody = targetCreateWindows;
      // verify the required parameter 'targetCreateWindows' is set
      if (targetCreateWindows === undefined || targetCreateWindows === null) {
        throw new Error("Missing the required parameter 'targetCreateWindows' when calling targetCreateWindows");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-windows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateWindows} targetCreateWindows 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateWindows(targetCreateWindows) {
      return this.targetCreateWindowsWithHttpInfo(targetCreateWindows)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetCreateZeroSSL} targetCreateZeroSSL 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetCreateOutput} and HTTP response
     */
    targetCreateZeroSSLWithHttpInfo(targetCreateZeroSSL) {
      let postBody = targetCreateZeroSSL;
      // verify the required parameter 'targetCreateZeroSSL' is set
      if (targetCreateZeroSSL === undefined || targetCreateZeroSSL === null) {
        throw new Error("Missing the required parameter 'targetCreateZeroSSL' when calling targetCreateZeroSSL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetCreateOutput;
      return this.apiClient.callApi(
        '/target-create-zerossl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetCreateZeroSSL} targetCreateZeroSSL 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetCreateOutput}
     */
    targetCreateZeroSSL(targetCreateZeroSSL) {
      return this.targetCreateZeroSSLWithHttpInfo(targetCreateZeroSSL)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetDelete} targetDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    targetDeleteWithHttpInfo(targetDelete) {
      let postBody = targetDelete;
      // verify the required parameter 'targetDelete' is set
      if (targetDelete === undefined || targetDelete === null) {
        throw new Error("Missing the required parameter 'targetDelete' when calling targetDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/target-delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetDelete} targetDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    targetDelete(targetDelete) {
      return this.targetDeleteWithHttpInfo(targetDelete)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetGet} targetGet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Target} and HTTP response
     */
    targetGetWithHttpInfo(targetGet) {
      let postBody = targetGet;
      // verify the required parameter 'targetGet' is set
      if (targetGet === undefined || targetGet === null) {
        throw new Error("Missing the required parameter 'targetGet' when calling targetGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Target;
      return this.apiClient.callApi(
        '/target-get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetGet} targetGet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Target}
     */
    targetGet(targetGet) {
      return this.targetGetWithHttpInfo(targetGet)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetGetDetails} targetGetDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTargetDetailsOutput} and HTTP response
     */
    targetGetDetailsWithHttpInfo(targetGetDetails) {
      let postBody = targetGetDetails;
      // verify the required parameter 'targetGetDetails' is set
      if (targetGetDetails === undefined || targetGetDetails === null) {
        throw new Error("Missing the required parameter 'targetGetDetails' when calling targetGetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTargetDetailsOutput;
      return this.apiClient.callApi(
        '/target-get-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetGetDetails} targetGetDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTargetDetailsOutput}
     */
    targetGetDetails(targetGetDetails) {
      return this.targetGetDetailsWithHttpInfo(targetGetDetails)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetList} targetList 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTargetsOutput} and HTTP response
     */
    targetListWithHttpInfo(targetList) {
      let postBody = targetList;
      // verify the required parameter 'targetList' is set
      if (targetList === undefined || targetList === null) {
        throw new Error("Missing the required parameter 'targetList' when calling targetList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTargetsOutput;
      return this.apiClient.callApi(
        '/target-list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetList} targetList 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTargetsOutput}
     */
    targetList(targetList) {
      return this.targetListWithHttpInfo(targetList)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateArtifactory} targetUpdateArtifactory 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateArtifactoryWithHttpInfo(targetUpdateArtifactory) {
      let postBody = targetUpdateArtifactory;
      // verify the required parameter 'targetUpdateArtifactory' is set
      if (targetUpdateArtifactory === undefined || targetUpdateArtifactory === null) {
        throw new Error("Missing the required parameter 'targetUpdateArtifactory' when calling targetUpdateArtifactory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-artifactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateArtifactory} targetUpdateArtifactory 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateArtifactory(targetUpdateArtifactory) {
      return this.targetUpdateArtifactoryWithHttpInfo(targetUpdateArtifactory)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateAws} targetUpdateAws 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateAwsWithHttpInfo(targetUpdateAws) {
      let postBody = targetUpdateAws;
      // verify the required parameter 'targetUpdateAws' is set
      if (targetUpdateAws === undefined || targetUpdateAws === null) {
        throw new Error("Missing the required parameter 'targetUpdateAws' when calling targetUpdateAws");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-aws', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateAws} targetUpdateAws 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateAws(targetUpdateAws) {
      return this.targetUpdateAwsWithHttpInfo(targetUpdateAws)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateAzure} targetUpdateAzure 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateAzureWithHttpInfo(targetUpdateAzure) {
      let postBody = targetUpdateAzure;
      // verify the required parameter 'targetUpdateAzure' is set
      if (targetUpdateAzure === undefined || targetUpdateAzure === null) {
        throw new Error("Missing the required parameter 'targetUpdateAzure' when calling targetUpdateAzure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-azure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateAzure} targetUpdateAzure 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateAzure(targetUpdateAzure) {
      return this.targetUpdateAzureWithHttpInfo(targetUpdateAzure)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateDB} targetUpdateDB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateDBWithHttpInfo(targetUpdateDB) {
      let postBody = targetUpdateDB;
      // verify the required parameter 'targetUpdateDB' is set
      if (targetUpdateDB === undefined || targetUpdateDB === null) {
        throw new Error("Missing the required parameter 'targetUpdateDB' when calling targetUpdateDB");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-db', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateDB} targetUpdateDB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateDB(targetUpdateDB) {
      return this.targetUpdateDBWithHttpInfo(targetUpdateDB)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateDockerhub} targetUpdateDockerhub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateDockerhubWithHttpInfo(targetUpdateDockerhub) {
      let postBody = targetUpdateDockerhub;
      // verify the required parameter 'targetUpdateDockerhub' is set
      if (targetUpdateDockerhub === undefined || targetUpdateDockerhub === null) {
        throw new Error("Missing the required parameter 'targetUpdateDockerhub' when calling targetUpdateDockerhub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-dockerhub', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateDockerhub} targetUpdateDockerhub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateDockerhub(targetUpdateDockerhub) {
      return this.targetUpdateDockerhubWithHttpInfo(targetUpdateDockerhub)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateEks} targetUpdateEks 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateEksWithHttpInfo(targetUpdateEks) {
      let postBody = targetUpdateEks;
      // verify the required parameter 'targetUpdateEks' is set
      if (targetUpdateEks === undefined || targetUpdateEks === null) {
        throw new Error("Missing the required parameter 'targetUpdateEks' when calling targetUpdateEks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-eks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateEks} targetUpdateEks 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateEks(targetUpdateEks) {
      return this.targetUpdateEksWithHttpInfo(targetUpdateEks)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateGcp} targetUpdateGcp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateGcpWithHttpInfo(targetUpdateGcp) {
      let postBody = targetUpdateGcp;
      // verify the required parameter 'targetUpdateGcp' is set
      if (targetUpdateGcp === undefined || targetUpdateGcp === null) {
        throw new Error("Missing the required parameter 'targetUpdateGcp' when calling targetUpdateGcp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-gcp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateGcp} targetUpdateGcp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateGcp(targetUpdateGcp) {
      return this.targetUpdateGcpWithHttpInfo(targetUpdateGcp)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateGithub} targetUpdateGithub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateGithubWithHttpInfo(targetUpdateGithub) {
      let postBody = targetUpdateGithub;
      // verify the required parameter 'targetUpdateGithub' is set
      if (targetUpdateGithub === undefined || targetUpdateGithub === null) {
        throw new Error("Missing the required parameter 'targetUpdateGithub' when calling targetUpdateGithub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-github', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateGithub} targetUpdateGithub 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateGithub(targetUpdateGithub) {
      return this.targetUpdateGithubWithHttpInfo(targetUpdateGithub)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateGitlab} targetUpdateGitlab 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateGitlabWithHttpInfo(targetUpdateGitlab) {
      let postBody = targetUpdateGitlab;
      // verify the required parameter 'targetUpdateGitlab' is set
      if (targetUpdateGitlab === undefined || targetUpdateGitlab === null) {
        throw new Error("Missing the required parameter 'targetUpdateGitlab' when calling targetUpdateGitlab");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-gitlab', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateGitlab} targetUpdateGitlab 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateGitlab(targetUpdateGitlab) {
      return this.targetUpdateGitlabWithHttpInfo(targetUpdateGitlab)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateGke} targetUpdateGke 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateGkeWithHttpInfo(targetUpdateGke) {
      let postBody = targetUpdateGke;
      // verify the required parameter 'targetUpdateGke' is set
      if (targetUpdateGke === undefined || targetUpdateGke === null) {
        throw new Error("Missing the required parameter 'targetUpdateGke' when calling targetUpdateGke");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-gke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateGke} targetUpdateGke 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateGke(targetUpdateGke) {
      return this.targetUpdateGkeWithHttpInfo(targetUpdateGke)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateGlobalSign} targetUpdateGlobalSign 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateGlobalSignWithHttpInfo(targetUpdateGlobalSign) {
      let postBody = targetUpdateGlobalSign;
      // verify the required parameter 'targetUpdateGlobalSign' is set
      if (targetUpdateGlobalSign === undefined || targetUpdateGlobalSign === null) {
        throw new Error("Missing the required parameter 'targetUpdateGlobalSign' when calling targetUpdateGlobalSign");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-globalsign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateGlobalSign} targetUpdateGlobalSign 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateGlobalSign(targetUpdateGlobalSign) {
      return this.targetUpdateGlobalSignWithHttpInfo(targetUpdateGlobalSign)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateGlobalSignAtlas} targetUpdateGlobalSignAtlas 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateGlobalSignAtlasWithHttpInfo(targetUpdateGlobalSignAtlas) {
      let postBody = targetUpdateGlobalSignAtlas;
      // verify the required parameter 'targetUpdateGlobalSignAtlas' is set
      if (targetUpdateGlobalSignAtlas === undefined || targetUpdateGlobalSignAtlas === null) {
        throw new Error("Missing the required parameter 'targetUpdateGlobalSignAtlas' when calling targetUpdateGlobalSignAtlas");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-globalsign-atlas', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateGlobalSignAtlas} targetUpdateGlobalSignAtlas 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateGlobalSignAtlas(targetUpdateGlobalSignAtlas) {
      return this.targetUpdateGlobalSignAtlasWithHttpInfo(targetUpdateGlobalSignAtlas)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateGodaddy} targetUpdateGodaddy 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateGodaddyWithHttpInfo(targetUpdateGodaddy) {
      let postBody = targetUpdateGodaddy;
      // verify the required parameter 'targetUpdateGodaddy' is set
      if (targetUpdateGodaddy === undefined || targetUpdateGodaddy === null) {
        throw new Error("Missing the required parameter 'targetUpdateGodaddy' when calling targetUpdateGodaddy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-godaddy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateGodaddy} targetUpdateGodaddy 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateGodaddy(targetUpdateGodaddy) {
      return this.targetUpdateGodaddyWithHttpInfo(targetUpdateGodaddy)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateHashiVault} targetUpdateHashiVault 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateHashiVaultWithHttpInfo(targetUpdateHashiVault) {
      let postBody = targetUpdateHashiVault;
      // verify the required parameter 'targetUpdateHashiVault' is set
      if (targetUpdateHashiVault === undefined || targetUpdateHashiVault === null) {
        throw new Error("Missing the required parameter 'targetUpdateHashiVault' when calling targetUpdateHashiVault");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-hashi-vault', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateHashiVault} targetUpdateHashiVault 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateHashiVault(targetUpdateHashiVault) {
      return this.targetUpdateHashiVaultWithHttpInfo(targetUpdateHashiVault)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateK8s} targetUpdateK8s 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateK8sWithHttpInfo(targetUpdateK8s) {
      let postBody = targetUpdateK8s;
      // verify the required parameter 'targetUpdateK8s' is set
      if (targetUpdateK8s === undefined || targetUpdateK8s === null) {
        throw new Error("Missing the required parameter 'targetUpdateK8s' when calling targetUpdateK8s");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-k8s', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateK8s} targetUpdateK8s 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateK8s(targetUpdateK8s) {
      return this.targetUpdateK8sWithHttpInfo(targetUpdateK8s)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateLdap} targetUpdateLdap 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateLdapWithHttpInfo(targetUpdateLdap) {
      let postBody = targetUpdateLdap;
      // verify the required parameter 'targetUpdateLdap' is set
      if (targetUpdateLdap === undefined || targetUpdateLdap === null) {
        throw new Error("Missing the required parameter 'targetUpdateLdap' when calling targetUpdateLdap");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-ldap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateLdap} targetUpdateLdap 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateLdap(targetUpdateLdap) {
      return this.targetUpdateLdapWithHttpInfo(targetUpdateLdap)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateLinked} targetUpdateLinked 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateLinkedWithHttpInfo(targetUpdateLinked) {
      let postBody = targetUpdateLinked;
      // verify the required parameter 'targetUpdateLinked' is set
      if (targetUpdateLinked === undefined || targetUpdateLinked === null) {
        throw new Error("Missing the required parameter 'targetUpdateLinked' when calling targetUpdateLinked");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-linked', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateLinked} targetUpdateLinked 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateLinked(targetUpdateLinked) {
      return this.targetUpdateLinkedWithHttpInfo(targetUpdateLinked)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdatePing} targetUpdatePing 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdatePingWithHttpInfo(targetUpdatePing) {
      let postBody = targetUpdatePing;
      // verify the required parameter 'targetUpdatePing' is set
      if (targetUpdatePing === undefined || targetUpdatePing === null) {
        throw new Error("Missing the required parameter 'targetUpdatePing' when calling targetUpdatePing");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-ping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdatePing} targetUpdatePing 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdatePing(targetUpdatePing) {
      return this.targetUpdatePingWithHttpInfo(targetUpdatePing)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateRabbitMq} targetUpdateRabbitMq 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateRabbitMqWithHttpInfo(targetUpdateRabbitMq) {
      let postBody = targetUpdateRabbitMq;
      // verify the required parameter 'targetUpdateRabbitMq' is set
      if (targetUpdateRabbitMq === undefined || targetUpdateRabbitMq === null) {
        throw new Error("Missing the required parameter 'targetUpdateRabbitMq' when calling targetUpdateRabbitMq");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-rabbitmq', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateRabbitMq} targetUpdateRabbitMq 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateRabbitMq(targetUpdateRabbitMq) {
      return this.targetUpdateRabbitMqWithHttpInfo(targetUpdateRabbitMq)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateSalesforce} targetUpdateSalesforce 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateSalesforceWithHttpInfo(targetUpdateSalesforce) {
      let postBody = targetUpdateSalesforce;
      // verify the required parameter 'targetUpdateSalesforce' is set
      if (targetUpdateSalesforce === undefined || targetUpdateSalesforce === null) {
        throw new Error("Missing the required parameter 'targetUpdateSalesforce' when calling targetUpdateSalesforce");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-salesforce', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateSalesforce} targetUpdateSalesforce 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateSalesforce(targetUpdateSalesforce) {
      return this.targetUpdateSalesforceWithHttpInfo(targetUpdateSalesforce)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateSectigo} targetUpdateSectigo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateSectigoWithHttpInfo(targetUpdateSectigo) {
      let postBody = targetUpdateSectigo;
      // verify the required parameter 'targetUpdateSectigo' is set
      if (targetUpdateSectigo === undefined || targetUpdateSectigo === null) {
        throw new Error("Missing the required parameter 'targetUpdateSectigo' when calling targetUpdateSectigo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-sectigo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateSectigo} targetUpdateSectigo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateSectigo(targetUpdateSectigo) {
      return this.targetUpdateSectigoWithHttpInfo(targetUpdateSectigo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateSsh} targetUpdateSsh 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateSshWithHttpInfo(targetUpdateSsh) {
      let postBody = targetUpdateSsh;
      // verify the required parameter 'targetUpdateSsh' is set
      if (targetUpdateSsh === undefined || targetUpdateSsh === null) {
        throw new Error("Missing the required parameter 'targetUpdateSsh' when calling targetUpdateSsh");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-ssh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateSsh} targetUpdateSsh 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateSsh(targetUpdateSsh) {
      return this.targetUpdateSshWithHttpInfo(targetUpdateSsh)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateWeb} targetUpdateWeb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateWebWithHttpInfo(targetUpdateWeb) {
      let postBody = targetUpdateWeb;
      // verify the required parameter 'targetUpdateWeb' is set
      if (targetUpdateWeb === undefined || targetUpdateWeb === null) {
        throw new Error("Missing the required parameter 'targetUpdateWeb' when calling targetUpdateWeb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-web', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateWeb} targetUpdateWeb 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateWeb(targetUpdateWeb) {
      return this.targetUpdateWebWithHttpInfo(targetUpdateWeb)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateWindows} targetUpdateWindows 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateWindowsWithHttpInfo(targetUpdateWindows) {
      let postBody = targetUpdateWindows;
      // verify the required parameter 'targetUpdateWindows' is set
      if (targetUpdateWindows === undefined || targetUpdateWindows === null) {
        throw new Error("Missing the required parameter 'targetUpdateWindows' when calling targetUpdateWindows");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-windows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateWindows} targetUpdateWindows 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateWindows(targetUpdateWindows) {
      return this.targetUpdateWindowsWithHttpInfo(targetUpdateWindows)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/TargetUpdateZeroSSL} targetUpdateZeroSSL 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TargetUpdateOutput} and HTTP response
     */
    targetUpdateZeroSSLWithHttpInfo(targetUpdateZeroSSL) {
      let postBody = targetUpdateZeroSSL;
      // verify the required parameter 'targetUpdateZeroSSL' is set
      if (targetUpdateZeroSSL === undefined || targetUpdateZeroSSL === null) {
        throw new Error("Missing the required parameter 'targetUpdateZeroSSL' when calling targetUpdateZeroSSL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TargetUpdateOutput;
      return this.apiClient.callApi(
        '/target-update-zerossl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/TargetUpdateZeroSSL} targetUpdateZeroSSL 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TargetUpdateOutput}
     */
    targetUpdateZeroSSL(targetUpdateZeroSSL) {
      return this.targetUpdateZeroSSLWithHttpInfo(targetUpdateZeroSSL)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/Tokenize} tokenize 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenizeOutput} and HTTP response
     */
    tokenizeWithHttpInfo(tokenize) {
      let postBody = tokenize;
      // verify the required parameter 'tokenize' is set
      if (tokenize === undefined || tokenize === null) {
        throw new Error("Missing the required parameter 'tokenize' when calling tokenize");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenizeOutput;
      return this.apiClient.callApi(
        '/tokenize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/Tokenize} tokenize 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenizeOutput}
     */
    tokenize(tokenize) {
      return this.tokenizeWithHttpInfo(tokenize)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Array.<module:model/BatchTokenizationRequestLine>} batchTokenizationRequestLine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenizeOutput} and HTTP response
     */
    tokenizeBatchWithHttpInfo(batchTokenizationRequestLine) {
      let postBody = batchTokenizationRequestLine;
      // verify the required parameter 'batchTokenizationRequestLine' is set
      if (batchTokenizationRequestLine === undefined || batchTokenizationRequestLine === null) {
        throw new Error("Missing the required parameter 'batchTokenizationRequestLine' when calling tokenizeBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenizeOutput;
      return this.apiClient.callApi(
        '/tokenize-batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Array.<module:model/BatchTokenizationRequestLine>} batchTokenizationRequestLine 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenizeOutput}
     */
    tokenizeBatch(batchTokenizationRequestLine) {
      return this.tokenizeBatchWithHttpInfo(batchTokenizationRequestLine)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UidCreateChildToken} uidCreateChildToken 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UidCreateChildTokenOutput} and HTTP response
     */
    uidCreateChildTokenWithHttpInfo(uidCreateChildToken) {
      let postBody = uidCreateChildToken;
      // verify the required parameter 'uidCreateChildToken' is set
      if (uidCreateChildToken === undefined || uidCreateChildToken === null) {
        throw new Error("Missing the required parameter 'uidCreateChildToken' when calling uidCreateChildToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UidCreateChildTokenOutput;
      return this.apiClient.callApi(
        '/uid-create-child-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UidCreateChildToken} uidCreateChildToken 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UidCreateChildTokenOutput}
     */
    uidCreateChildToken(uidCreateChildToken) {
      return this.uidCreateChildTokenWithHttpInfo(uidCreateChildToken)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UidGenerateToken} uidGenerateToken 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UidGenerateTokenOutput} and HTTP response
     */
    uidGenerateTokenWithHttpInfo(uidGenerateToken) {
      let postBody = uidGenerateToken;
      // verify the required parameter 'uidGenerateToken' is set
      if (uidGenerateToken === undefined || uidGenerateToken === null) {
        throw new Error("Missing the required parameter 'uidGenerateToken' when calling uidGenerateToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UidGenerateTokenOutput;
      return this.apiClient.callApi(
        '/uid-generate-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UidGenerateToken} uidGenerateToken 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UidGenerateTokenOutput}
     */
    uidGenerateToken(uidGenerateToken) {
      return this.uidGenerateTokenWithHttpInfo(uidGenerateToken)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UidListChildren} uidListChildren 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UniversalIdentityDetails} and HTTP response
     */
    uidListChildrenWithHttpInfo(uidListChildren) {
      let postBody = uidListChildren;
      // verify the required parameter 'uidListChildren' is set
      if (uidListChildren === undefined || uidListChildren === null) {
        throw new Error("Missing the required parameter 'uidListChildren' when calling uidListChildren");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UniversalIdentityDetails;
      return this.apiClient.callApi(
        '/uid-list-children', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UidListChildren} uidListChildren 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UniversalIdentityDetails}
     */
    uidListChildren(uidListChildren) {
      return this.uidListChildrenWithHttpInfo(uidListChildren)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UidRevokeToken} uidRevokeToken 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    uidRevokeTokenWithHttpInfo(uidRevokeToken) {
      let postBody = uidRevokeToken;
      // verify the required parameter 'uidRevokeToken' is set
      if (uidRevokeToken === undefined || uidRevokeToken === null) {
        throw new Error("Missing the required parameter 'uidRevokeToken' when calling uidRevokeToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/uid-revoke-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UidRevokeToken} uidRevokeToken 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    uidRevokeToken(uidRevokeToken) {
      return this.uidRevokeTokenWithHttpInfo(uidRevokeToken)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UidRotateToken} uidRotateToken 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UidRotateTokenOutput} and HTTP response
     */
    uidRotateTokenWithHttpInfo(uidRotateToken) {
      let postBody = uidRotateToken;
      // verify the required parameter 'uidRotateToken' is set
      if (uidRotateToken === undefined || uidRotateToken === null) {
        throw new Error("Missing the required parameter 'uidRotateToken' when calling uidRotateToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UidRotateTokenOutput;
      return this.apiClient.callApi(
        '/uid-rotate-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UidRotateToken} uidRotateToken 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UidRotateTokenOutput}
     */
    uidRotateToken(uidRotateToken) {
      return this.uidRotateTokenWithHttpInfo(uidRotateToken)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UnwrapToken} unwrapToken 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UnwrapTokenOutput} and HTTP response
     */
    unwrapTokenWithHttpInfo(unwrapToken) {
      let postBody = unwrapToken;
      // verify the required parameter 'unwrapToken' is set
      if (unwrapToken === undefined || unwrapToken === null) {
        throw new Error("Missing the required parameter 'unwrapToken' when calling unwrapToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UnwrapTokenOutput;
      return this.apiClient.callApi(
        '/unwrap-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UnwrapToken} unwrapToken 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UnwrapTokenOutput}
     */
    unwrapToken(unwrapToken) {
      return this.unwrapTokenWithHttpInfo(unwrapToken)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAWSTarget} updateAWSTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateAWSTargetWithHttpInfo(updateAWSTarget) {
      let postBody = updateAWSTarget;
      // verify the required parameter 'updateAWSTarget' is set
      if (updateAWSTarget === undefined || updateAWSTarget === null) {
        throw new Error("Missing the required parameter 'updateAWSTarget' when calling updateAWSTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-aws-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAWSTarget} updateAWSTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateAWSTarget(updateAWSTarget) {
      return this.updateAWSTargetWithHttpInfo(updateAWSTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAWSTargetDetails} updateAWSTargetDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */
    updateAWSTargetDetailsWithHttpInfo(updateAWSTargetDetails) {
      let postBody = updateAWSTargetDetails;
      // verify the required parameter 'updateAWSTargetDetails' is set
      if (updateAWSTargetDetails === undefined || updateAWSTargetDetails === null) {
        throw new Error("Missing the required parameter 'updateAWSTargetDetails' when calling updateAWSTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-aws-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAWSTargetDetails} updateAWSTargetDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */
    updateAWSTargetDetails(updateAWSTargetDetails) {
      return this.updateAWSTargetDetailsWithHttpInfo(updateAWSTargetDetails)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAccountSettings} updateAccountSettings 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateAccountSettingsOutput} and HTTP response
     */
    updateAccountSettingsWithHttpInfo(updateAccountSettings) {
      let postBody = updateAccountSettings;
      // verify the required parameter 'updateAccountSettings' is set
      if (updateAccountSettings === undefined || updateAccountSettings === null) {
        throw new Error("Missing the required parameter 'updateAccountSettings' when calling updateAccountSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAccountSettingsOutput;
      return this.apiClient.callApi(
        '/update-account-settings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAccountSettings} updateAccountSettings 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateAccountSettingsOutput}
     */
    updateAccountSettings(updateAccountSettings) {
      return this.updateAccountSettingsWithHttpInfo(updateAccountSettings)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateArtifactoryTarget} updateArtifactoryTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateArtifactoryTargetOutput} and HTTP response
     */
    updateArtifactoryTargetWithHttpInfo(updateArtifactoryTarget) {
      let postBody = updateArtifactoryTarget;
      // verify the required parameter 'updateArtifactoryTarget' is set
      if (updateArtifactoryTarget === undefined || updateArtifactoryTarget === null) {
        throw new Error("Missing the required parameter 'updateArtifactoryTarget' when calling updateArtifactoryTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateArtifactoryTargetOutput;
      return this.apiClient.callApi(
        '/update-artifactory-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateArtifactoryTarget} updateArtifactoryTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateArtifactoryTargetOutput}
     */
    updateArtifactoryTarget(updateArtifactoryTarget) {
      return this.updateArtifactoryTargetWithHttpInfo(updateArtifactoryTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAssoc} updateAssoc 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateAssocWithHttpInfo(updateAssoc) {
      let postBody = updateAssoc;
      // verify the required parameter 'updateAssoc' is set
      if (updateAssoc === undefined || updateAssoc === null) {
        throw new Error("Missing the required parameter 'updateAssoc' when calling updateAssoc");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-assoc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAssoc} updateAssoc 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateAssoc(updateAssoc) {
      return this.updateAssocWithHttpInfo(updateAssoc)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethod} updateAuthMethod 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateAuthMethodOutput} and HTTP response
     */
    updateAuthMethodWithHttpInfo(updateAuthMethod) {
      let postBody = updateAuthMethod;
      // verify the required parameter 'updateAuthMethod' is set
      if (updateAuthMethod === undefined || updateAuthMethod === null) {
        throw new Error("Missing the required parameter 'updateAuthMethod' when calling updateAuthMethod");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAuthMethodOutput;
      return this.apiClient.callApi(
        '/update-auth-method', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethod} updateAuthMethod 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateAuthMethodOutput}
     */
    updateAuthMethod(updateAuthMethod) {
      return this.updateAuthMethodWithHttpInfo(updateAuthMethod)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodAWSIAM} updateAuthMethodAWSIAM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateAuthMethodAWSIAMWithHttpInfo(updateAuthMethodAWSIAM) {
      let postBody = updateAuthMethodAWSIAM;
      // verify the required parameter 'updateAuthMethodAWSIAM' is set
      if (updateAuthMethodAWSIAM === undefined || updateAuthMethodAWSIAM === null) {
        throw new Error("Missing the required parameter 'updateAuthMethodAWSIAM' when calling updateAuthMethodAWSIAM");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-auth-method-aws-iam', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodAWSIAM} updateAuthMethodAWSIAM 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateAuthMethodAWSIAM(updateAuthMethodAWSIAM) {
      return this.updateAuthMethodAWSIAMWithHttpInfo(updateAuthMethodAWSIAM)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodAzureAD} updateAuthMethodAzureAD 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateAuthMethodAzureADWithHttpInfo(updateAuthMethodAzureAD) {
      let postBody = updateAuthMethodAzureAD;
      // verify the required parameter 'updateAuthMethodAzureAD' is set
      if (updateAuthMethodAzureAD === undefined || updateAuthMethodAzureAD === null) {
        throw new Error("Missing the required parameter 'updateAuthMethodAzureAD' when calling updateAuthMethodAzureAD");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-auth-method-azure-ad', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodAzureAD} updateAuthMethodAzureAD 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateAuthMethodAzureAD(updateAuthMethodAzureAD) {
      return this.updateAuthMethodAzureADWithHttpInfo(updateAuthMethodAzureAD)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodCert} updateAuthMethodCert 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateAuthMethodCertOutput} and HTTP response
     */
    updateAuthMethodCertWithHttpInfo(updateAuthMethodCert) {
      let postBody = updateAuthMethodCert;
      // verify the required parameter 'updateAuthMethodCert' is set
      if (updateAuthMethodCert === undefined || updateAuthMethodCert === null) {
        throw new Error("Missing the required parameter 'updateAuthMethodCert' when calling updateAuthMethodCert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAuthMethodCertOutput;
      return this.apiClient.callApi(
        '/update-auth-method-cert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodCert} updateAuthMethodCert 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateAuthMethodCertOutput}
     */
    updateAuthMethodCert(updateAuthMethodCert) {
      return this.updateAuthMethodCertWithHttpInfo(updateAuthMethodCert)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodGCP} updateAuthMethodGCP 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateAuthMethodGCPWithHttpInfo(updateAuthMethodGCP) {
      let postBody = updateAuthMethodGCP;
      // verify the required parameter 'updateAuthMethodGCP' is set
      if (updateAuthMethodGCP === undefined || updateAuthMethodGCP === null) {
        throw new Error("Missing the required parameter 'updateAuthMethodGCP' when calling updateAuthMethodGCP");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-auth-method-gcp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodGCP} updateAuthMethodGCP 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateAuthMethodGCP(updateAuthMethodGCP) {
      return this.updateAuthMethodGCPWithHttpInfo(updateAuthMethodGCP)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodK8S} updateAuthMethodK8S 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateAuthMethodK8SOutput} and HTTP response
     */
    updateAuthMethodK8SWithHttpInfo(updateAuthMethodK8S) {
      let postBody = updateAuthMethodK8S;
      // verify the required parameter 'updateAuthMethodK8S' is set
      if (updateAuthMethodK8S === undefined || updateAuthMethodK8S === null) {
        throw new Error("Missing the required parameter 'updateAuthMethodK8S' when calling updateAuthMethodK8S");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAuthMethodK8SOutput;
      return this.apiClient.callApi(
        '/update-auth-method-k8s', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodK8S} updateAuthMethodK8S 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateAuthMethodK8SOutput}
     */
    updateAuthMethodK8S(updateAuthMethodK8S) {
      return this.updateAuthMethodK8SWithHttpInfo(updateAuthMethodK8S)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodLDAP} updateAuthMethodLDAP 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateAuthMethodLDAPOutput} and HTTP response
     */
    updateAuthMethodLDAPWithHttpInfo(updateAuthMethodLDAP) {
      let postBody = updateAuthMethodLDAP;
      // verify the required parameter 'updateAuthMethodLDAP' is set
      if (updateAuthMethodLDAP === undefined || updateAuthMethodLDAP === null) {
        throw new Error("Missing the required parameter 'updateAuthMethodLDAP' when calling updateAuthMethodLDAP");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAuthMethodLDAPOutput;
      return this.apiClient.callApi(
        '/update-auth-method-ldap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodLDAP} updateAuthMethodLDAP 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateAuthMethodLDAPOutput}
     */
    updateAuthMethodLDAP(updateAuthMethodLDAP) {
      return this.updateAuthMethodLDAPWithHttpInfo(updateAuthMethodLDAP)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodOAuth2} updateAuthMethodOAuth2 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateAuthMethodOAuth2WithHttpInfo(updateAuthMethodOAuth2) {
      let postBody = updateAuthMethodOAuth2;
      // verify the required parameter 'updateAuthMethodOAuth2' is set
      if (updateAuthMethodOAuth2 === undefined || updateAuthMethodOAuth2 === null) {
        throw new Error("Missing the required parameter 'updateAuthMethodOAuth2' when calling updateAuthMethodOAuth2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-auth-method-oauth2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodOAuth2} updateAuthMethodOAuth2 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateAuthMethodOAuth2(updateAuthMethodOAuth2) {
      return this.updateAuthMethodOAuth2WithHttpInfo(updateAuthMethodOAuth2)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodOCI} updateAuthMethodOCI 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateAuthMethodOCIOutput} and HTTP response
     */
    updateAuthMethodOCIWithHttpInfo(updateAuthMethodOCI) {
      let postBody = updateAuthMethodOCI;
      // verify the required parameter 'updateAuthMethodOCI' is set
      if (updateAuthMethodOCI === undefined || updateAuthMethodOCI === null) {
        throw new Error("Missing the required parameter 'updateAuthMethodOCI' when calling updateAuthMethodOCI");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAuthMethodOCIOutput;
      return this.apiClient.callApi(
        '/update-auth-method-oci', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodOCI} updateAuthMethodOCI 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateAuthMethodOCIOutput}
     */
    updateAuthMethodOCI(updateAuthMethodOCI) {
      return this.updateAuthMethodOCIWithHttpInfo(updateAuthMethodOCI)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodOIDC} updateAuthMethodOIDC 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateAuthMethodOIDCWithHttpInfo(updateAuthMethodOIDC) {
      let postBody = updateAuthMethodOIDC;
      // verify the required parameter 'updateAuthMethodOIDC' is set
      if (updateAuthMethodOIDC === undefined || updateAuthMethodOIDC === null) {
        throw new Error("Missing the required parameter 'updateAuthMethodOIDC' when calling updateAuthMethodOIDC");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-auth-method-oidc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodOIDC} updateAuthMethodOIDC 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateAuthMethodOIDC(updateAuthMethodOIDC) {
      return this.updateAuthMethodOIDCWithHttpInfo(updateAuthMethodOIDC)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodSAML} updateAuthMethodSAML 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateAuthMethodSAMLWithHttpInfo(updateAuthMethodSAML) {
      let postBody = updateAuthMethodSAML;
      // verify the required parameter 'updateAuthMethodSAML' is set
      if (updateAuthMethodSAML === undefined || updateAuthMethodSAML === null) {
        throw new Error("Missing the required parameter 'updateAuthMethodSAML' when calling updateAuthMethodSAML");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-auth-method-saml', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodSAML} updateAuthMethodSAML 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateAuthMethodSAML(updateAuthMethodSAML) {
      return this.updateAuthMethodSAMLWithHttpInfo(updateAuthMethodSAML)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodUniversalIdentity} updateAuthMethodUniversalIdentity 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateAuthMethodUniversalIdentityWithHttpInfo(updateAuthMethodUniversalIdentity) {
      let postBody = updateAuthMethodUniversalIdentity;
      // verify the required parameter 'updateAuthMethodUniversalIdentity' is set
      if (updateAuthMethodUniversalIdentity === undefined || updateAuthMethodUniversalIdentity === null) {
        throw new Error("Missing the required parameter 'updateAuthMethodUniversalIdentity' when calling updateAuthMethodUniversalIdentity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-auth-method-universal-identity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodUniversalIdentity} updateAuthMethodUniversalIdentity 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateAuthMethodUniversalIdentity(updateAuthMethodUniversalIdentity) {
      return this.updateAuthMethodUniversalIdentityWithHttpInfo(updateAuthMethodUniversalIdentity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAzureTarget} updateAzureTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateAzureTargetOutput} and HTTP response
     */
    updateAzureTargetWithHttpInfo(updateAzureTarget) {
      let postBody = updateAzureTarget;
      // verify the required parameter 'updateAzureTarget' is set
      if (updateAzureTarget === undefined || updateAzureTarget === null) {
        throw new Error("Missing the required parameter 'updateAzureTarget' when calling updateAzureTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAzureTargetOutput;
      return this.apiClient.callApi(
        '/update-azure-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAzureTarget} updateAzureTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateAzureTargetOutput}
     */
    updateAzureTarget(updateAzureTarget) {
      return this.updateAzureTargetWithHttpInfo(updateAzureTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateCertificateValue} updateCertificateValue 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateCertificateOutput} and HTTP response
     */
    updateCertificateValueWithHttpInfo(updateCertificateValue) {
      let postBody = updateCertificateValue;
      // verify the required parameter 'updateCertificateValue' is set
      if (updateCertificateValue === undefined || updateCertificateValue === null) {
        throw new Error("Missing the required parameter 'updateCertificateValue' when calling updateCertificateValue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateCertificateOutput;
      return this.apiClient.callApi(
        '/update-certificate-value', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateCertificateValue} updateCertificateValue 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateCertificateOutput}
     */
    updateCertificateValue(updateCertificateValue) {
      return this.updateCertificateValueWithHttpInfo(updateCertificateValue)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateClassicKeyCertificate} updateClassicKeyCertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateClassicKeyCertificateWithHttpInfo(updateClassicKeyCertificate) {
      let postBody = updateClassicKeyCertificate;
      // verify the required parameter 'updateClassicKeyCertificate' is set
      if (updateClassicKeyCertificate === undefined || updateClassicKeyCertificate === null) {
        throw new Error("Missing the required parameter 'updateClassicKeyCertificate' when calling updateClassicKeyCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-classic-key-certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateClassicKeyCertificate} updateClassicKeyCertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateClassicKeyCertificate(updateClassicKeyCertificate) {
      return this.updateClassicKeyCertificateWithHttpInfo(updateClassicKeyCertificate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateDBTarget} updateDBTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateDBTargetOutput} and HTTP response
     */
    updateDBTargetWithHttpInfo(updateDBTarget) {
      let postBody = updateDBTarget;
      // verify the required parameter 'updateDBTarget' is set
      if (updateDBTarget === undefined || updateDBTarget === null) {
        throw new Error("Missing the required parameter 'updateDBTarget' when calling updateDBTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDBTargetOutput;
      return this.apiClient.callApi(
        '/update-db-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateDBTarget} updateDBTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateDBTargetOutput}
     */
    updateDBTarget(updateDBTarget) {
      return this.updateDBTargetWithHttpInfo(updateDBTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateDBTargetDetails} updateDBTargetDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */
    updateDBTargetDetailsWithHttpInfo(updateDBTargetDetails) {
      let postBody = updateDBTargetDetails;
      // verify the required parameter 'updateDBTargetDetails' is set
      if (updateDBTargetDetails === undefined || updateDBTargetDetails === null) {
        throw new Error("Missing the required parameter 'updateDBTargetDetails' when calling updateDBTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-db-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateDBTargetDetails} updateDBTargetDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */
    updateDBTargetDetails(updateDBTargetDetails) {
      return this.updateDBTargetDetailsWithHttpInfo(updateDBTargetDetails)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateDockerhubTarget} updateDockerhubTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateDockerhubTargetOutput} and HTTP response
     */
    updateDockerhubTargetWithHttpInfo(updateDockerhubTarget) {
      let postBody = updateDockerhubTarget;
      // verify the required parameter 'updateDockerhubTarget' is set
      if (updateDockerhubTarget === undefined || updateDockerhubTarget === null) {
        throw new Error("Missing the required parameter 'updateDockerhubTarget' when calling updateDockerhubTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDockerhubTargetOutput;
      return this.apiClient.callApi(
        '/update-dockerhub-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateDockerhubTarget} updateDockerhubTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateDockerhubTargetOutput}
     */
    updateDockerhubTarget(updateDockerhubTarget) {
      return this.updateDockerhubTargetWithHttpInfo(updateDockerhubTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateEKSTarget} updateEKSTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateEKSTargetOutput} and HTTP response
     */
    updateEKSTargetWithHttpInfo(updateEKSTarget) {
      let postBody = updateEKSTarget;
      // verify the required parameter 'updateEKSTarget' is set
      if (updateEKSTarget === undefined || updateEKSTarget === null) {
        throw new Error("Missing the required parameter 'updateEKSTarget' when calling updateEKSTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateEKSTargetOutput;
      return this.apiClient.callApi(
        '/update-eks-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateEKSTarget} updateEKSTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateEKSTargetOutput}
     */
    updateEKSTarget(updateEKSTarget) {
      return this.updateEKSTargetWithHttpInfo(updateEKSTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateEventForwarder} updateEventForwarder 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateEventForwarderWithHttpInfo(updateEventForwarder) {
      let postBody = updateEventForwarder;
      // verify the required parameter 'updateEventForwarder' is set
      if (updateEventForwarder === undefined || updateEventForwarder === null) {
        throw new Error("Missing the required parameter 'updateEventForwarder' when calling updateEventForwarder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-event-forwarder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateEventForwarder} updateEventForwarder 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateEventForwarder(updateEventForwarder) {
      return this.updateEventForwarderWithHttpInfo(updateEventForwarder)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateGKETarget} updateGKETarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateGKETargetOutput} and HTTP response
     */
    updateGKETargetWithHttpInfo(updateGKETarget) {
      let postBody = updateGKETarget;
      // verify the required parameter 'updateGKETarget' is set
      if (updateGKETarget === undefined || updateGKETarget === null) {
        throw new Error("Missing the required parameter 'updateGKETarget' when calling updateGKETarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGKETargetOutput;
      return this.apiClient.callApi(
        '/update-gke-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateGKETarget} updateGKETarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateGKETargetOutput}
     */
    updateGKETarget(updateGKETarget) {
      return this.updateGKETargetWithHttpInfo(updateGKETarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateGcpTarget} updateGcpTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateGcpTargetOutput} and HTTP response
     */
    updateGcpTargetWithHttpInfo(updateGcpTarget) {
      let postBody = updateGcpTarget;
      // verify the required parameter 'updateGcpTarget' is set
      if (updateGcpTarget === undefined || updateGcpTarget === null) {
        throw new Error("Missing the required parameter 'updateGcpTarget' when calling updateGcpTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGcpTargetOutput;
      return this.apiClient.callApi(
        '/update-gcp-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateGcpTarget} updateGcpTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateGcpTargetOutput}
     */
    updateGcpTarget(updateGcpTarget) {
      return this.updateGcpTargetWithHttpInfo(updateGcpTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateGithubTarget} updateGithubTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateGithubTargetOutput} and HTTP response
     */
    updateGithubTargetWithHttpInfo(updateGithubTarget) {
      let postBody = updateGithubTarget;
      // verify the required parameter 'updateGithubTarget' is set
      if (updateGithubTarget === undefined || updateGithubTarget === null) {
        throw new Error("Missing the required parameter 'updateGithubTarget' when calling updateGithubTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGithubTargetOutput;
      return this.apiClient.callApi(
        '/update-github-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateGithubTarget} updateGithubTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateGithubTargetOutput}
     */
    updateGithubTarget(updateGithubTarget) {
      return this.updateGithubTargetWithHttpInfo(updateGithubTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateGitlabTarget} updateGitlabTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateGitlabTargetOutput} and HTTP response
     */
    updateGitlabTargetWithHttpInfo(updateGitlabTarget) {
      let postBody = updateGitlabTarget;
      // verify the required parameter 'updateGitlabTarget' is set
      if (updateGitlabTarget === undefined || updateGitlabTarget === null) {
        throw new Error("Missing the required parameter 'updateGitlabTarget' when calling updateGitlabTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGitlabTargetOutput;
      return this.apiClient.callApi(
        '/update-gitlab-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateGitlabTarget} updateGitlabTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateGitlabTargetOutput}
     */
    updateGitlabTarget(updateGitlabTarget) {
      return this.updateGitlabTargetWithHttpInfo(updateGitlabTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateGlobalSignAtlasTarget} updateGlobalSignAtlasTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateGlobalSignAtlasTargetOutput} and HTTP response
     */
    updateGlobalSignAtlasTargetWithHttpInfo(updateGlobalSignAtlasTarget) {
      let postBody = updateGlobalSignAtlasTarget;
      // verify the required parameter 'updateGlobalSignAtlasTarget' is set
      if (updateGlobalSignAtlasTarget === undefined || updateGlobalSignAtlasTarget === null) {
        throw new Error("Missing the required parameter 'updateGlobalSignAtlasTarget' when calling updateGlobalSignAtlasTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGlobalSignAtlasTargetOutput;
      return this.apiClient.callApi(
        '/update-globalsign-atlas-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateGlobalSignAtlasTarget} updateGlobalSignAtlasTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateGlobalSignAtlasTargetOutput}
     */
    updateGlobalSignAtlasTarget(updateGlobalSignAtlasTarget) {
      return this.updateGlobalSignAtlasTargetWithHttpInfo(updateGlobalSignAtlasTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateGlobalSignTarget} updateGlobalSignTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateGlobalSignTargetOutput} and HTTP response
     */
    updateGlobalSignTargetWithHttpInfo(updateGlobalSignTarget) {
      let postBody = updateGlobalSignTarget;
      // verify the required parameter 'updateGlobalSignTarget' is set
      if (updateGlobalSignTarget === undefined || updateGlobalSignTarget === null) {
        throw new Error("Missing the required parameter 'updateGlobalSignTarget' when calling updateGlobalSignTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGlobalSignTargetOutput;
      return this.apiClient.callApi(
        '/update-globalsign-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateGlobalSignTarget} updateGlobalSignTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateGlobalSignTargetOutput}
     */
    updateGlobalSignTarget(updateGlobalSignTarget) {
      return this.updateGlobalSignTargetWithHttpInfo(updateGlobalSignTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateGodaddyTarget} updateGodaddyTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateGodaddyTargetOutput} and HTTP response
     */
    updateGodaddyTargetWithHttpInfo(updateGodaddyTarget) {
      let postBody = updateGodaddyTarget;
      // verify the required parameter 'updateGodaddyTarget' is set
      if (updateGodaddyTarget === undefined || updateGodaddyTarget === null) {
        throw new Error("Missing the required parameter 'updateGodaddyTarget' when calling updateGodaddyTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGodaddyTargetOutput;
      return this.apiClient.callApi(
        '/update-godaddy-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateGodaddyTarget} updateGodaddyTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateGodaddyTargetOutput}
     */
    updateGodaddyTarget(updateGodaddyTarget) {
      return this.updateGodaddyTargetWithHttpInfo(updateGodaddyTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateGroup} updateGroup 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateGroupOutput} and HTTP response
     */
    updateGroupWithHttpInfo(updateGroup) {
      let postBody = updateGroup;
      // verify the required parameter 'updateGroup' is set
      if (updateGroup === undefined || updateGroup === null) {
        throw new Error("Missing the required parameter 'updateGroup' when calling updateGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGroupOutput;
      return this.apiClient.callApi(
        '/update-group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateGroup} updateGroup 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateGroupOutput}
     */
    updateGroup(updateGroup) {
      return this.updateGroupWithHttpInfo(updateGroup)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateHashiVaultTarget} updateHashiVaultTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateHashiVaultTargetOutput} and HTTP response
     */
    updateHashiVaultTargetWithHttpInfo(updateHashiVaultTarget) {
      let postBody = updateHashiVaultTarget;
      // verify the required parameter 'updateHashiVaultTarget' is set
      if (updateHashiVaultTarget === undefined || updateHashiVaultTarget === null) {
        throw new Error("Missing the required parameter 'updateHashiVaultTarget' when calling updateHashiVaultTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateHashiVaultTargetOutput;
      return this.apiClient.callApi(
        '/update-hashi-vault-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateHashiVaultTarget} updateHashiVaultTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateHashiVaultTargetOutput}
     */
    updateHashiVaultTarget(updateHashiVaultTarget) {
      return this.updateHashiVaultTargetWithHttpInfo(updateHashiVaultTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateItem} updateItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateItemOutput} and HTTP response
     */
    updateItemWithHttpInfo(updateItem) {
      let postBody = updateItem;
      // verify the required parameter 'updateItem' is set
      if (updateItem === undefined || updateItem === null) {
        throw new Error("Missing the required parameter 'updateItem' when calling updateItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateItemOutput;
      return this.apiClient.callApi(
        '/update-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateItem} updateItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateItemOutput}
     */
    updateItem(updateItem) {
      return this.updateItemWithHttpInfo(updateItem)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateLdapTarget} updateLdapTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateLdapTargetOutput} and HTTP response
     */
    updateLdapTargetWithHttpInfo(updateLdapTarget) {
      let postBody = updateLdapTarget;
      // verify the required parameter 'updateLdapTarget' is set
      if (updateLdapTarget === undefined || updateLdapTarget === null) {
        throw new Error("Missing the required parameter 'updateLdapTarget' when calling updateLdapTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateLdapTargetOutput;
      return this.apiClient.callApi(
        '/update-ldap-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateLdapTarget} updateLdapTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateLdapTargetOutput}
     */
    updateLdapTarget(updateLdapTarget) {
      return this.updateLdapTargetWithHttpInfo(updateLdapTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateLdapTargetDetails} updateLdapTargetDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */
    updateLdapTargetDetailsWithHttpInfo(updateLdapTargetDetails) {
      let postBody = updateLdapTargetDetails;
      // verify the required parameter 'updateLdapTargetDetails' is set
      if (updateLdapTargetDetails === undefined || updateLdapTargetDetails === null) {
        throw new Error("Missing the required parameter 'updateLdapTargetDetails' when calling updateLdapTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-ldap-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateLdapTargetDetails} updateLdapTargetDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */
    updateLdapTargetDetails(updateLdapTargetDetails) {
      return this.updateLdapTargetDetailsWithHttpInfo(updateLdapTargetDetails)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateLinkedTarget} updateLinkedTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateLinkedTargetWithHttpInfo(updateLinkedTarget) {
      let postBody = updateLinkedTarget;
      // verify the required parameter 'updateLinkedTarget' is set
      if (updateLinkedTarget === undefined || updateLinkedTarget === null) {
        throw new Error("Missing the required parameter 'updateLinkedTarget' when calling updateLinkedTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-linked-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateLinkedTarget} updateLinkedTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateLinkedTarget(updateLinkedTarget) {
      return this.updateLinkedTargetWithHttpInfo(updateLinkedTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateNativeK8STarget} updateNativeK8STarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateNativeK8STargetOutput} and HTTP response
     */
    updateNativeK8STargetWithHttpInfo(updateNativeK8STarget) {
      let postBody = updateNativeK8STarget;
      // verify the required parameter 'updateNativeK8STarget' is set
      if (updateNativeK8STarget === undefined || updateNativeK8STarget === null) {
        throw new Error("Missing the required parameter 'updateNativeK8STarget' when calling updateNativeK8STarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateNativeK8STargetOutput;
      return this.apiClient.callApi(
        '/update-k8s-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateNativeK8STarget} updateNativeK8STarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateNativeK8STargetOutput}
     */
    updateNativeK8STarget(updateNativeK8STarget) {
      return this.updateNativeK8STargetWithHttpInfo(updateNativeK8STarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateOidcApp} updateOidcApp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateOidcAppWithHttpInfo(updateOidcApp) {
      let postBody = updateOidcApp;
      // verify the required parameter 'updateOidcApp' is set
      if (updateOidcApp === undefined || updateOidcApp === null) {
        throw new Error("Missing the required parameter 'updateOidcApp' when calling updateOidcApp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-oidc-app', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateOidcApp} updateOidcApp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateOidcApp(updateOidcApp) {
      return this.updateOidcAppWithHttpInfo(updateOidcApp)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdatePKICertIssuer} updatePKICertIssuer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdatePKICertIssuerOutput} and HTTP response
     */
    updatePKICertIssuerWithHttpInfo(updatePKICertIssuer) {
      let postBody = updatePKICertIssuer;
      // verify the required parameter 'updatePKICertIssuer' is set
      if (updatePKICertIssuer === undefined || updatePKICertIssuer === null) {
        throw new Error("Missing the required parameter 'updatePKICertIssuer' when calling updatePKICertIssuer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatePKICertIssuerOutput;
      return this.apiClient.callApi(
        '/update-pki-cert-issuer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdatePKICertIssuer} updatePKICertIssuer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdatePKICertIssuerOutput}
     */
    updatePKICertIssuer(updatePKICertIssuer) {
      return this.updatePKICertIssuerWithHttpInfo(updatePKICertIssuer)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdatePingTarget} updatePingTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updatePingTargetWithHttpInfo(updatePingTarget) {
      let postBody = updatePingTarget;
      // verify the required parameter 'updatePingTarget' is set
      if (updatePingTarget === undefined || updatePingTarget === null) {
        throw new Error("Missing the required parameter 'updatePingTarget' when calling updatePingTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-ping-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdatePingTarget} updatePingTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updatePingTarget(updatePingTarget) {
      return this.updatePingTargetWithHttpInfo(updatePingTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateRDPTargetDetails} updateRDPTargetDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */
    updateRDPTargetDetailsWithHttpInfo(updateRDPTargetDetails) {
      let postBody = updateRDPTargetDetails;
      // verify the required parameter 'updateRDPTargetDetails' is set
      if (updateRDPTargetDetails === undefined || updateRDPTargetDetails === null) {
        throw new Error("Missing the required parameter 'updateRDPTargetDetails' when calling updateRDPTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-rdp-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateRDPTargetDetails} updateRDPTargetDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */
    updateRDPTargetDetails(updateRDPTargetDetails) {
      return this.updateRDPTargetDetailsWithHttpInfo(updateRDPTargetDetails)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateRabbitMQTarget} updateRabbitMQTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateRabbitMQTargetOutput} and HTTP response
     */
    updateRabbitMQTargetWithHttpInfo(updateRabbitMQTarget) {
      let postBody = updateRabbitMQTarget;
      // verify the required parameter 'updateRabbitMQTarget' is set
      if (updateRabbitMQTarget === undefined || updateRabbitMQTarget === null) {
        throw new Error("Missing the required parameter 'updateRabbitMQTarget' when calling updateRabbitMQTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRabbitMQTargetOutput;
      return this.apiClient.callApi(
        '/update-rabbitmq-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateRabbitMQTarget} updateRabbitMQTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateRabbitMQTargetOutput}
     */
    updateRabbitMQTarget(updateRabbitMQTarget) {
      return this.updateRabbitMQTargetWithHttpInfo(updateRabbitMQTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateRabbitMQTargetDetails} updateRabbitMQTargetDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */
    updateRabbitMQTargetDetailsWithHttpInfo(updateRabbitMQTargetDetails) {
      let postBody = updateRabbitMQTargetDetails;
      // verify the required parameter 'updateRabbitMQTargetDetails' is set
      if (updateRabbitMQTargetDetails === undefined || updateRabbitMQTargetDetails === null) {
        throw new Error("Missing the required parameter 'updateRabbitMQTargetDetails' when calling updateRabbitMQTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-rabbitmq-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateRabbitMQTargetDetails} updateRabbitMQTargetDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */
    updateRabbitMQTargetDetails(updateRabbitMQTargetDetails) {
      return this.updateRabbitMQTargetDetailsWithHttpInfo(updateRabbitMQTargetDetails)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateRole} updateRole 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateRoleOutput} and HTTP response
     */
    updateRoleWithHttpInfo(updateRole) {
      let postBody = updateRole;
      // verify the required parameter 'updateRole' is set
      if (updateRole === undefined || updateRole === null) {
        throw new Error("Missing the required parameter 'updateRole' when calling updateRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRoleOutput;
      return this.apiClient.callApi(
        '/update-role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateRole} updateRole 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateRoleOutput}
     */
    updateRole(updateRole) {
      return this.updateRoleWithHttpInfo(updateRole)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateRotatedSecret} updateRotatedSecret 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateRotatedSecretOutput} and HTTP response
     */
    updateRotatedSecretWithHttpInfo(updateRotatedSecret) {
      let postBody = updateRotatedSecret;
      // verify the required parameter 'updateRotatedSecret' is set
      if (updateRotatedSecret === undefined || updateRotatedSecret === null) {
        throw new Error("Missing the required parameter 'updateRotatedSecret' when calling updateRotatedSecret");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRotatedSecretOutput;
      return this.apiClient.callApi(
        '/update-rotated-secret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateRotatedSecret} updateRotatedSecret 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateRotatedSecretOutput}
     */
    updateRotatedSecret(updateRotatedSecret) {
      return this.updateRotatedSecretWithHttpInfo(updateRotatedSecret)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateRotationSettings} updateRotationSettings 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotateKeyOutput} and HTTP response
     */
    updateRotationSettingsWithHttpInfo(updateRotationSettings) {
      let postBody = updateRotationSettings;
      // verify the required parameter 'updateRotationSettings' is set
      if (updateRotationSettings === undefined || updateRotationSettings === null) {
        throw new Error("Missing the required parameter 'updateRotationSettings' when calling updateRotationSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotateKeyOutput;
      return this.apiClient.callApi(
        '/update-rotation-settings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateRotationSettings} updateRotationSettings 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotateKeyOutput}
     */
    updateRotationSettings(updateRotationSettings) {
      return this.updateRotationSettingsWithHttpInfo(updateRotationSettings)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateSSHCertIssuer} updateSSHCertIssuer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateSSHCertIssuerOutput} and HTTP response
     */
    updateSSHCertIssuerWithHttpInfo(updateSSHCertIssuer) {
      let postBody = updateSSHCertIssuer;
      // verify the required parameter 'updateSSHCertIssuer' is set
      if (updateSSHCertIssuer === undefined || updateSSHCertIssuer === null) {
        throw new Error("Missing the required parameter 'updateSSHCertIssuer' when calling updateSSHCertIssuer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSSHCertIssuerOutput;
      return this.apiClient.callApi(
        '/update-ssh-cert-issuer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateSSHCertIssuer} updateSSHCertIssuer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateSSHCertIssuerOutput}
     */
    updateSSHCertIssuer(updateSSHCertIssuer) {
      return this.updateSSHCertIssuerWithHttpInfo(updateSSHCertIssuer)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateSSHTarget} updateSSHTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateSSHTargetOutput} and HTTP response
     */
    updateSSHTargetWithHttpInfo(updateSSHTarget) {
      let postBody = updateSSHTarget;
      // verify the required parameter 'updateSSHTarget' is set
      if (updateSSHTarget === undefined || updateSSHTarget === null) {
        throw new Error("Missing the required parameter 'updateSSHTarget' when calling updateSSHTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSSHTargetOutput;
      return this.apiClient.callApi(
        '/update-ssh-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateSSHTarget} updateSSHTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateSSHTargetOutput}
     */
    updateSSHTarget(updateSSHTarget) {
      return this.updateSSHTargetWithHttpInfo(updateSSHTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateSSHTargetDetails} updateSSHTargetDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */
    updateSSHTargetDetailsWithHttpInfo(updateSSHTargetDetails) {
      let postBody = updateSSHTargetDetails;
      // verify the required parameter 'updateSSHTargetDetails' is set
      if (updateSSHTargetDetails === undefined || updateSSHTargetDetails === null) {
        throw new Error("Missing the required parameter 'updateSSHTargetDetails' when calling updateSSHTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-ssh-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateSSHTargetDetails} updateSSHTargetDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */
    updateSSHTargetDetails(updateSSHTargetDetails) {
      return this.updateSSHTargetDetailsWithHttpInfo(updateSSHTargetDetails)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateSalesforceTarget} updateSalesforceTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateSalesforceTargetOutput} and HTTP response
     */
    updateSalesforceTargetWithHttpInfo(updateSalesforceTarget) {
      let postBody = updateSalesforceTarget;
      // verify the required parameter 'updateSalesforceTarget' is set
      if (updateSalesforceTarget === undefined || updateSalesforceTarget === null) {
        throw new Error("Missing the required parameter 'updateSalesforceTarget' when calling updateSalesforceTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSalesforceTargetOutput;
      return this.apiClient.callApi(
        '/update-salesforce-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateSalesforceTarget} updateSalesforceTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateSalesforceTargetOutput}
     */
    updateSalesforceTarget(updateSalesforceTarget) {
      return this.updateSalesforceTargetWithHttpInfo(updateSalesforceTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateSecretVal} updateSecretVal 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateSecretValOutput} and HTTP response
     */
    updateSecretValWithHttpInfo(updateSecretVal) {
      let postBody = updateSecretVal;
      // verify the required parameter 'updateSecretVal' is set
      if (updateSecretVal === undefined || updateSecretVal === null) {
        throw new Error("Missing the required parameter 'updateSecretVal' when calling updateSecretVal");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSecretValOutput;
      return this.apiClient.callApi(
        '/update-secret-val', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateSecretVal} updateSecretVal 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateSecretValOutput}
     */
    updateSecretVal(updateSecretVal) {
      return this.updateSecretValWithHttpInfo(updateSecretVal)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateTarget} updateTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */
    updateTargetWithHttpInfo(updateTarget) {
      let postBody = updateTarget;
      // verify the required parameter 'updateTarget' is set
      if (updateTarget === undefined || updateTarget === null) {
        throw new Error("Missing the required parameter 'updateTarget' when calling updateTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateTarget} updateTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */
    updateTarget(updateTarget) {
      return this.updateTargetWithHttpInfo(updateTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateTargetDetails} updateTargetDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */
    updateTargetDetailsWithHttpInfo(updateTargetDetails) {
      let postBody = updateTargetDetails;
      // verify the required parameter 'updateTargetDetails' is set
      if (updateTargetDetails === undefined || updateTargetDetails === null) {
        throw new Error("Missing the required parameter 'updateTargetDetails' when calling updateTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateTargetDetails} updateTargetDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */
    updateTargetDetails(updateTargetDetails) {
      return this.updateTargetDetailsWithHttpInfo(updateTargetDetails)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateWebTarget} updateWebTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateWebTargetOutput} and HTTP response
     */
    updateWebTargetWithHttpInfo(updateWebTarget) {
      let postBody = updateWebTarget;
      // verify the required parameter 'updateWebTarget' is set
      if (updateWebTarget === undefined || updateWebTarget === null) {
        throw new Error("Missing the required parameter 'updateWebTarget' when calling updateWebTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateWebTargetOutput;
      return this.apiClient.callApi(
        '/update-web-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateWebTarget} updateWebTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateWebTargetOutput}
     */
    updateWebTarget(updateWebTarget) {
      return this.updateWebTargetWithHttpInfo(updateWebTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateWebTargetDetails} updateWebTargetDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */
    updateWebTargetDetailsWithHttpInfo(updateWebTargetDetails) {
      let postBody = updateWebTargetDetails;
      // verify the required parameter 'updateWebTargetDetails' is set
      if (updateWebTargetDetails === undefined || updateWebTargetDetails === null) {
        throw new Error("Missing the required parameter 'updateWebTargetDetails' when calling updateWebTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-web-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateWebTargetDetails} updateWebTargetDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */
    updateWebTargetDetails(updateWebTargetDetails) {
      return this.updateWebTargetDetailsWithHttpInfo(updateWebTargetDetails)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateWindowsTarget} updateWindowsTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateWindowsTargetWithHttpInfo(updateWindowsTarget) {
      let postBody = updateWindowsTarget;
      // verify the required parameter 'updateWindowsTarget' is set
      if (updateWindowsTarget === undefined || updateWindowsTarget === null) {
        throw new Error("Missing the required parameter 'updateWindowsTarget' when calling updateWindowsTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-windows-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateWindowsTarget} updateWindowsTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateWindowsTarget(updateWindowsTarget) {
      return this.updateWindowsTargetWithHttpInfo(updateWindowsTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateZeroSSLTarget} updateZeroSSLTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateZeroSSLTargetOutput} and HTTP response
     */
    updateZeroSSLTargetWithHttpInfo(updateZeroSSLTarget) {
      let postBody = updateZeroSSLTarget;
      // verify the required parameter 'updateZeroSSLTarget' is set
      if (updateZeroSSLTarget === undefined || updateZeroSSLTarget === null) {
        throw new Error("Missing the required parameter 'updateZeroSSLTarget' when calling updateZeroSSLTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateZeroSSLTargetOutput;
      return this.apiClient.callApi(
        '/update-zerossl-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateZeroSSLTarget} updateZeroSSLTarget 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateZeroSSLTargetOutput}
     */
    updateZeroSSLTarget(updateZeroSSLTarget) {
      return this.updateZeroSSLTargetWithHttpInfo(updateZeroSSLTarget)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UploadRSA} uploadRSA 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    uploadRSAWithHttpInfo(uploadRSA) {
      let postBody = uploadRSA;
      // verify the required parameter 'uploadRSA' is set
      if (uploadRSA === undefined || uploadRSA === null) {
        throw new Error("Missing the required parameter 'uploadRSA' when calling uploadRSA");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/upload-rsa', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UploadRSA} uploadRSA 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    uploadRSA(uploadRSA) {
      return this.uploadRSAWithHttpInfo(uploadRSA)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UscUpdate} uscUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UscCreateSecretOutput} and HTTP response
     */
    uscCreateWithHttpInfo(uscUpdate) {
      let postBody = uscUpdate;
      // verify the required parameter 'uscUpdate' is set
      if (uscUpdate === undefined || uscUpdate === null) {
        throw new Error("Missing the required parameter 'uscUpdate' when calling uscCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UscCreateSecretOutput;
      return this.apiClient.callApi(
        '/usc-create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UscUpdate} uscUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UscCreateSecretOutput}
     */
    uscCreate(uscUpdate) {
      return this.uscCreateWithHttpInfo(uscUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UscDelete} uscDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UscDeleteSecretOutput} and HTTP response
     */
    uscDeleteWithHttpInfo(uscDelete) {
      let postBody = uscDelete;
      // verify the required parameter 'uscDelete' is set
      if (uscDelete === undefined || uscDelete === null) {
        throw new Error("Missing the required parameter 'uscDelete' when calling uscDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UscDeleteSecretOutput;
      return this.apiClient.callApi(
        '/usc-delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UscDelete} uscDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UscDeleteSecretOutput}
     */
    uscDelete(uscDelete) {
      return this.uscDeleteWithHttpInfo(uscDelete)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UscGet} uscGet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UscGetSecretOutput} and HTTP response
     */
    uscGetWithHttpInfo(uscGet) {
      let postBody = uscGet;
      // verify the required parameter 'uscGet' is set
      if (uscGet === undefined || uscGet === null) {
        throw new Error("Missing the required parameter 'uscGet' when calling uscGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UscGetSecretOutput;
      return this.apiClient.callApi(
        '/usc-get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UscGet} uscGet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UscGetSecretOutput}
     */
    uscGet(uscGet) {
      return this.uscGetWithHttpInfo(uscGet)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UscList} uscList 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UscListSecretsOutput} and HTTP response
     */
    uscListWithHttpInfo(uscList) {
      let postBody = uscList;
      // verify the required parameter 'uscList' is set
      if (uscList === undefined || uscList === null) {
        throw new Error("Missing the required parameter 'uscList' when calling uscList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UscListSecretsOutput;
      return this.apiClient.callApi(
        '/usc-list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UscList} uscList 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UscListSecretsOutput}
     */
    uscList(uscList) {
      return this.uscListWithHttpInfo(uscList)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UscUpdateSecretOutput} and HTTP response
     */
    uscUpdateWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UscUpdateSecretOutput;
      return this.apiClient.callApi(
        '/usc-update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UscUpdateSecretOutput}
     */
    uscUpdate() {
      return this.uscUpdateWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ValidateToken} validateToken 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ValidateTokenOutput} and HTTP response
     */
    validateTokenWithHttpInfo(validateToken) {
      let postBody = validateToken;
      // verify the required parameter 'validateToken' is set
      if (validateToken === undefined || validateToken === null) {
        throw new Error("Missing the required parameter 'validateToken' when calling validateToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ValidateTokenOutput;
      return this.apiClient.callApi(
        '/validate-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ValidateToken} validateToken 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ValidateTokenOutput}
     */
    validateToken(validateToken) {
      return this.validateTokenWithHttpInfo(validateToken)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/VerifyDataWithClassicKey} verifyDataWithClassicKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifyPKICertOutput} and HTTP response
     */
    verifyDataWithClassicKeyWithHttpInfo(verifyDataWithClassicKey) {
      let postBody = verifyDataWithClassicKey;
      // verify the required parameter 'verifyDataWithClassicKey' is set
      if (verifyDataWithClassicKey === undefined || verifyDataWithClassicKey === null) {
        throw new Error("Missing the required parameter 'verifyDataWithClassicKey' when calling verifyDataWithClassicKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyPKICertOutput;
      return this.apiClient.callApi(
        '/verify-data-with-classic-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/VerifyDataWithClassicKey} verifyDataWithClassicKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifyPKICertOutput}
     */
    verifyDataWithClassicKey(verifyDataWithClassicKey) {
      return this.verifyDataWithClassicKeyWithHttpInfo(verifyDataWithClassicKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/VerifyEcDsa} verifyEcDsa 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    verifyEcDsaWithHttpInfo(verifyEcDsa) {
      let postBody = verifyEcDsa;
      // verify the required parameter 'verifyEcDsa' is set
      if (verifyEcDsa === undefined || verifyEcDsa === null) {
        throw new Error("Missing the required parameter 'verifyEcDsa' when calling verifyEcDsa");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/verify-ecdsa', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/VerifyEcDsa} verifyEcDsa 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    verifyEcDsa(verifyEcDsa) {
      return this.verifyEcDsaWithHttpInfo(verifyEcDsa)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/VerifyGPG} verifyGPG 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    verifyGPGWithHttpInfo(verifyGPG) {
      let postBody = verifyGPG;
      // verify the required parameter 'verifyGPG' is set
      if (verifyGPG === undefined || verifyGPG === null) {
        throw new Error("Missing the required parameter 'verifyGPG' when calling verifyGPG");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/verify-gpg', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/VerifyGPG} verifyGPG 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    verifyGPG(verifyGPG) {
      return this.verifyGPGWithHttpInfo(verifyGPG)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/VerifyJWTWithClassicKey} verifyJWTWithClassicKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifyJWTOutput} and HTTP response
     */
    verifyJWTWithClassicKeyWithHttpInfo(verifyJWTWithClassicKey) {
      let postBody = verifyJWTWithClassicKey;
      // verify the required parameter 'verifyJWTWithClassicKey' is set
      if (verifyJWTWithClassicKey === undefined || verifyJWTWithClassicKey === null) {
        throw new Error("Missing the required parameter 'verifyJWTWithClassicKey' when calling verifyJWTWithClassicKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyJWTOutput;
      return this.apiClient.callApi(
        '/verify-jwt-with-classic-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/VerifyJWTWithClassicKey} verifyJWTWithClassicKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifyJWTOutput}
     */
    verifyJWTWithClassicKey(verifyJWTWithClassicKey) {
      return this.verifyJWTWithClassicKeyWithHttpInfo(verifyJWTWithClassicKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/VerifyPKCS1} verifyPKCS1 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    verifyPKCS1WithHttpInfo(verifyPKCS1) {
      let postBody = verifyPKCS1;
      // verify the required parameter 'verifyPKCS1' is set
      if (verifyPKCS1 === undefined || verifyPKCS1 === null) {
        throw new Error("Missing the required parameter 'verifyPKCS1' when calling verifyPKCS1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/verify-pkcs1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/VerifyPKCS1} verifyPKCS1 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    verifyPKCS1(verifyPKCS1) {
      return this.verifyPKCS1WithHttpInfo(verifyPKCS1)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/VerifyPKICertWithClassicKey} verifyPKICertWithClassicKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifyPKICertOutput} and HTTP response
     */
    verifyPKICertWithClassicKeyWithHttpInfo(verifyPKICertWithClassicKey) {
      let postBody = verifyPKICertWithClassicKey;
      // verify the required parameter 'verifyPKICertWithClassicKey' is set
      if (verifyPKICertWithClassicKey === undefined || verifyPKICertWithClassicKey === null) {
        throw new Error("Missing the required parameter 'verifyPKICertWithClassicKey' when calling verifyPKICertWithClassicKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyPKICertOutput;
      return this.apiClient.callApi(
        '/verify-pki-cert-with-classic-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/VerifyPKICertWithClassicKey} verifyPKICertWithClassicKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifyPKICertOutput}
     */
    verifyPKICertWithClassicKey(verifyPKICertWithClassicKey) {
      return this.verifyPKICertWithClassicKeyWithHttpInfo(verifyPKICertWithClassicKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/VerifyRsaSsaPss} verifyRsaSsaPss 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    verifyRsaSsaPssWithHttpInfo(verifyRsaSsaPss) {
      let postBody = verifyRsaSsaPss;
      // verify the required parameter 'verifyRsaSsaPss' is set
      if (verifyRsaSsaPss === undefined || verifyRsaSsaPss === null) {
        throw new Error("Missing the required parameter 'verifyRsaSsaPss' when calling verifyRsaSsaPss");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/verify-rsassa-pss', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/VerifyRsaSsaPss} verifyRsaSsaPss 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    verifyRsaSsaPss(verifyRsaSsaPss) {
      return this.verifyRsaSsaPssWithHttpInfo(verifyRsaSsaPss)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
