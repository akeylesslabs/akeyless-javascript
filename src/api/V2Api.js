/**
 * includes all operations supported by Akeyless.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssocRoleAuthMethod from '../model/AssocRoleAuthMethod';
import Auth from '../model/Auth';
import AuthMethod from '../model/AuthMethod';
import AuthOutput from '../model/AuthOutput';
import Configure from '../model/Configure';
import ConfigureOutput from '../model/ConfigureOutput';
import CreateAuthMethod from '../model/CreateAuthMethod';
import CreateAuthMethodAWSIAM from '../model/CreateAuthMethodAWSIAM';
import CreateAuthMethodAWSIAMOutput from '../model/CreateAuthMethodAWSIAMOutput';
import CreateAuthMethodAzureAD from '../model/CreateAuthMethodAzureAD';
import CreateAuthMethodAzureADOutput from '../model/CreateAuthMethodAzureADOutput';
import CreateAuthMethodHuawei from '../model/CreateAuthMethodHuawei';
import CreateAuthMethodHuaweiOutput from '../model/CreateAuthMethodHuaweiOutput';
import CreateAuthMethodOAuth2 from '../model/CreateAuthMethodOAuth2';
import CreateAuthMethodOAuth2Output from '../model/CreateAuthMethodOAuth2Output';
import CreateAuthMethodOutput from '../model/CreateAuthMethodOutput';
import CreateAuthMethodSAML from '../model/CreateAuthMethodSAML';
import CreateAuthMethodSAMLOutput from '../model/CreateAuthMethodSAMLOutput';
import CreateAuthMethodUniversalIdentity from '../model/CreateAuthMethodUniversalIdentity';
import CreateAuthMethodUniversalIdentityOutput from '../model/CreateAuthMethodUniversalIdentityOutput';
import CreateDynamicSecret from '../model/CreateDynamicSecret';
import CreateKey from '../model/CreateKey';
import CreateKeyOutput from '../model/CreateKeyOutput';
import CreatePKICertIssuer from '../model/CreatePKICertIssuer';
import CreatePKICertIssuerOutput from '../model/CreatePKICertIssuerOutput';
import CreateRole from '../model/CreateRole';
import CreateRoleAuthMethodAssocOutput from '../model/CreateRoleAuthMethodAssocOutput';
import CreateSSHCertIssuer from '../model/CreateSSHCertIssuer';
import CreateSSHCertIssuerOutput from '../model/CreateSSHCertIssuerOutput';
import CreateSecret from '../model/CreateSecret';
import CreateSecretOutput from '../model/CreateSecretOutput';
import Decrypt from '../model/Decrypt';
import DecryptOutput from '../model/DecryptOutput';
import DecryptPKCS1 from '../model/DecryptPKCS1';
import DecryptPKCS1Output from '../model/DecryptPKCS1Output';
import DeleteAuthMethod from '../model/DeleteAuthMethod';
import DeleteAuthMethodOutput from '../model/DeleteAuthMethodOutput';
import DeleteAuthMethods from '../model/DeleteAuthMethods';
import DeleteAuthMethodsOutput from '../model/DeleteAuthMethodsOutput';
import DeleteItem from '../model/DeleteItem';
import DeleteItemOutput from '../model/DeleteItemOutput';
import DeleteItems from '../model/DeleteItems';
import DeleteItemsOutput from '../model/DeleteItemsOutput';
import DeleteRole from '../model/DeleteRole';
import DeleteRoleAssociation from '../model/DeleteRoleAssociation';
import DeleteRoleRule from '../model/DeleteRoleRule';
import DeleteRoleRuleOutput from '../model/DeleteRoleRuleOutput';
import DeleteRoles from '../model/DeleteRoles';
import DescribeItem from '../model/DescribeItem';
import Encrypt from '../model/Encrypt';
import EncryptOutput from '../model/EncryptOutput';
import EncryptPKCS1 from '../model/EncryptPKCS1';
import EncryptPKCS1Output from '../model/EncryptPKCS1Output';
import GetAuthMethod from '../model/GetAuthMethod';
import GetDynamicSecretValue from '../model/GetDynamicSecretValue';
import GetRSAPublic from '../model/GetRSAPublic';
import GetRSAPublicOutput from '../model/GetRSAPublicOutput';
import GetRole from '../model/GetRole';
import GetSSHCertificate from '../model/GetSSHCertificate';
import GetSSHCertificateOutput from '../model/GetSSHCertificateOutput';
import GetSecretValue from '../model/GetSecretValue';
import Item from '../model/Item';
import JSONError from '../model/JSONError';
import ListAuthMethods from '../model/ListAuthMethods';
import ListAuthMethodsOutput from '../model/ListAuthMethodsOutput';
import ListItems from '../model/ListItems';
import ListItemsInPathOutput from '../model/ListItemsInPathOutput';
import ListRoles from '../model/ListRoles';
import ListRolesOutput from '../model/ListRolesOutput';
import MoveObjects from '../model/MoveObjects';
import RefreshKey from '../model/RefreshKey';
import RefreshKeyOutput from '../model/RefreshKeyOutput';
import ReverseRBAC from '../model/ReverseRBAC';
import ReverseRBACOutput from '../model/ReverseRBACOutput';
import Role from '../model/Role';
import RollbackSecret from '../model/RollbackSecret';
import RollbackSecretOutput from '../model/RollbackSecretOutput';
import RotateKey from '../model/RotateKey';
import RotateKeyOutput from '../model/RotateKeyOutput';
import SetItemState from '../model/SetItemState';
import SetRoleRule from '../model/SetRoleRule';
import SignPKCS1 from '../model/SignPKCS1';
import SignPKCS1Output from '../model/SignPKCS1Output';
import StaticCredsAuth from '../model/StaticCredsAuth';
import StaticCredsAuthOutput from '../model/StaticCredsAuthOutput';
import UidCreateChildToken from '../model/UidCreateChildToken';
import UidCreateChildTokenOutput from '../model/UidCreateChildTokenOutput';
import UidGenerateToken from '../model/UidGenerateToken';
import UidGenerateTokenOutput from '../model/UidGenerateTokenOutput';
import UidListChildren from '../model/UidListChildren';
import UidRevokeToken from '../model/UidRevokeToken';
import UidRotateToken from '../model/UidRotateToken';
import UidRotateTokenOutput from '../model/UidRotateTokenOutput';
import UniversalIdentityDetails from '../model/UniversalIdentityDetails';
import UpdateItem from '../model/UpdateItem';
import UpdateItemOutput from '../model/UpdateItemOutput';
import UpdateRole from '../model/UpdateRole';
import UpdateRoleOutput from '../model/UpdateRoleOutput';
import UpdateSecretVal from '../model/UpdateSecretVal';
import UpdateSecretValOutput from '../model/UpdateSecretValOutput';
import UploadRSA from '../model/UploadRSA';
import VerifyPKCS1 from '../model/VerifyPKCS1';

/**
* V2 service.
* @module api/V2Api
* @version 0.0.1
*/
export default class V2Api {

    /**
    * Constructs a new V2Api. 
    * @alias module:api/V2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the assocRoleAuthMethod operation.
     * @callback module:api/V2Api~assocRoleAuthMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRoleAuthMethodAssocOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/AssocRoleAuthMethod} opts.body 
     * @param {module:api/V2Api~assocRoleAuthMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRoleAuthMethodAssocOutput}
     */
    assocRoleAuthMethod(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRoleAuthMethodAssocOutput;
      return this.apiClient.callApi(
        '/assoc-role-am', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the auth operation.
     * @callback module:api/V2Api~authCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/Auth} opts.body 
     * @param {module:api/V2Api~authCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthOutput}
     */
    auth(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthOutput;
      return this.apiClient.callApi(
        '/auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configure operation.
     * @callback module:api/V2Api~configureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigureOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/Configure} opts.body 
     * @param {module:api/V2Api~configureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigureOutput}
     */
    configure(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigureOutput;
      return this.apiClient.callApi(
        '/configure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethod operation.
     * @callback module:api/V2Api~createAuthMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthMethodOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateAuthMethod} opts.body 
     * @param {module:api/V2Api~createAuthMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthMethodOutput}
     */
    createAuthMethod(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodOutput;
      return this.apiClient.callApi(
        '/create-auth-method', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethodAWSIAM operation.
     * @callback module:api/V2Api~createAuthMethodAWSIAMCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthMethodAWSIAMOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateAuthMethodAWSIAM} opts.body 
     * @param {module:api/V2Api~createAuthMethodAWSIAMCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthMethodAWSIAMOutput}
     */
    createAuthMethodAWSIAM(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodAWSIAMOutput;
      return this.apiClient.callApi(
        '/create-auth-method-aws-iam', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethodAzureAD operation.
     * @callback module:api/V2Api~createAuthMethodAzureADCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthMethodAzureADOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateAuthMethodAzureAD} opts.body 
     * @param {module:api/V2Api~createAuthMethodAzureADCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthMethodAzureADOutput}
     */
    createAuthMethodAzureAD(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodAzureADOutput;
      return this.apiClient.callApi(
        '/create-auth-method-azure-ad', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethodHuawei operation.
     * @callback module:api/V2Api~createAuthMethodHuaweiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthMethodHuaweiOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateAuthMethodHuawei} opts.body 
     * @param {module:api/V2Api~createAuthMethodHuaweiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthMethodHuaweiOutput}
     */
    createAuthMethodHuawei(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodHuaweiOutput;
      return this.apiClient.callApi(
        '/create-auth-method-huawei', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethodOAuth2 operation.
     * @callback module:api/V2Api~createAuthMethodOAuth2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthMethodOAuth2Output} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateAuthMethodOAuth2} opts.body 
     * @param {module:api/V2Api~createAuthMethodOAuth2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthMethodOAuth2Output}
     */
    createAuthMethodOAuth2(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodOAuth2Output;
      return this.apiClient.callApi(
        '/create-auth-method-oauth2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethodSAML operation.
     * @callback module:api/V2Api~createAuthMethodSAMLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthMethodSAMLOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateAuthMethodSAML} opts.body 
     * @param {module:api/V2Api~createAuthMethodSAMLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthMethodSAMLOutput}
     */
    createAuthMethodSAML(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodSAMLOutput;
      return this.apiClient.callApi(
        '/create-auth-method-saml', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethodUniversalIdentity operation.
     * @callback module:api/V2Api~createAuthMethodUniversalIdentityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthMethodUniversalIdentityOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateAuthMethodUniversalIdentity} opts.body 
     * @param {module:api/V2Api~createAuthMethodUniversalIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthMethodUniversalIdentityOutput}
     */
    createAuthMethodUniversalIdentity(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodUniversalIdentityOutput;
      return this.apiClient.callApi(
        '/create-auth-method-universal-identity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDynamicSecret operation.
     * @callback module:api/V2Api~createDynamicSecretCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateDynamicSecret} opts.body 
     * @param {module:api/V2Api~createDynamicSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createDynamicSecret(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/create-dynamic-secret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createKey operation.
     * @callback module:api/V2Api~createKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateKeyOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateKey} opts.body 
     * @param {module:api/V2Api~createKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateKeyOutput}
     */
    createKey(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateKeyOutput;
      return this.apiClient.callApi(
        '/create-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPKICertIssuer operation.
     * @callback module:api/V2Api~createPKICertIssuerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePKICertIssuerOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePKICertIssuer} opts.body 
     * @param {module:api/V2Api~createPKICertIssuerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePKICertIssuerOutput}
     */
    createPKICertIssuer(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePKICertIssuerOutput;
      return this.apiClient.callApi(
        '/create-pki-cert-issuer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRole operation.
     * @callback module:api/V2Api~createRoleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateRole} opts.body 
     * @param {module:api/V2Api~createRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createRole(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/create-role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSSHCertIssuer operation.
     * @callback module:api/V2Api~createSSHCertIssuerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSSHCertIssuerOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSSHCertIssuer} opts.body 
     * @param {module:api/V2Api~createSSHCertIssuerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSSHCertIssuerOutput}
     */
    createSSHCertIssuer(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSSHCertIssuerOutput;
      return this.apiClient.callApi(
        '/create-ssh-cert-issuer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSecret operation.
     * @callback module:api/V2Api~createSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSecretOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSecret} opts.body 
     * @param {module:api/V2Api~createSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSecretOutput}
     */
    createSecret(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSecretOutput;
      return this.apiClient.callApi(
        '/create-secret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the decrypt operation.
     * @callback module:api/V2Api~decryptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DecryptOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/Decrypt} opts.body 
     * @param {module:api/V2Api~decryptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DecryptOutput}
     */
    decrypt(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DecryptOutput;
      return this.apiClient.callApi(
        '/decrypt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the decryptPKCS1 operation.
     * @callback module:api/V2Api~decryptPKCS1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DecryptPKCS1Output} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DecryptPKCS1} opts.body 
     * @param {module:api/V2Api~decryptPKCS1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DecryptPKCS1Output}
     */
    decryptPKCS1(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DecryptPKCS1Output;
      return this.apiClient.callApi(
        '/decrypt-pkcs1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthMethod operation.
     * @callback module:api/V2Api~deleteAuthMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAuthMethodOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteAuthMethod} opts.body 
     * @param {module:api/V2Api~deleteAuthMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAuthMethodOutput}
     */
    deleteAuthMethod(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAuthMethodOutput;
      return this.apiClient.callApi(
        '/delete-auth-method', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthMethods operation.
     * @callback module:api/V2Api~deleteAuthMethodsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAuthMethodsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteAuthMethods} opts.body 
     * @param {module:api/V2Api~deleteAuthMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAuthMethodsOutput}
     */
    deleteAuthMethods(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAuthMethodsOutput;
      return this.apiClient.callApi(
        '/delete-auth-methods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteItem operation.
     * @callback module:api/V2Api~deleteItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteItemOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteItem} opts.body 
     * @param {module:api/V2Api~deleteItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteItemOutput}
     */
    deleteItem(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteItemOutput;
      return this.apiClient.callApi(
        '/delete-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteItems operation.
     * @callback module:api/V2Api~deleteItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteItemsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteItems} opts.body 
     * @param {module:api/V2Api~deleteItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteItemsOutput}
     */
    deleteItems(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteItemsOutput;
      return this.apiClient.callApi(
        '/delete-items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRole operation.
     * @callback module:api/V2Api~deleteRoleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteRole} opts.body 
     * @param {module:api/V2Api~deleteRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteRole(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRoleAssociation operation.
     * @callback module:api/V2Api~deleteRoleAssociationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteRoleAssociation} opts.body 
     * @param {module:api/V2Api~deleteRoleAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteRoleAssociation(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-assoc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRoleRule operation.
     * @callback module:api/V2Api~deleteRoleRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteRoleRuleOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteRoleRule} opts.body 
     * @param {module:api/V2Api~deleteRoleRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteRoleRuleOutput}
     */
    deleteRoleRule(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteRoleRuleOutput;
      return this.apiClient.callApi(
        '/delete-role-rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRoles operation.
     * @callback module:api/V2Api~deleteRolesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteRoles} opts.body 
     * @param {module:api/V2Api~deleteRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteRoles(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeItem operation.
     * @callback module:api/V2Api~describeItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Item} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DescribeItem} opts.body 
     * @param {module:api/V2Api~describeItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Item}
     */
    describeItem(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Item;
      return this.apiClient.callApi(
        '/describe-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the encrypt operation.
     * @callback module:api/V2Api~encryptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EncryptOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/Encrypt} opts.body 
     * @param {module:api/V2Api~encryptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EncryptOutput}
     */
    encrypt(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EncryptOutput;
      return this.apiClient.callApi(
        '/encrypt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the encryptPKCS1 operation.
     * @callback module:api/V2Api~encryptPKCS1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/EncryptPKCS1Output} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/EncryptPKCS1} opts.body 
     * @param {module:api/V2Api~encryptPKCS1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EncryptPKCS1Output}
     */
    encryptPKCS1(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EncryptPKCS1Output;
      return this.apiClient.callApi(
        '/encrypt-pkcs1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthMethod operation.
     * @callback module:api/V2Api~getAuthMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthMethod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GetAuthMethod} opts.body 
     * @param {module:api/V2Api~getAuthMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthMethod}
     */
    getAuthMethod(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethod;
      return this.apiClient.callApi(
        '/get-auth-method', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDynamicSecretValue operation.
     * @callback module:api/V2Api~getDynamicSecretValueCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GetDynamicSecretValue} opts.body 
     * @param {module:api/V2Api~getDynamicSecretValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getDynamicSecretValue(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/get-dynamic-secret-value', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRSAPublic operation.
     * @callback module:api/V2Api~getRSAPublicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRSAPublicOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRSAPublic} opts.body 
     * @param {module:api/V2Api~getRSAPublicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRSAPublicOutput}
     */
    getRSAPublic(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetRSAPublicOutput;
      return this.apiClient.callApi(
        '/get-rsa-public', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRole operation.
     * @callback module:api/V2Api~getRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GetRole} opts.body 
     * @param {module:api/V2Api~getRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    getRole(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/get-role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSSHCertificate operation.
     * @callback module:api/V2Api~getSSHCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSSHCertificateOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GetSSHCertificate} opts.body 
     * @param {module:api/V2Api~getSSHCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSSHCertificateOutput}
     */
    getSSHCertificate(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSSHCertificateOutput;
      return this.apiClient.callApi(
        '/get-ssh-certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecretValue operation.
     * @callback module:api/V2Api~getSecretValueCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GetSecretValue} opts.body 
     * @param {module:api/V2Api~getSecretValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getSecretValue(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/get-secret-value', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAuthMethods operation.
     * @callback module:api/V2Api~listAuthMethodsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAuthMethodsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ListAuthMethods} opts.body 
     * @param {module:api/V2Api~listAuthMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAuthMethodsOutput}
     */
    listAuthMethods(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAuthMethodsOutput;
      return this.apiClient.callApi(
        '/list-auth-methods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listItems operation.
     * @callback module:api/V2Api~listItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListItemsInPathOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ListItems} opts.body 
     * @param {module:api/V2Api~listItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListItemsInPathOutput}
     */
    listItems(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListItemsInPathOutput;
      return this.apiClient.callApi(
        '/list-items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRoles operation.
     * @callback module:api/V2Api~listRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRolesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ListRoles} opts.body 
     * @param {module:api/V2Api~listRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRolesOutput}
     */
    listRoles(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListRolesOutput;
      return this.apiClient.callApi(
        '/list-roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveObjects operation.
     * @callback module:api/V2Api~moveObjectsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/MoveObjects} opts.body 
     * @param {module:api/V2Api~moveObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    moveObjects(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/move-objects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshKey operation.
     * @callback module:api/V2Api~refreshKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefreshKeyOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/RefreshKey} opts.body 
     * @param {module:api/V2Api~refreshKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefreshKeyOutput}
     */
    refreshKey(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RefreshKeyOutput;
      return this.apiClient.callApi(
        '/refresh-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reverseRBAC operation.
     * @callback module:api/V2Api~reverseRBACCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReverseRBACOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ReverseRBAC} opts.body 
     * @param {module:api/V2Api~reverseRBACCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReverseRBACOutput}
     */
    reverseRBAC(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReverseRBACOutput;
      return this.apiClient.callApi(
        '/reverse-rbac', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rollbackSecret operation.
     * @callback module:api/V2Api~rollbackSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RollbackSecretOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/RollbackSecret} opts.body 
     * @param {module:api/V2Api~rollbackSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RollbackSecretOutput}
     */
    rollbackSecret(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RollbackSecretOutput;
      return this.apiClient.callApi(
        '/rollback-secret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rotateKey operation.
     * @callback module:api/V2Api~rotateKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RotateKeyOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/RotateKey} opts.body 
     * @param {module:api/V2Api~rotateKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RotateKeyOutput}
     */
    rotateKey(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotateKeyOutput;
      return this.apiClient.callApi(
        '/rotate-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setItemState operation.
     * @callback module:api/V2Api~setItemStateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/SetItemState} opts.body 
     * @param {module:api/V2Api~setItemStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setItemState(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/set-item-state', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setRoleRule operation.
     * @callback module:api/V2Api~setRoleRuleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/SetRoleRule} opts.body 
     * @param {module:api/V2Api~setRoleRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setRoleRule(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/set-role-rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signPKCS1 operation.
     * @callback module:api/V2Api~signPKCS1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SignPKCS1Output} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/SignPKCS1} opts.body 
     * @param {module:api/V2Api~signPKCS1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignPKCS1Output}
     */
    signPKCS1(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignPKCS1Output;
      return this.apiClient.callApi(
        '/sign-pkcs1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staticCredsAuth operation.
     * @callback module:api/V2Api~staticCredsAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StaticCredsAuthOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/StaticCredsAuth} opts.body 
     * @param {module:api/V2Api~staticCredsAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StaticCredsAuthOutput}
     */
    staticCredsAuth(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StaticCredsAuthOutput;
      return this.apiClient.callApi(
        '/static-creds-auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uidCreateChildToken operation.
     * @callback module:api/V2Api~uidCreateChildTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UidCreateChildTokenOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/UidCreateChildToken} opts.body 
     * @param {module:api/V2Api~uidCreateChildTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UidCreateChildTokenOutput}
     */
    uidCreateChildToken(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UidCreateChildTokenOutput;
      return this.apiClient.callApi(
        '/uid-create-child-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uidGenerateToken operation.
     * @callback module:api/V2Api~uidGenerateTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UidGenerateTokenOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/UidGenerateToken} opts.body 
     * @param {module:api/V2Api~uidGenerateTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UidGenerateTokenOutput}
     */
    uidGenerateToken(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UidGenerateTokenOutput;
      return this.apiClient.callApi(
        '/uid-generate-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uidListChildren operation.
     * @callback module:api/V2Api~uidListChildrenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UniversalIdentityDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/UidListChildren} opts.body 
     * @param {module:api/V2Api~uidListChildrenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UniversalIdentityDetails}
     */
    uidListChildren(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UniversalIdentityDetails;
      return this.apiClient.callApi(
        '/uid-list-children', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uidRevokeToken operation.
     * @callback module:api/V2Api~uidRevokeTokenCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/UidRevokeToken} opts.body 
     * @param {module:api/V2Api~uidRevokeTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    uidRevokeToken(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/uid-revoke-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uidRotateToken operation.
     * @callback module:api/V2Api~uidRotateTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UidRotateTokenOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/UidRotateToken} opts.body 
     * @param {module:api/V2Api~uidRotateTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UidRotateTokenOutput}
     */
    uidRotateToken(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UidRotateTokenOutput;
      return this.apiClient.callApi(
        '/uid-rotate-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateItem operation.
     * @callback module:api/V2Api~updateItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateItemOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateItem} opts.body 
     * @param {module:api/V2Api~updateItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateItemOutput}
     */
    updateItem(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateItemOutput;
      return this.apiClient.callApi(
        '/update-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRole operation.
     * @callback module:api/V2Api~updateRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateRoleOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateRole} opts.body 
     * @param {module:api/V2Api~updateRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateRoleOutput}
     */
    updateRole(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRoleOutput;
      return this.apiClient.callApi(
        '/update-role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSecretVal operation.
     * @callback module:api/V2Api~updateSecretValCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSecretValOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateSecretVal} opts.body 
     * @param {module:api/V2Api~updateSecretValCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSecretValOutput}
     */
    updateSecretVal(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSecretValOutput;
      return this.apiClient.callApi(
        '/update-secret-val', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadRSA operation.
     * @callback module:api/V2Api~uploadRSACallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/UploadRSA} opts.body 
     * @param {module:api/V2Api~uploadRSACallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    uploadRSA(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/upload-rsa', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyPKCS1 operation.
     * @callback module:api/V2Api~verifyPKCS1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/VerifyPKCS1} opts.body 
     * @param {module:api/V2Api~verifyPKCS1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    verifyPKCS1(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/verify-pkcs1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
