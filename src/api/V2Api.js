/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AkeylessGatewayConfig from '../model/AkeylessGatewayConfig';
import AssocRoleAuthMethod from '../model/AssocRoleAuthMethod';
import AssocTargetItem from '../model/AssocTargetItem';
import Auth from '../model/Auth';
import AuthMethod from '../model/AuthMethod';
import AuthOutput from '../model/AuthOutput';
import Configure from '../model/Configure';
import ConfigureOutput from '../model/ConfigureOutput';
import CreateAuthMethod from '../model/CreateAuthMethod';
import CreateAuthMethodAWSIAM from '../model/CreateAuthMethodAWSIAM';
import CreateAuthMethodAWSIAMOutput from '../model/CreateAuthMethodAWSIAMOutput';
import CreateAuthMethodAzureAD from '../model/CreateAuthMethodAzureAD';
import CreateAuthMethodAzureADOutput from '../model/CreateAuthMethodAzureADOutput';
import CreateAuthMethodGCP from '../model/CreateAuthMethodGCP';
import CreateAuthMethodGCPOutput from '../model/CreateAuthMethodGCPOutput';
import CreateAuthMethodHuawei from '../model/CreateAuthMethodHuawei';
import CreateAuthMethodHuaweiOutput from '../model/CreateAuthMethodHuaweiOutput';
import CreateAuthMethodOAuth2 from '../model/CreateAuthMethodOAuth2';
import CreateAuthMethodOAuth2Output from '../model/CreateAuthMethodOAuth2Output';
import CreateAuthMethodOutput from '../model/CreateAuthMethodOutput';
import CreateAuthMethodSAML from '../model/CreateAuthMethodSAML';
import CreateAuthMethodSAMLOutput from '../model/CreateAuthMethodSAMLOutput';
import CreateAuthMethodUniversalIdentity from '../model/CreateAuthMethodUniversalIdentity';
import CreateAuthMethodUniversalIdentityOutput from '../model/CreateAuthMethodUniversalIdentityOutput';
import CreateAwsTarget from '../model/CreateAwsTarget';
import CreateDBTarget from '../model/CreateDBTarget';
import CreateDynamicSecret from '../model/CreateDynamicSecret';
import CreateKey from '../model/CreateKey';
import CreateKeyOutput from '../model/CreateKeyOutput';
import CreatePKICertIssuer from '../model/CreatePKICertIssuer';
import CreatePKICertIssuerOutput from '../model/CreatePKICertIssuerOutput';
import CreateRabbitMQTarget from '../model/CreateRabbitMQTarget';
import CreateRdpTarget from '../model/CreateRdpTarget';
import CreateRole from '../model/CreateRole';
import CreateRoleAuthMethodAssocOutput from '../model/CreateRoleAuthMethodAssocOutput';
import CreateSSHCertIssuer from '../model/CreateSSHCertIssuer';
import CreateSSHCertIssuerOutput from '../model/CreateSSHCertIssuerOutput';
import CreateSSHTarget from '../model/CreateSSHTarget';
import CreateSecret from '../model/CreateSecret';
import CreateSecretOutput from '../model/CreateSecretOutput';
import CreateTargetItemAssocOutput from '../model/CreateTargetItemAssocOutput';
import CreateWebTarget from '../model/CreateWebTarget';
import DSProducerDetails from '../model/DSProducerDetails';
import Decrypt from '../model/Decrypt';
import DecryptOutput from '../model/DecryptOutput';
import DecryptPKCS1 from '../model/DecryptPKCS1';
import DecryptPKCS1Output from '../model/DecryptPKCS1Output';
import DeleteAuthMethod from '../model/DeleteAuthMethod';
import DeleteAuthMethodOutput from '../model/DeleteAuthMethodOutput';
import DeleteAuthMethods from '../model/DeleteAuthMethods';
import DeleteAuthMethodsOutput from '../model/DeleteAuthMethodsOutput';
import DeleteItem from '../model/DeleteItem';
import DeleteItemOutput from '../model/DeleteItemOutput';
import DeleteItems from '../model/DeleteItems';
import DeleteItemsOutput from '../model/DeleteItemsOutput';
import DeleteRole from '../model/DeleteRole';
import DeleteRoleAssociation from '../model/DeleteRoleAssociation';
import DeleteRoleRule from '../model/DeleteRoleRule';
import DeleteRoleRuleOutput from '../model/DeleteRoleRuleOutput';
import DeleteRoles from '../model/DeleteRoles';
import DeleteTarget from '../model/DeleteTarget';
import DeleteTargetAssociation from '../model/DeleteTargetAssociation';
import DeleteTargets from '../model/DeleteTargets';
import DescribeItem from '../model/DescribeItem';
import Encrypt from '../model/Encrypt';
import EncryptOutput from '../model/EncryptOutput';
import EncryptPKCS1 from '../model/EncryptPKCS1';
import EncryptPKCS1Output from '../model/EncryptPKCS1Output';
import GatewayAddSubAdmins from '../model/GatewayAddSubAdmins';
import GatewayAddSubAdminsOutput from '../model/GatewayAddSubAdminsOutput';
import GatewayCreateProducerArtifactory from '../model/GatewayCreateProducerArtifactory';
import GatewayCreateProducerArtifactoryOutput from '../model/GatewayCreateProducerArtifactoryOutput';
import GatewayCreateProducerAws from '../model/GatewayCreateProducerAws';
import GatewayCreateProducerAwsOutput from '../model/GatewayCreateProducerAwsOutput';
import GatewayCreateProducerAzure from '../model/GatewayCreateProducerAzure';
import GatewayCreateProducerAzureOutput from '../model/GatewayCreateProducerAzureOutput';
import GatewayCreateProducerEks from '../model/GatewayCreateProducerEks';
import GatewayCreateProducerEksOutput from '../model/GatewayCreateProducerEksOutput';
import GatewayCreateProducerGke from '../model/GatewayCreateProducerGke';
import GatewayCreateProducerGkeOutput from '../model/GatewayCreateProducerGkeOutput';
import GatewayCreateProducerMSSQL from '../model/GatewayCreateProducerMSSQL';
import GatewayCreateProducerMSSQLOutput from '../model/GatewayCreateProducerMSSQLOutput';
import GatewayCreateProducerMongo from '../model/GatewayCreateProducerMongo';
import GatewayCreateProducerMongoOutput from '../model/GatewayCreateProducerMongoOutput';
import GatewayCreateProducerMySQL from '../model/GatewayCreateProducerMySQL';
import GatewayCreateProducerMySQLOutput from '../model/GatewayCreateProducerMySQLOutput';
import GatewayCreateProducerPostgreSQL from '../model/GatewayCreateProducerPostgreSQL';
import GatewayCreateProducerPostgreSQLOutput from '../model/GatewayCreateProducerPostgreSQLOutput';
import GatewayCreateProducerRabbitMQ from '../model/GatewayCreateProducerRabbitMQ';
import GatewayCreateProducerRabbitMQOutput from '../model/GatewayCreateProducerRabbitMQOutput';
import GatewayCreateProducerRdp from '../model/GatewayCreateProducerRdp';
import GatewayCreateProducerRdpOutput from '../model/GatewayCreateProducerRdpOutput';
import GatewayDeleteProducer from '../model/GatewayDeleteProducer';
import GatewayDeleteProducerOutput from '../model/GatewayDeleteProducerOutput';
import GatewayDeleteSubAdmins from '../model/GatewayDeleteSubAdmins';
import GatewayDeleteSubAdminsOutput from '../model/GatewayDeleteSubAdminsOutput';
import GatewayGetConfig from '../model/GatewayGetConfig';
import GatewayGetProducer from '../model/GatewayGetProducer';
import GatewayGetTmpUsers from '../model/GatewayGetTmpUsers';
import GatewayListProducers from '../model/GatewayListProducers';
import GatewayListSubAdmins from '../model/GatewayListSubAdmins';
import GatewayRevokeTmpUsers from '../model/GatewayRevokeTmpUsers';
import GatewayStartProducer from '../model/GatewayStartProducer';
import GatewayStartProducerOutput from '../model/GatewayStartProducerOutput';
import GatewayStopProducer from '../model/GatewayStopProducer';
import GatewayStopProducerOutput from '../model/GatewayStopProducerOutput';
import GatewayUpdateTmpUsers from '../model/GatewayUpdateTmpUsers';
import GetAuthMethod from '../model/GetAuthMethod';
import GetDynamicSecretValue from '../model/GetDynamicSecretValue';
import GetProducersListReplyObj from '../model/GetProducersListReplyObj';
import GetRSAPublic from '../model/GetRSAPublic';
import GetRSAPublicOutput from '../model/GetRSAPublicOutput';
import GetRole from '../model/GetRole';
import GetSSHCertificate from '../model/GetSSHCertificate';
import GetSSHCertificateOutput from '../model/GetSSHCertificateOutput';
import GetSecretValue from '../model/GetSecretValue';
import GetSubAdminsListReplyObj from '../model/GetSubAdminsListReplyObj';
import GetTarget from '../model/GetTarget';
import GetTargetDetails from '../model/GetTargetDetails';
import GetTargetDetailsOutput from '../model/GetTargetDetailsOutput';
import Item from '../model/Item';
import JSONError from '../model/JSONError';
import ListAuthMethods from '../model/ListAuthMethods';
import ListAuthMethodsOutput from '../model/ListAuthMethodsOutput';
import ListItems from '../model/ListItems';
import ListItemsInPathOutput from '../model/ListItemsInPathOutput';
import ListRoles from '../model/ListRoles';
import ListRolesOutput from '../model/ListRolesOutput';
import ListTargets from '../model/ListTargets';
import ListTargetsOutput from '../model/ListTargetsOutput';
import MoveObjects from '../model/MoveObjects';
import RawCreds from '../model/RawCreds';
import RefreshKey from '../model/RefreshKey';
import RefreshKeyOutput from '../model/RefreshKeyOutput';
import ReverseRBAC from '../model/ReverseRBAC';
import ReverseRBACOutput from '../model/ReverseRBACOutput';
import Role from '../model/Role';
import RollbackSecret from '../model/RollbackSecret';
import RollbackSecretOutput from '../model/RollbackSecretOutput';
import RotateKey from '../model/RotateKey';
import RotateKeyOutput from '../model/RotateKeyOutput';
import SetItemState from '../model/SetItemState';
import SetRoleRule from '../model/SetRoleRule';
import SignPKCS1 from '../model/SignPKCS1';
import SignPKCS1Output from '../model/SignPKCS1Output';
import StaticCredsAuth from '../model/StaticCredsAuth';
import StaticCredsAuthOutput from '../model/StaticCredsAuthOutput';
import SystemAccessCredentialsReplyObj from '../model/SystemAccessCredentialsReplyObj';
import Target from '../model/Target';
import TmpUserData from '../model/TmpUserData';
import UidCreateChildToken from '../model/UidCreateChildToken';
import UidCreateChildTokenOutput from '../model/UidCreateChildTokenOutput';
import UidGenerateToken from '../model/UidGenerateToken';
import UidGenerateTokenOutput from '../model/UidGenerateTokenOutput';
import UidListChildren from '../model/UidListChildren';
import UidRevokeToken from '../model/UidRevokeToken';
import UidRotateToken from '../model/UidRotateToken';
import UidRotateTokenOutput from '../model/UidRotateTokenOutput';
import UniversalIdentityDetails from '../model/UniversalIdentityDetails';
import UpdateAWSTargetDetails from '../model/UpdateAWSTargetDetails';
import UpdateDBTargetDetails from '../model/UpdateDBTargetDetails';
import UpdateItem from '../model/UpdateItem';
import UpdateItemOutput from '../model/UpdateItemOutput';
import UpdateRDPTargetDetails from '../model/UpdateRDPTargetDetails';
import UpdateRabbitMQTargetDetails from '../model/UpdateRabbitMQTargetDetails';
import UpdateRole from '../model/UpdateRole';
import UpdateRoleOutput from '../model/UpdateRoleOutput';
import UpdateSSHTargetDetails from '../model/UpdateSSHTargetDetails';
import UpdateSecretVal from '../model/UpdateSecretVal';
import UpdateSecretValOutput from '../model/UpdateSecretValOutput';
import UpdateTarget from '../model/UpdateTarget';
import UpdateTargetOutput from '../model/UpdateTargetOutput';
import UpdateWebTargetDetails from '../model/UpdateWebTargetDetails';
import UploadRSA from '../model/UploadRSA';
import VerifyPKCS1 from '../model/VerifyPKCS1';

/**
* V2 service.
* @module api/V2Api
* @version 2.0
*/
export default class V2Api {

    /**
    * Constructs a new V2Api. 
    * @alias module:api/V2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the assocRoleAuthMethod operation.
     * @callback module:api/V2Api~assocRoleAuthMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRoleAuthMethodAssocOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AssocRoleAuthMethod} body 
     * @param {module:api/V2Api~assocRoleAuthMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRoleAuthMethodAssocOutput}
     */
    assocRoleAuthMethod(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling assocRoleAuthMethod");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRoleAuthMethodAssocOutput;
      return this.apiClient.callApi(
        '/assoc-role-am', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assocTargetItem operation.
     * @callback module:api/V2Api~assocTargetItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTargetItemAssocOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AssocTargetItem} body 
     * @param {module:api/V2Api~assocTargetItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTargetItemAssocOutput}
     */
    assocTargetItem(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling assocTargetItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTargetItemAssocOutput;
      return this.apiClient.callApi(
        '/assoc-target-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the auth operation.
     * @callback module:api/V2Api~authCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Auth} body 
     * @param {module:api/V2Api~authCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthOutput}
     */
    auth(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling auth");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthOutput;
      return this.apiClient.callApi(
        '/auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configure operation.
     * @callback module:api/V2Api~configureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigureOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Configure} body 
     * @param {module:api/V2Api~configureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigureOutput}
     */
    configure(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling configure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigureOutput;
      return this.apiClient.callApi(
        '/configure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethod operation.
     * @callback module:api/V2Api~createAuthMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthMethodOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateAuthMethod} body 
     * @param {module:api/V2Api~createAuthMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthMethodOutput}
     */
    createAuthMethod(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethod");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodOutput;
      return this.apiClient.callApi(
        '/create-auth-method', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethodAWSIAM operation.
     * @callback module:api/V2Api~createAuthMethodAWSIAMCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthMethodAWSIAMOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateAuthMethodAWSIAM} body 
     * @param {module:api/V2Api~createAuthMethodAWSIAMCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthMethodAWSIAMOutput}
     */
    createAuthMethodAWSIAM(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodAWSIAM");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodAWSIAMOutput;
      return this.apiClient.callApi(
        '/create-auth-method-aws-iam', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethodAzureAD operation.
     * @callback module:api/V2Api~createAuthMethodAzureADCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthMethodAzureADOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateAuthMethodAzureAD} body 
     * @param {module:api/V2Api~createAuthMethodAzureADCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthMethodAzureADOutput}
     */
    createAuthMethodAzureAD(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodAzureAD");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodAzureADOutput;
      return this.apiClient.callApi(
        '/create-auth-method-azure-ad', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethodGCP operation.
     * @callback module:api/V2Api~createAuthMethodGCPCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthMethodGCPOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateAuthMethodGCP} body 
     * @param {module:api/V2Api~createAuthMethodGCPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthMethodGCPOutput}
     */
    createAuthMethodGCP(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodGCP");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodGCPOutput;
      return this.apiClient.callApi(
        '/create-auth-method-gcp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethodHuawei operation.
     * @callback module:api/V2Api~createAuthMethodHuaweiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthMethodHuaweiOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateAuthMethodHuawei} body 
     * @param {module:api/V2Api~createAuthMethodHuaweiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthMethodHuaweiOutput}
     */
    createAuthMethodHuawei(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodHuawei");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodHuaweiOutput;
      return this.apiClient.callApi(
        '/create-auth-method-huawei', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethodOAuth2 operation.
     * @callback module:api/V2Api~createAuthMethodOAuth2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthMethodOAuth2Output} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateAuthMethodOAuth2} body 
     * @param {module:api/V2Api~createAuthMethodOAuth2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthMethodOAuth2Output}
     */
    createAuthMethodOAuth2(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodOAuth2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodOAuth2Output;
      return this.apiClient.callApi(
        '/create-auth-method-oauth2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethodSAML operation.
     * @callback module:api/V2Api~createAuthMethodSAMLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthMethodSAMLOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateAuthMethodSAML} body 
     * @param {module:api/V2Api~createAuthMethodSAMLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthMethodSAMLOutput}
     */
    createAuthMethodSAML(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodSAML");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodSAMLOutput;
      return this.apiClient.callApi(
        '/create-auth-method-saml', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthMethodUniversalIdentity operation.
     * @callback module:api/V2Api~createAuthMethodUniversalIdentityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthMethodUniversalIdentityOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateAuthMethodUniversalIdentity} body 
     * @param {module:api/V2Api~createAuthMethodUniversalIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthMethodUniversalIdentityOutput}
     */
    createAuthMethodUniversalIdentity(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodUniversalIdentity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodUniversalIdentityOutput;
      return this.apiClient.callApi(
        '/create-auth-method-universal-identity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAwsTarget operation.
     * @callback module:api/V2Api~createAwsTargetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateAwsTarget} body 
     * @param {module:api/V2Api~createAwsTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createAwsTarget(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAwsTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/create-aws-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDBTarget operation.
     * @callback module:api/V2Api~createDBTargetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateDBTarget} body 
     * @param {module:api/V2Api~createDBTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createDBTarget(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDBTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/create-db-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDynamicSecret operation.
     * @callback module:api/V2Api~createDynamicSecretCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateDynamicSecret} body 
     * @param {module:api/V2Api~createDynamicSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createDynamicSecret(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDynamicSecret");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/create-dynamic-secret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createKey operation.
     * @callback module:api/V2Api~createKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateKeyOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateKey} body 
     * @param {module:api/V2Api~createKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateKeyOutput}
     */
    createKey(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateKeyOutput;
      return this.apiClient.callApi(
        '/create-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPKICertIssuer operation.
     * @callback module:api/V2Api~createPKICertIssuerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePKICertIssuerOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreatePKICertIssuer} body 
     * @param {module:api/V2Api~createPKICertIssuerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePKICertIssuerOutput}
     */
    createPKICertIssuer(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPKICertIssuer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePKICertIssuerOutput;
      return this.apiClient.callApi(
        '/create-pki-cert-issuer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRabbitMQTarget operation.
     * @callback module:api/V2Api~createRabbitMQTargetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateRabbitMQTarget} body 
     * @param {module:api/V2Api~createRabbitMQTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createRabbitMQTarget(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRabbitMQTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/create-rabbitMQ-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRdpTarget operation.
     * @callback module:api/V2Api~createRdpTargetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateRdpTarget} body 
     * @param {module:api/V2Api~createRdpTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createRdpTarget(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRdpTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/create-rdp-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRole operation.
     * @callback module:api/V2Api~createRoleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateRole} body 
     * @param {module:api/V2Api~createRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createRole(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/create-role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSSHCertIssuer operation.
     * @callback module:api/V2Api~createSSHCertIssuerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSSHCertIssuerOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateSSHCertIssuer} body 
     * @param {module:api/V2Api~createSSHCertIssuerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSSHCertIssuerOutput}
     */
    createSSHCertIssuer(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSSHCertIssuer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSSHCertIssuerOutput;
      return this.apiClient.callApi(
        '/create-ssh-cert-issuer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSSHTarget operation.
     * @callback module:api/V2Api~createSSHTargetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateSSHTarget} body 
     * @param {module:api/V2Api~createSSHTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createSSHTarget(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSSHTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/create-ssh-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSecret operation.
     * @callback module:api/V2Api~createSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSecretOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateSecret} body 
     * @param {module:api/V2Api~createSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSecretOutput}
     */
    createSecret(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSecret");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSecretOutput;
      return this.apiClient.callApi(
        '/create-secret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTarget operation.
     * @callback module:api/V2Api~createTargetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} body 
     * @param {module:api/V2Api~createTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createTarget(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/create-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWebTarget operation.
     * @callback module:api/V2Api~createWebTargetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateWebTarget} body 
     * @param {module:api/V2Api~createWebTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createWebTarget(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createWebTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/create-web-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the decrypt operation.
     * @callback module:api/V2Api~decryptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DecryptOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Decrypt} body 
     * @param {module:api/V2Api~decryptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DecryptOutput}
     */
    decrypt(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling decrypt");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DecryptOutput;
      return this.apiClient.callApi(
        '/decrypt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the decryptPKCS1 operation.
     * @callback module:api/V2Api~decryptPKCS1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DecryptPKCS1Output} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DecryptPKCS1} body 
     * @param {module:api/V2Api~decryptPKCS1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DecryptPKCS1Output}
     */
    decryptPKCS1(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling decryptPKCS1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DecryptPKCS1Output;
      return this.apiClient.callApi(
        '/decrypt-pkcs1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthMethod operation.
     * @callback module:api/V2Api~deleteAuthMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAuthMethodOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DeleteAuthMethod} body 
     * @param {module:api/V2Api~deleteAuthMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAuthMethodOutput}
     */
    deleteAuthMethod(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteAuthMethod");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAuthMethodOutput;
      return this.apiClient.callApi(
        '/delete-auth-method', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthMethods operation.
     * @callback module:api/V2Api~deleteAuthMethodsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAuthMethodsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DeleteAuthMethods} body 
     * @param {module:api/V2Api~deleteAuthMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAuthMethodsOutput}
     */
    deleteAuthMethods(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteAuthMethods");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAuthMethodsOutput;
      return this.apiClient.callApi(
        '/delete-auth-methods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteItem operation.
     * @callback module:api/V2Api~deleteItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteItemOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DeleteItem} body 
     * @param {module:api/V2Api~deleteItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteItemOutput}
     */
    deleteItem(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteItemOutput;
      return this.apiClient.callApi(
        '/delete-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteItems operation.
     * @callback module:api/V2Api~deleteItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteItemsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DeleteItems} body 
     * @param {module:api/V2Api~deleteItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteItemsOutput}
     */
    deleteItems(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteItems");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteItemsOutput;
      return this.apiClient.callApi(
        '/delete-items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRole operation.
     * @callback module:api/V2Api~deleteRoleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DeleteRole} body 
     * @param {module:api/V2Api~deleteRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteRole(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRoleAssociation operation.
     * @callback module:api/V2Api~deleteRoleAssociationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DeleteRoleAssociation} body 
     * @param {module:api/V2Api~deleteRoleAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteRoleAssociation(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteRoleAssociation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-assoc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRoleRule operation.
     * @callback module:api/V2Api~deleteRoleRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteRoleRuleOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DeleteRoleRule} body 
     * @param {module:api/V2Api~deleteRoleRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteRoleRuleOutput}
     */
    deleteRoleRule(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteRoleRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteRoleRuleOutput;
      return this.apiClient.callApi(
        '/delete-role-rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRoles operation.
     * @callback module:api/V2Api~deleteRolesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DeleteRoles} body 
     * @param {module:api/V2Api~deleteRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteRoles(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteRoles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTarget operation.
     * @callback module:api/V2Api~deleteTargetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DeleteTarget} body 
     * @param {module:api/V2Api~deleteTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteTarget(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTargetAssociation operation.
     * @callback module:api/V2Api~deleteTargetAssociationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DeleteTargetAssociation} body 
     * @param {module:api/V2Api~deleteTargetAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteTargetAssociation(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteTargetAssociation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-assoc-target-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTargets operation.
     * @callback module:api/V2Api~deleteTargetsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DeleteTargets} body 
     * @param {module:api/V2Api~deleteTargetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteTargets(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteTargets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-targets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeItem operation.
     * @callback module:api/V2Api~describeItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Item} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DescribeItem} body 
     * @param {module:api/V2Api~describeItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Item}
     */
    describeItem(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling describeItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Item;
      return this.apiClient.callApi(
        '/describe-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the encrypt operation.
     * @callback module:api/V2Api~encryptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EncryptOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Encrypt} body 
     * @param {module:api/V2Api~encryptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EncryptOutput}
     */
    encrypt(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling encrypt");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EncryptOutput;
      return this.apiClient.callApi(
        '/encrypt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the encryptPKCS1 operation.
     * @callback module:api/V2Api~encryptPKCS1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/EncryptPKCS1Output} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/EncryptPKCS1} body 
     * @param {module:api/V2Api~encryptPKCS1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EncryptPKCS1Output}
     */
    encryptPKCS1(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling encryptPKCS1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EncryptPKCS1Output;
      return this.apiClient.callApi(
        '/encrypt-pkcs1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayAddSubAdmins operation.
     * @callback module:api/V2Api~gatewayAddSubAdminsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayAddSubAdminsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayAddSubAdmins} body 
     * @param {module:api/V2Api~gatewayAddSubAdminsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayAddSubAdminsOutput}
     */
    gatewayAddSubAdmins(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayAddSubAdmins");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayAddSubAdminsOutput;
      return this.apiClient.callApi(
        '/gateway-add-sub-admins', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayCreateProducerArtifactory operation.
     * @callback module:api/V2Api~gatewayCreateProducerArtifactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayCreateProducerArtifactoryOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayCreateProducerArtifactory} body 
     * @param {module:api/V2Api~gatewayCreateProducerArtifactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayCreateProducerArtifactoryOutput}
     */
    gatewayCreateProducerArtifactory(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerArtifactory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerArtifactoryOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-artifactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayCreateProducerAws operation.
     * @callback module:api/V2Api~gatewayCreateProducerAwsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayCreateProducerAwsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayCreateProducerAws} body 
     * @param {module:api/V2Api~gatewayCreateProducerAwsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayCreateProducerAwsOutput}
     */
    gatewayCreateProducerAws(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerAws");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerAwsOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-aws', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayCreateProducerAzure operation.
     * @callback module:api/V2Api~gatewayCreateProducerAzureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayCreateProducerAzureOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayCreateProducerAzure} body 
     * @param {module:api/V2Api~gatewayCreateProducerAzureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayCreateProducerAzureOutput}
     */
    gatewayCreateProducerAzure(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerAzure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerAzureOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-azure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayCreateProducerEks operation.
     * @callback module:api/V2Api~gatewayCreateProducerEksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayCreateProducerEksOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayCreateProducerEks} body 
     * @param {module:api/V2Api~gatewayCreateProducerEksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayCreateProducerEksOutput}
     */
    gatewayCreateProducerEks(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerEks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerEksOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-eks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayCreateProducerGke operation.
     * @callback module:api/V2Api~gatewayCreateProducerGkeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayCreateProducerGkeOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayCreateProducerGke} body 
     * @param {module:api/V2Api~gatewayCreateProducerGkeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayCreateProducerGkeOutput}
     */
    gatewayCreateProducerGke(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerGke");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerGkeOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-gke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayCreateProducerMSSQL operation.
     * @callback module:api/V2Api~gatewayCreateProducerMSSQLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayCreateProducerMSSQLOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayCreateProducerMSSQL} body 
     * @param {module:api/V2Api~gatewayCreateProducerMSSQLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayCreateProducerMSSQLOutput}
     */
    gatewayCreateProducerMSSQL(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerMSSQL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerMSSQLOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-mssql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayCreateProducerMongo operation.
     * @callback module:api/V2Api~gatewayCreateProducerMongoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayCreateProducerMongoOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayCreateProducerMongo} body 
     * @param {module:api/V2Api~gatewayCreateProducerMongoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayCreateProducerMongoOutput}
     */
    gatewayCreateProducerMongo(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerMongo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerMongoOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-mongo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayCreateProducerMySQL operation.
     * @callback module:api/V2Api~gatewayCreateProducerMySQLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayCreateProducerMySQLOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayCreateProducerMySQL} body 
     * @param {module:api/V2Api~gatewayCreateProducerMySQLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayCreateProducerMySQLOutput}
     */
    gatewayCreateProducerMySQL(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerMySQL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerMySQLOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-mysql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayCreateProducerPostgreSQL operation.
     * @callback module:api/V2Api~gatewayCreateProducerPostgreSQLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayCreateProducerPostgreSQLOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayCreateProducerPostgreSQL} body 
     * @param {module:api/V2Api~gatewayCreateProducerPostgreSQLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayCreateProducerPostgreSQLOutput}
     */
    gatewayCreateProducerPostgreSQL(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerPostgreSQL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerPostgreSQLOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-postgresql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayCreateProducerRabbitMQ operation.
     * @callback module:api/V2Api~gatewayCreateProducerRabbitMQCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayCreateProducerRabbitMQOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayCreateProducerRabbitMQ} body 
     * @param {module:api/V2Api~gatewayCreateProducerRabbitMQCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayCreateProducerRabbitMQOutput}
     */
    gatewayCreateProducerRabbitMQ(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerRabbitMQ");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerRabbitMQOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-rabbitmq', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayCreateProducerRdp operation.
     * @callback module:api/V2Api~gatewayCreateProducerRdpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayCreateProducerRdpOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayCreateProducerRdp} body 
     * @param {module:api/V2Api~gatewayCreateProducerRdpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayCreateProducerRdpOutput}
     */
    gatewayCreateProducerRdp(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerRdp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerRdpOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-rdp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayCreateProducerVenafi operation.
     * @callback module:api/V2Api~gatewayCreateProducerVenafiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayCreateProducerAwsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayCreateProducerAws} body 
     * @param {module:api/V2Api~gatewayCreateProducerVenafiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayCreateProducerAwsOutput}
     */
    gatewayCreateProducerVenafi(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerVenafi");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerAwsOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-venafi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayDeleteProducer operation.
     * @callback module:api/V2Api~gatewayDeleteProducerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayDeleteProducerOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayDeleteProducer} body 
     * @param {module:api/V2Api~gatewayDeleteProducerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayDeleteProducerOutput}
     */
    gatewayDeleteProducer(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayDeleteProducer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayDeleteProducerOutput;
      return this.apiClient.callApi(
        '/gateway-delete-producer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayDeleteSubAdmins operation.
     * @callback module:api/V2Api~gatewayDeleteSubAdminsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayDeleteSubAdminsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayDeleteSubAdmins} body 
     * @param {module:api/V2Api~gatewayDeleteSubAdminsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayDeleteSubAdminsOutput}
     */
    gatewayDeleteSubAdmins(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayDeleteSubAdmins");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayDeleteSubAdminsOutput;
      return this.apiClient.callApi(
        '/gateway-delete-sub-admins', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayGetConfig operation.
     * @callback module:api/V2Api~gatewayGetConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AkeylessGatewayConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayGetConfig} body 
     * @param {module:api/V2Api~gatewayGetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AkeylessGatewayConfig}
     */
    gatewayGetConfig(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayGetConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AkeylessGatewayConfig;
      return this.apiClient.callApi(
        '/gateway-get-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayGetProducer operation.
     * @callback module:api/V2Api~gatewayGetProducerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DSProducerDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayGetProducer} body 
     * @param {module:api/V2Api~gatewayGetProducerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DSProducerDetails}
     */
    gatewayGetProducer(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayGetProducer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DSProducerDetails;
      return this.apiClient.callApi(
        '/gateway-get-producer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayGetTmpUsers operation.
     * @callback module:api/V2Api~gatewayGetTmpUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TmpUserData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayGetTmpUsers} body 
     * @param {module:api/V2Api~gatewayGetTmpUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TmpUserData>}
     */
    gatewayGetTmpUsers(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayGetTmpUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TmpUserData];
      return this.apiClient.callApi(
        '/gateway-get-producer-tmp-creds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayListProducers operation.
     * @callback module:api/V2Api~gatewayListProducersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProducersListReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayListProducers} body 
     * @param {module:api/V2Api~gatewayListProducersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProducersListReplyObj}
     */
    gatewayListProducers(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayListProducers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetProducersListReplyObj;
      return this.apiClient.callApi(
        '/gateway-list-producers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayListSubAdmins operation.
     * @callback module:api/V2Api~gatewayListSubAdminsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSubAdminsListReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayListSubAdmins} body 
     * @param {module:api/V2Api~gatewayListSubAdminsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSubAdminsListReplyObj}
     */
    gatewayListSubAdmins(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayListSubAdmins");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSubAdminsListReplyObj;
      return this.apiClient.callApi(
        '/gateway-list-SubAdmins', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayRevokeTmpUsers operation.
     * @callback module:api/V2Api~gatewayRevokeTmpUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayRevokeTmpUsers} body 
     * @param {module:api/V2Api~gatewayRevokeTmpUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gatewayRevokeTmpUsers(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayRevokeTmpUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/gateway-revoke-producer-tmp-creds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayStartProducer operation.
     * @callback module:api/V2Api~gatewayStartProducerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayStartProducerOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayStartProducer} body 
     * @param {module:api/V2Api~gatewayStartProducerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayStartProducerOutput}
     */
    gatewayStartProducer(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayStartProducer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayStartProducerOutput;
      return this.apiClient.callApi(
        '/gateway-start-producer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayStopProducer operation.
     * @callback module:api/V2Api~gatewayStopProducerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayStopProducerOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayStopProducer} body 
     * @param {module:api/V2Api~gatewayStopProducerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayStopProducerOutput}
     */
    gatewayStopProducer(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayStopProducer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayStopProducerOutput;
      return this.apiClient.callApi(
        '/gateway-stop-producer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewayUpdateTmpUsers operation.
     * @callback module:api/V2Api~gatewayUpdateTmpUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GatewayUpdateTmpUsers} body 
     * @param {module:api/V2Api~gatewayUpdateTmpUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gatewayUpdateTmpUsers(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateTmpUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/gateway-update-producer-tmp-creds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountLogo operation.
     * @callback module:api/V2Api~getAccountLogoCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/V2Api~getAccountLogoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getAccountLogo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/get-account-logo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthMethod operation.
     * @callback module:api/V2Api~getAuthMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthMethod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GetAuthMethod} body 
     * @param {module:api/V2Api~getAuthMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthMethod}
     */
    getAuthMethod(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getAuthMethod");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethod;
      return this.apiClient.callApi(
        '/get-auth-method', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDynamicSecretValue operation.
     * @callback module:api/V2Api~getDynamicSecretValueCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GetDynamicSecretValue} body 
     * @param {module:api/V2Api~getDynamicSecretValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getDynamicSecretValue(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getDynamicSecretValue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/get-dynamic-secret-value', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRSAPublic operation.
     * @callback module:api/V2Api~getRSAPublicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRSAPublicOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GetRSAPublic} body 
     * @param {module:api/V2Api~getRSAPublicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRSAPublicOutput}
     */
    getRSAPublic(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getRSAPublic");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetRSAPublicOutput;
      return this.apiClient.callApi(
        '/get-rsa-public', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRole operation.
     * @callback module:api/V2Api~getRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GetRole} body 
     * @param {module:api/V2Api~getRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    getRole(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/get-role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSSHCertificate operation.
     * @callback module:api/V2Api~getSSHCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSSHCertificateOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GetSSHCertificate} body 
     * @param {module:api/V2Api~getSSHCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSSHCertificateOutput}
     */
    getSSHCertificate(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getSSHCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSSHCertificateOutput;
      return this.apiClient.callApi(
        '/get-ssh-certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecretValue operation.
     * @callback module:api/V2Api~getSecretValueCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GetSecretValue} body 
     * @param {module:api/V2Api~getSecretValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getSecretValue(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getSecretValue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/get-secret-value', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTarget operation.
     * @callback module:api/V2Api~getTargetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Target} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GetTarget} body 
     * @param {module:api/V2Api~getTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Target}
     */
    getTarget(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Target;
      return this.apiClient.callApi(
        '/get-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTargetDetails operation.
     * @callback module:api/V2Api~getTargetDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTargetDetailsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GetTargetDetails} body 
     * @param {module:api/V2Api~getTargetDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTargetDetailsOutput}
     */
    getTargetDetails(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTargetDetailsOutput;
      return this.apiClient.callApi(
        '/get-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAuthMethods operation.
     * @callback module:api/V2Api~listAuthMethodsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAuthMethodsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ListAuthMethods} body 
     * @param {module:api/V2Api~listAuthMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAuthMethodsOutput}
     */
    listAuthMethods(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listAuthMethods");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAuthMethodsOutput;
      return this.apiClient.callApi(
        '/list-auth-methods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listItems operation.
     * @callback module:api/V2Api~listItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListItemsInPathOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ListItems} body 
     * @param {module:api/V2Api~listItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListItemsInPathOutput}
     */
    listItems(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listItems");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListItemsInPathOutput;
      return this.apiClient.callApi(
        '/list-items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRoles operation.
     * @callback module:api/V2Api~listRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRolesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ListRoles} body 
     * @param {module:api/V2Api~listRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRolesOutput}
     */
    listRoles(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listRoles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListRolesOutput;
      return this.apiClient.callApi(
        '/list-roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTargets operation.
     * @callback module:api/V2Api~listTargetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTargetsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ListTargets} body 
     * @param {module:api/V2Api~listTargetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTargetsOutput}
     */
    listTargets(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listTargets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTargetsOutput;
      return this.apiClient.callApi(
        '/list-targets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveObjects operation.
     * @callback module:api/V2Api~moveObjectsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/MoveObjects} body 
     * @param {module:api/V2Api~moveObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    moveObjects(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling moveObjects");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/move-objects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rawCreds operation.
     * @callback module:api/V2Api~rawCredsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SystemAccessCredentialsReplyObj} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/RawCreds} opts.body 
     * @param {module:api/V2Api~rawCredsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SystemAccessCredentialsReplyObj}
     */
    rawCreds(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SystemAccessCredentialsReplyObj;
      return this.apiClient.callApi(
        '/raw-creds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshKey operation.
     * @callback module:api/V2Api~refreshKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefreshKeyOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RefreshKey} body 
     * @param {module:api/V2Api~refreshKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefreshKeyOutput}
     */
    refreshKey(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling refreshKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RefreshKeyOutput;
      return this.apiClient.callApi(
        '/refresh-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reverseRBAC operation.
     * @callback module:api/V2Api~reverseRBACCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReverseRBACOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ReverseRBAC} body 
     * @param {module:api/V2Api~reverseRBACCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReverseRBACOutput}
     */
    reverseRBAC(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling reverseRBAC");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReverseRBACOutput;
      return this.apiClient.callApi(
        '/reverse-rbac', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rollbackSecret operation.
     * @callback module:api/V2Api~rollbackSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RollbackSecretOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RollbackSecret} body 
     * @param {module:api/V2Api~rollbackSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RollbackSecretOutput}
     */
    rollbackSecret(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling rollbackSecret");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RollbackSecretOutput;
      return this.apiClient.callApi(
        '/rollback-secret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rotateKey operation.
     * @callback module:api/V2Api~rotateKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RotateKeyOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RotateKey} body 
     * @param {module:api/V2Api~rotateKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RotateKeyOutput}
     */
    rotateKey(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling rotateKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotateKeyOutput;
      return this.apiClient.callApi(
        '/rotate-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setItemState operation.
     * @callback module:api/V2Api~setItemStateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SetItemState} body 
     * @param {module:api/V2Api~setItemStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setItemState(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setItemState");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/set-item-state', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setRoleRule operation.
     * @callback module:api/V2Api~setRoleRuleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SetRoleRule} body 
     * @param {module:api/V2Api~setRoleRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setRoleRule(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setRoleRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/set-role-rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signPKCS1 operation.
     * @callback module:api/V2Api~signPKCS1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SignPKCS1Output} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SignPKCS1} body 
     * @param {module:api/V2Api~signPKCS1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignPKCS1Output}
     */
    signPKCS1(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling signPKCS1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignPKCS1Output;
      return this.apiClient.callApi(
        '/sign-pkcs1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the staticCredsAuth operation.
     * @callback module:api/V2Api~staticCredsAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StaticCredsAuthOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/StaticCredsAuth} body 
     * @param {module:api/V2Api~staticCredsAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StaticCredsAuthOutput}
     */
    staticCredsAuth(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling staticCredsAuth");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StaticCredsAuthOutput;
      return this.apiClient.callApi(
        '/static-creds-auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uidCreateChildToken operation.
     * @callback module:api/V2Api~uidCreateChildTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UidCreateChildTokenOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UidCreateChildToken} body 
     * @param {module:api/V2Api~uidCreateChildTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UidCreateChildTokenOutput}
     */
    uidCreateChildToken(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uidCreateChildToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UidCreateChildTokenOutput;
      return this.apiClient.callApi(
        '/uid-create-child-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uidGenerateToken operation.
     * @callback module:api/V2Api~uidGenerateTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UidGenerateTokenOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UidGenerateToken} body 
     * @param {module:api/V2Api~uidGenerateTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UidGenerateTokenOutput}
     */
    uidGenerateToken(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uidGenerateToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UidGenerateTokenOutput;
      return this.apiClient.callApi(
        '/uid-generate-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uidListChildren operation.
     * @callback module:api/V2Api~uidListChildrenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UniversalIdentityDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UidListChildren} body 
     * @param {module:api/V2Api~uidListChildrenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UniversalIdentityDetails}
     */
    uidListChildren(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uidListChildren");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UniversalIdentityDetails;
      return this.apiClient.callApi(
        '/uid-list-children', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uidRevokeToken operation.
     * @callback module:api/V2Api~uidRevokeTokenCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UidRevokeToken} body 
     * @param {module:api/V2Api~uidRevokeTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    uidRevokeToken(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uidRevokeToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/uid-revoke-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uidRotateToken operation.
     * @callback module:api/V2Api~uidRotateTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UidRotateTokenOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UidRotateToken} body 
     * @param {module:api/V2Api~uidRotateTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UidRotateTokenOutput}
     */
    uidRotateToken(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uidRotateToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UidRotateTokenOutput;
      return this.apiClient.callApi(
        '/uid-rotate-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAWSTargetDetails operation.
     * @callback module:api/V2Api~updateAWSTargetDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTargetOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UpdateAWSTargetDetails} body 
     * @param {module:api/V2Api~updateAWSTargetDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTargetOutput}
     */
    updateAWSTargetDetails(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAWSTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-aws-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDBTargetDetails operation.
     * @callback module:api/V2Api~updateDBTargetDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTargetOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UpdateDBTargetDetails} body 
     * @param {module:api/V2Api~updateDBTargetDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTargetOutput}
     */
    updateDBTargetDetails(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDBTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-db-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateItem operation.
     * @callback module:api/V2Api~updateItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateItemOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UpdateItem} body 
     * @param {module:api/V2Api~updateItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateItemOutput}
     */
    updateItem(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateItemOutput;
      return this.apiClient.callApi(
        '/update-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRDPTargetDetails operation.
     * @callback module:api/V2Api~updateRDPTargetDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTargetOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UpdateRDPTargetDetails} body 
     * @param {module:api/V2Api~updateRDPTargetDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTargetOutput}
     */
    updateRDPTargetDetails(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRDPTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-rdp-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRabbitMQTargetDetails operation.
     * @callback module:api/V2Api~updateRabbitMQTargetDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTargetOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UpdateRabbitMQTargetDetails} body 
     * @param {module:api/V2Api~updateRabbitMQTargetDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTargetOutput}
     */
    updateRabbitMQTargetDetails(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRabbitMQTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-rabbitmq-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRole operation.
     * @callback module:api/V2Api~updateRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateRoleOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UpdateRole} body 
     * @param {module:api/V2Api~updateRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateRoleOutput}
     */
    updateRole(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRoleOutput;
      return this.apiClient.callApi(
        '/update-role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSSHTargetDetails operation.
     * @callback module:api/V2Api~updateSSHTargetDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTargetOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UpdateSSHTargetDetails} body 
     * @param {module:api/V2Api~updateSSHTargetDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTargetOutput}
     */
    updateSSHTargetDetails(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSSHTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-ssh-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSecretVal operation.
     * @callback module:api/V2Api~updateSecretValCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSecretValOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UpdateSecretVal} body 
     * @param {module:api/V2Api~updateSecretValCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSecretValOutput}
     */
    updateSecretVal(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSecretVal");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSecretValOutput;
      return this.apiClient.callApi(
        '/update-secret-val', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTarget operation.
     * @callback module:api/V2Api~updateTargetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTargetOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UpdateTarget} body 
     * @param {module:api/V2Api~updateTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTargetOutput}
     */
    updateTarget(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTargetDetails operation.
     * @callback module:api/V2Api~updateTargetDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTargetOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} body 
     * @param {module:api/V2Api~updateTargetDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTargetOutput}
     */
    updateTargetDetails(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWebTargetDetails operation.
     * @callback module:api/V2Api~updateWebTargetDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTargetOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UpdateWebTargetDetails} body 
     * @param {module:api/V2Api~updateWebTargetDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTargetOutput}
     */
    updateWebTargetDetails(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateWebTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-web-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadRSA operation.
     * @callback module:api/V2Api~uploadRSACallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UploadRSA} body 
     * @param {module:api/V2Api~uploadRSACallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    uploadRSA(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uploadRSA");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/upload-rsa', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyPKCS1 operation.
     * @callback module:api/V2Api~verifyPKCS1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/VerifyPKCS1} body 
     * @param {module:api/V2Api~verifyPKCS1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    verifyPKCS1(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling verifyPKCS1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/verify-pkcs1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
