/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AkeylessGatewayConfig from '../model/AkeylessGatewayConfig';
import AssocRoleAuthMethod from '../model/AssocRoleAuthMethod';
import AssocTargetItem from '../model/AssocTargetItem';
import Auth from '../model/Auth';
import AuthMethod from '../model/AuthMethod';
import AuthOutput from '../model/AuthOutput';
import BastionsList from '../model/BastionsList';
import Configure from '../model/Configure';
import ConfigureOutput from '../model/ConfigureOutput';
import Connect from '../model/Connect';
import CreateAWSTarget from '../model/CreateAWSTarget';
import CreateAWSTargetOutput from '../model/CreateAWSTargetOutput';
import CreateArtifactoryTarget from '../model/CreateArtifactoryTarget';
import CreateArtifactoryTargetOutput from '../model/CreateArtifactoryTargetOutput';
import CreateAuthMethod from '../model/CreateAuthMethod';
import CreateAuthMethodAWSIAM from '../model/CreateAuthMethodAWSIAM';
import CreateAuthMethodAWSIAMOutput from '../model/CreateAuthMethodAWSIAMOutput';
import CreateAuthMethodAzureAD from '../model/CreateAuthMethodAzureAD';
import CreateAuthMethodAzureADOutput from '../model/CreateAuthMethodAzureADOutput';
import CreateAuthMethodCert from '../model/CreateAuthMethodCert';
import CreateAuthMethodCertOutput from '../model/CreateAuthMethodCertOutput';
import CreateAuthMethodGCP from '../model/CreateAuthMethodGCP';
import CreateAuthMethodGCPOutput from '../model/CreateAuthMethodGCPOutput';
import CreateAuthMethodHuawei from '../model/CreateAuthMethodHuawei';
import CreateAuthMethodHuaweiOutput from '../model/CreateAuthMethodHuaweiOutput';
import CreateAuthMethodK8S from '../model/CreateAuthMethodK8S';
import CreateAuthMethodK8SOutput from '../model/CreateAuthMethodK8SOutput';
import CreateAuthMethodLDAP from '../model/CreateAuthMethodLDAP';
import CreateAuthMethodLDAPOutput from '../model/CreateAuthMethodLDAPOutput';
import CreateAuthMethodOAuth2 from '../model/CreateAuthMethodOAuth2';
import CreateAuthMethodOAuth2Output from '../model/CreateAuthMethodOAuth2Output';
import CreateAuthMethodOIDC from '../model/CreateAuthMethodOIDC';
import CreateAuthMethodOIDCOutput from '../model/CreateAuthMethodOIDCOutput';
import CreateAuthMethodOutput from '../model/CreateAuthMethodOutput';
import CreateAuthMethodSAML from '../model/CreateAuthMethodSAML';
import CreateAuthMethodSAMLOutput from '../model/CreateAuthMethodSAMLOutput';
import CreateAuthMethodUniversalIdentity from '../model/CreateAuthMethodUniversalIdentity';
import CreateAuthMethodUniversalIdentityOutput from '../model/CreateAuthMethodUniversalIdentityOutput';
import CreateAzureTarget from '../model/CreateAzureTarget';
import CreateAzureTargetOutput from '../model/CreateAzureTargetOutput';
import CreateCertificate from '../model/CreateCertificate';
import CreateCertificateOutput from '../model/CreateCertificateOutput';
import CreateClassicKey from '../model/CreateClassicKey';
import CreateClassicKeyOutput from '../model/CreateClassicKeyOutput';
import CreateDBTarget from '../model/CreateDBTarget';
import CreateDBTargetOutput from '../model/CreateDBTargetOutput';
import CreateDFCKey from '../model/CreateDFCKey';
import CreateDFCKeyOutput from '../model/CreateDFCKeyOutput';
import CreateDockerhubTarget from '../model/CreateDockerhubTarget';
import CreateDockerhubTargetOutput from '../model/CreateDockerhubTargetOutput';
import CreateDynamicSecret from '../model/CreateDynamicSecret';
import CreateEKSTarget from '../model/CreateEKSTarget';
import CreateEKSTargetOutput from '../model/CreateEKSTargetOutput';
import CreateEventForwarder from '../model/CreateEventForwarder';
import CreateEventForwarderOutput from '../model/CreateEventForwarderOutput';
import CreateGKETarget from '../model/CreateGKETarget';
import CreateGKETargetOutput from '../model/CreateGKETargetOutput';
import CreateGcpTarget from '../model/CreateGcpTarget';
import CreateGcpTargetOutput from '../model/CreateGcpTargetOutput';
import CreateGithubTarget from '../model/CreateGithubTarget';
import CreateGithubTargetOutput from '../model/CreateGithubTargetOutput';
import CreateKey from '../model/CreateKey';
import CreateKeyOutput from '../model/CreateKeyOutput';
import CreateLdapTarget from '../model/CreateLdapTarget';
import CreateLdapTargetOutput from '../model/CreateLdapTargetOutput';
import CreateLinkedTarget from '../model/CreateLinkedTarget';
import CreateLinkedTargetOutput from '../model/CreateLinkedTargetOutput';
import CreateNativeK8STarget from '../model/CreateNativeK8STarget';
import CreateNativeK8STargetOutput from '../model/CreateNativeK8STargetOutput';
import CreatePKICertIssuer from '../model/CreatePKICertIssuer';
import CreatePKICertIssuerOutput from '../model/CreatePKICertIssuerOutput';
import CreatePingTarget from '../model/CreatePingTarget';
import CreatePingTargetOutput from '../model/CreatePingTargetOutput';
import CreateRabbitMQTarget from '../model/CreateRabbitMQTarget';
import CreateRabbitMQTargetOutput from '../model/CreateRabbitMQTargetOutput';
import CreateRole from '../model/CreateRole';
import CreateRoleAuthMethodAssocOutput from '../model/CreateRoleAuthMethodAssocOutput';
import CreateRotatedSecret from '../model/CreateRotatedSecret';
import CreateRotatedSecretOutput from '../model/CreateRotatedSecretOutput';
import CreateSSHCertIssuer from '../model/CreateSSHCertIssuer';
import CreateSSHCertIssuerOutput from '../model/CreateSSHCertIssuerOutput';
import CreateSSHTarget from '../model/CreateSSHTarget';
import CreateSSHTargetOutput from '../model/CreateSSHTargetOutput';
import CreateSalesforceTarget from '../model/CreateSalesforceTarget';
import CreateSalesforceTargetOutput from '../model/CreateSalesforceTargetOutput';
import CreateSecret from '../model/CreateSecret';
import CreateSecretOutput from '../model/CreateSecretOutput';
import CreateTargetItemAssocOutput from '../model/CreateTargetItemAssocOutput';
import CreateTokenizer from '../model/CreateTokenizer';
import CreateTokenizerOutput from '../model/CreateTokenizerOutput';
import CreateWebTarget from '../model/CreateWebTarget';
import CreateWebTargetOutput from '../model/CreateWebTargetOutput';
import CreateWindowsTarget from '../model/CreateWindowsTarget';
import CreateWindowsTargetOutput from '../model/CreateWindowsTargetOutput';
import DSProducerDetails from '../model/DSProducerDetails';
import Decrypt from '../model/Decrypt';
import DecryptGPG from '../model/DecryptGPG';
import DecryptGPGOutput from '../model/DecryptGPGOutput';
import DecryptOutput from '../model/DecryptOutput';
import DecryptPKCS1 from '../model/DecryptPKCS1';
import DecryptPKCS1Output from '../model/DecryptPKCS1Output';
import DecryptWithClassicKey from '../model/DecryptWithClassicKey';
import DecryptWithClassicKeyOutput from '../model/DecryptWithClassicKeyOutput';
import DeleteAuthMethod from '../model/DeleteAuthMethod';
import DeleteAuthMethodOutput from '../model/DeleteAuthMethodOutput';
import DeleteAuthMethods from '../model/DeleteAuthMethods';
import DeleteAuthMethodsOutput from '../model/DeleteAuthMethodsOutput';
import DeleteEventForwarder from '../model/DeleteEventForwarder';
import DeleteItem from '../model/DeleteItem';
import DeleteItemOutput from '../model/DeleteItemOutput';
import DeleteItems from '../model/DeleteItems';
import DeleteItemsOutput from '../model/DeleteItemsOutput';
import DeleteRole from '../model/DeleteRole';
import DeleteRoleAssociation from '../model/DeleteRoleAssociation';
import DeleteRoleRule from '../model/DeleteRoleRule';
import DeleteRoleRuleOutput from '../model/DeleteRoleRuleOutput';
import DeleteRoles from '../model/DeleteRoles';
import DeleteTarget from '../model/DeleteTarget';
import DeleteTargetAssociation from '../model/DeleteTargetAssociation';
import DeleteTargets from '../model/DeleteTargets';
import DescribeItem from '../model/DescribeItem';
import DescribePermissions from '../model/DescribePermissions';
import DescribePermissionsOutput from '../model/DescribePermissionsOutput';
import DescribeSubClaims from '../model/DescribeSubClaims';
import DescribeSubClaimsOutput from '../model/DescribeSubClaimsOutput';
import Detokenize from '../model/Detokenize';
import DetokenizeOutput from '../model/DetokenizeOutput';
import Encrypt from '../model/Encrypt';
import EncryptGPG from '../model/EncryptGPG';
import EncryptGPGOutput from '../model/EncryptGPGOutput';
import EncryptOutput from '../model/EncryptOutput';
import EncryptWithClassicKey from '../model/EncryptWithClassicKey';
import ExportClassicKey from '../model/ExportClassicKey';
import ExportClassicKeyOutput from '../model/ExportClassicKeyOutput';
import GatewayCreateK8SAuthConfig from '../model/GatewayCreateK8SAuthConfig';
import GatewayCreateK8SAuthConfigOutput from '../model/GatewayCreateK8SAuthConfigOutput';
import GatewayCreateMigration from '../model/GatewayCreateMigration';
import GatewayCreateProducerArtifactory from '../model/GatewayCreateProducerArtifactory';
import GatewayCreateProducerArtifactoryOutput from '../model/GatewayCreateProducerArtifactoryOutput';
import GatewayCreateProducerAws from '../model/GatewayCreateProducerAws';
import GatewayCreateProducerAwsOutput from '../model/GatewayCreateProducerAwsOutput';
import GatewayCreateProducerAzure from '../model/GatewayCreateProducerAzure';
import GatewayCreateProducerAzureOutput from '../model/GatewayCreateProducerAzureOutput';
import GatewayCreateProducerCassandra from '../model/GatewayCreateProducerCassandra';
import GatewayCreateProducerCassandraOutput from '../model/GatewayCreateProducerCassandraOutput';
import GatewayCreateProducerCertificateAutomation from '../model/GatewayCreateProducerCertificateAutomation';
import GatewayCreateProducerCertificateAutomationOutput from '../model/GatewayCreateProducerCertificateAutomationOutput';
import GatewayCreateProducerCustom from '../model/GatewayCreateProducerCustom';
import GatewayCreateProducerCustomOutput from '../model/GatewayCreateProducerCustomOutput';
import GatewayCreateProducerDockerhub from '../model/GatewayCreateProducerDockerhub';
import GatewayCreateProducerDockerhubOutput from '../model/GatewayCreateProducerDockerhubOutput';
import GatewayCreateProducerEks from '../model/GatewayCreateProducerEks';
import GatewayCreateProducerEksOutput from '../model/GatewayCreateProducerEksOutput';
import GatewayCreateProducerGcp from '../model/GatewayCreateProducerGcp';
import GatewayCreateProducerGcpOutput from '../model/GatewayCreateProducerGcpOutput';
import GatewayCreateProducerGithub from '../model/GatewayCreateProducerGithub';
import GatewayCreateProducerGithubOutput from '../model/GatewayCreateProducerGithubOutput';
import GatewayCreateProducerGke from '../model/GatewayCreateProducerGke';
import GatewayCreateProducerGkeOutput from '../model/GatewayCreateProducerGkeOutput';
import GatewayCreateProducerHanaDb from '../model/GatewayCreateProducerHanaDb';
import GatewayCreateProducerHanaDbOutput from '../model/GatewayCreateProducerHanaDbOutput';
import GatewayCreateProducerLdap from '../model/GatewayCreateProducerLdap';
import GatewayCreateProducerLdapOutput from '../model/GatewayCreateProducerLdapOutput';
import GatewayCreateProducerMSSQL from '../model/GatewayCreateProducerMSSQL';
import GatewayCreateProducerMSSQLOutput from '../model/GatewayCreateProducerMSSQLOutput';
import GatewayCreateProducerMongo from '../model/GatewayCreateProducerMongo';
import GatewayCreateProducerMongoOutput from '../model/GatewayCreateProducerMongoOutput';
import GatewayCreateProducerMySQL from '../model/GatewayCreateProducerMySQL';
import GatewayCreateProducerMySQLOutput from '../model/GatewayCreateProducerMySQLOutput';
import GatewayCreateProducerNativeK8S from '../model/GatewayCreateProducerNativeK8S';
import GatewayCreateProducerNativeK8SOutput from '../model/GatewayCreateProducerNativeK8SOutput';
import GatewayCreateProducerOracleDb from '../model/GatewayCreateProducerOracleDb';
import GatewayCreateProducerOracleDbOutput from '../model/GatewayCreateProducerOracleDbOutput';
import GatewayCreateProducerPing from '../model/GatewayCreateProducerPing';
import GatewayCreateProducerPingOutput from '../model/GatewayCreateProducerPingOutput';
import GatewayCreateProducerPostgreSQL from '../model/GatewayCreateProducerPostgreSQL';
import GatewayCreateProducerPostgreSQLOutput from '../model/GatewayCreateProducerPostgreSQLOutput';
import GatewayCreateProducerRabbitMQ from '../model/GatewayCreateProducerRabbitMQ';
import GatewayCreateProducerRabbitMQOutput from '../model/GatewayCreateProducerRabbitMQOutput';
import GatewayCreateProducerRdp from '../model/GatewayCreateProducerRdp';
import GatewayCreateProducerRdpOutput from '../model/GatewayCreateProducerRdpOutput';
import GatewayCreateProducerRedshift from '../model/GatewayCreateProducerRedshift';
import GatewayCreateProducerRedshiftOutput from '../model/GatewayCreateProducerRedshiftOutput';
import GatewayCreateProducerSnowflake from '../model/GatewayCreateProducerSnowflake';
import GatewayCreateProducerSnowflakeOutput from '../model/GatewayCreateProducerSnowflakeOutput';
import GatewayDeleteAllowedManagementAccess from '../model/GatewayDeleteAllowedManagementAccess';
import GatewayDeleteK8SAuthConfig from '../model/GatewayDeleteK8SAuthConfig';
import GatewayDeleteK8SAuthConfigOutput from '../model/GatewayDeleteK8SAuthConfigOutput';
import GatewayDeleteMigration from '../model/GatewayDeleteMigration';
import GatewayDeleteProducer from '../model/GatewayDeleteProducer';
import GatewayDeleteProducerOutput from '../model/GatewayDeleteProducerOutput';
import GatewayGetConfig from '../model/GatewayGetConfig';
import GatewayGetK8SAuthConfig from '../model/GatewayGetK8SAuthConfig';
import GatewayGetK8SAuthConfigOutput from '../model/GatewayGetK8SAuthConfigOutput';
import GatewayGetLdapAuthConfig from '../model/GatewayGetLdapAuthConfig';
import GatewayGetLdapAuthConfigOutput from '../model/GatewayGetLdapAuthConfigOutput';
import GatewayGetMigration from '../model/GatewayGetMigration';
import GatewayGetProducer from '../model/GatewayGetProducer';
import GatewayGetTmpUsers from '../model/GatewayGetTmpUsers';
import GatewayListAllowedManagementAccess from '../model/GatewayListAllowedManagementAccess';
import GatewayListMigration from '../model/GatewayListMigration';
import GatewayListProducers from '../model/GatewayListProducers';
import GatewayMigratePersonalItems from '../model/GatewayMigratePersonalItems';
import GatewayMigratePersonalItemsOutput from '../model/GatewayMigratePersonalItemsOutput';
import GatewayMigrationCreateOutput from '../model/GatewayMigrationCreateOutput';
import GatewayMigrationDeleteOutput from '../model/GatewayMigrationDeleteOutput';
import GatewayMigrationGetOutput from '../model/GatewayMigrationGetOutput';
import GatewayMigrationListOutput from '../model/GatewayMigrationListOutput';
import GatewayMigrationSyncOutput from '../model/GatewayMigrationSyncOutput';
import GatewayMigrationUpdateOutput from '../model/GatewayMigrationUpdateOutput';
import GatewayRevokeTmpUsers from '../model/GatewayRevokeTmpUsers';
import GatewayStartProducer from '../model/GatewayStartProducer';
import GatewayStartProducerOutput from '../model/GatewayStartProducerOutput';
import GatewayStatusMigration from '../model/GatewayStatusMigration';
import GatewayStopProducer from '../model/GatewayStopProducer';
import GatewayStopProducerOutput from '../model/GatewayStopProducerOutput';
import GatewaySyncMigration from '../model/GatewaySyncMigration';
import GatewayUpdateItem from '../model/GatewayUpdateItem';
import GatewayUpdateItemOutput from '../model/GatewayUpdateItemOutput';
import GatewayUpdateK8SAuthConfig from '../model/GatewayUpdateK8SAuthConfig';
import GatewayUpdateK8SAuthConfigOutput from '../model/GatewayUpdateK8SAuthConfigOutput';
import GatewayUpdateLdapAuthConfig from '../model/GatewayUpdateLdapAuthConfig';
import GatewayUpdateLdapAuthConfigOutput from '../model/GatewayUpdateLdapAuthConfigOutput';
import GatewayUpdateMigration from '../model/GatewayUpdateMigration';
import GatewayUpdateProducerArtifactory from '../model/GatewayUpdateProducerArtifactory';
import GatewayUpdateProducerArtifactoryOutput from '../model/GatewayUpdateProducerArtifactoryOutput';
import GatewayUpdateProducerAws from '../model/GatewayUpdateProducerAws';
import GatewayUpdateProducerAwsOutput from '../model/GatewayUpdateProducerAwsOutput';
import GatewayUpdateProducerAzure from '../model/GatewayUpdateProducerAzure';
import GatewayUpdateProducerAzureOutput from '../model/GatewayUpdateProducerAzureOutput';
import GatewayUpdateProducerCassandra from '../model/GatewayUpdateProducerCassandra';
import GatewayUpdateProducerCassandraOutput from '../model/GatewayUpdateProducerCassandraOutput';
import GatewayUpdateProducerCertificateAutomation from '../model/GatewayUpdateProducerCertificateAutomation';
import GatewayUpdateProducerCertificateAutomationOutput from '../model/GatewayUpdateProducerCertificateAutomationOutput';
import GatewayUpdateProducerCustom from '../model/GatewayUpdateProducerCustom';
import GatewayUpdateProducerCustomOutput from '../model/GatewayUpdateProducerCustomOutput';
import GatewayUpdateProducerDockerhub from '../model/GatewayUpdateProducerDockerhub';
import GatewayUpdateProducerDockerhubOutput from '../model/GatewayUpdateProducerDockerhubOutput';
import GatewayUpdateProducerEks from '../model/GatewayUpdateProducerEks';
import GatewayUpdateProducerEksOutput from '../model/GatewayUpdateProducerEksOutput';
import GatewayUpdateProducerGcp from '../model/GatewayUpdateProducerGcp';
import GatewayUpdateProducerGcpOutput from '../model/GatewayUpdateProducerGcpOutput';
import GatewayUpdateProducerGithub from '../model/GatewayUpdateProducerGithub';
import GatewayUpdateProducerGithubOutput from '../model/GatewayUpdateProducerGithubOutput';
import GatewayUpdateProducerGke from '../model/GatewayUpdateProducerGke';
import GatewayUpdateProducerGkeOutput from '../model/GatewayUpdateProducerGkeOutput';
import GatewayUpdateProducerHanaDb from '../model/GatewayUpdateProducerHanaDb';
import GatewayUpdateProducerHanaDbOutput from '../model/GatewayUpdateProducerHanaDbOutput';
import GatewayUpdateProducerLdap from '../model/GatewayUpdateProducerLdap';
import GatewayUpdateProducerLdapOutput from '../model/GatewayUpdateProducerLdapOutput';
import GatewayUpdateProducerMSSQL from '../model/GatewayUpdateProducerMSSQL';
import GatewayUpdateProducerMSSQLOutput from '../model/GatewayUpdateProducerMSSQLOutput';
import GatewayUpdateProducerMongo from '../model/GatewayUpdateProducerMongo';
import GatewayUpdateProducerMongoOutput from '../model/GatewayUpdateProducerMongoOutput';
import GatewayUpdateProducerMySQL from '../model/GatewayUpdateProducerMySQL';
import GatewayUpdateProducerMySQLOutput from '../model/GatewayUpdateProducerMySQLOutput';
import GatewayUpdateProducerNativeK8S from '../model/GatewayUpdateProducerNativeK8S';
import GatewayUpdateProducerNativeK8SOutput from '../model/GatewayUpdateProducerNativeK8SOutput';
import GatewayUpdateProducerOracleDb from '../model/GatewayUpdateProducerOracleDb';
import GatewayUpdateProducerOracleDbOutput from '../model/GatewayUpdateProducerOracleDbOutput';
import GatewayUpdateProducerPing from '../model/GatewayUpdateProducerPing';
import GatewayUpdateProducerPingOutput from '../model/GatewayUpdateProducerPingOutput';
import GatewayUpdateProducerPostgreSQL from '../model/GatewayUpdateProducerPostgreSQL';
import GatewayUpdateProducerPostgreSQLOutput from '../model/GatewayUpdateProducerPostgreSQLOutput';
import GatewayUpdateProducerRabbitMQ from '../model/GatewayUpdateProducerRabbitMQ';
import GatewayUpdateProducerRabbitMQOutput from '../model/GatewayUpdateProducerRabbitMQOutput';
import GatewayUpdateProducerRdp from '../model/GatewayUpdateProducerRdp';
import GatewayUpdateProducerRdpOutput from '../model/GatewayUpdateProducerRdpOutput';
import GatewayUpdateProducerRedshift from '../model/GatewayUpdateProducerRedshift';
import GatewayUpdateProducerRedshiftOutput from '../model/GatewayUpdateProducerRedshiftOutput';
import GatewayUpdateProducerSnowflake from '../model/GatewayUpdateProducerSnowflake';
import GatewayUpdateProducerSnowflakeOutput from '../model/GatewayUpdateProducerSnowflakeOutput';
import GatewayUpdateTlsCert from '../model/GatewayUpdateTlsCert';
import GatewayUpdateTlsCertOutput from '../model/GatewayUpdateTlsCertOutput';
import GatewayUpdateTmpUsers from '../model/GatewayUpdateTmpUsers';
import GatewaysListResponse from '../model/GatewaysListResponse';
import GetAccountSettings from '../model/GetAccountSettings';
import GetAccountSettingsCommandOutput from '../model/GetAccountSettingsCommandOutput';
import GetAuthMethod from '../model/GetAuthMethod';
import GetCertificateValue from '../model/GetCertificateValue';
import GetCertificateValueOutput from '../model/GetCertificateValueOutput';
import GetDynamicSecretValue from '../model/GetDynamicSecretValue';
import GetEventForwarder from '../model/GetEventForwarder';
import GetEventForwarderOutput from '../model/GetEventForwarderOutput';
import GetKubeExecCreds from '../model/GetKubeExecCreds';
import GetKubeExecCredsOutput from '../model/GetKubeExecCredsOutput';
import GetPKICertificate from '../model/GetPKICertificate';
import GetPKICertificateOutput from '../model/GetPKICertificateOutput';
import GetProducersListReplyObj from '../model/GetProducersListReplyObj';
import GetRSAPublic from '../model/GetRSAPublic';
import GetRSAPublicOutput from '../model/GetRSAPublicOutput';
import GetRole from '../model/GetRole';
import GetRotatedSecretValue from '../model/GetRotatedSecretValue';
import GetSSHCertificate from '../model/GetSSHCertificate';
import GetSSHCertificateOutput from '../model/GetSSHCertificateOutput';
import GetSecretValue from '../model/GetSecretValue';
import GetSubAdminsListReplyObj from '../model/GetSubAdminsListReplyObj';
import GetTags from '../model/GetTags';
import GetTarget from '../model/GetTarget';
import GetTargetDetails from '../model/GetTargetDetails';
import GetTargetDetailsOutput from '../model/GetTargetDetailsOutput';
import Item from '../model/Item';
import JSONError from '../model/JSONError';
import KMIPClientGetResponse from '../model/KMIPClientGetResponse';
import KMIPClientListResponse from '../model/KMIPClientListResponse';
import KMIPClientUpdateResponse from '../model/KMIPClientUpdateResponse';
import KMIPEnvironmentCreateResponse from '../model/KMIPEnvironmentCreateResponse';
import KmipClientDeleteRule from '../model/KmipClientDeleteRule';
import KmipClientSetRule from '../model/KmipClientSetRule';
import KmipCreateClient from '../model/KmipCreateClient';
import KmipCreateClientOutput from '../model/KmipCreateClientOutput';
import KmipDeleteClient from '../model/KmipDeleteClient';
import KmipDeleteServer from '../model/KmipDeleteServer';
import KmipDescribeClient from '../model/KmipDescribeClient';
import KmipDescribeServer from '../model/KmipDescribeServer';
import KmipDescribeServerOutput from '../model/KmipDescribeServerOutput';
import KmipListClients from '../model/KmipListClients';
import KmipMoveServer from '../model/KmipMoveServer';
import KmipMoveServerOutput from '../model/KmipMoveServerOutput';
import KmipRenewClientCertificate from '../model/KmipRenewClientCertificate';
import KmipRenewClientCertificateOutput from '../model/KmipRenewClientCertificateOutput';
import KmipRenewServerCertificate from '../model/KmipRenewServerCertificate';
import KmipRenewServerCertificateOutput from '../model/KmipRenewServerCertificateOutput';
import KmipServerSetup from '../model/KmipServerSetup';
import KmipSetServerState from '../model/KmipSetServerState';
import KmipSetServerStateOutput from '../model/KmipSetServerStateOutput';
import ListAuthMethods from '../model/ListAuthMethods';
import ListAuthMethodsOutput from '../model/ListAuthMethodsOutput';
import ListGateways from '../model/ListGateways';
import ListItems from '../model/ListItems';
import ListItemsInPathOutput from '../model/ListItemsInPathOutput';
import ListRoles from '../model/ListRoles';
import ListRolesOutput from '../model/ListRolesOutput';
import ListSRABastions from '../model/ListSRABastions';
import ListSharedItems from '../model/ListSharedItems';
import ListTargets from '../model/ListTargets';
import ListTargetsOutput from '../model/ListTargetsOutput';
import MigrationStatusReplyObj from '../model/MigrationStatusReplyObj';
import MoveObjects from '../model/MoveObjects';
import RawCreds from '../model/RawCreds';
import RefreshKey from '../model/RefreshKey';
import RefreshKeyOutput from '../model/RefreshKeyOutput';
import RequestAccess from '../model/RequestAccess';
import RequestAccessOutput from '../model/RequestAccessOutput';
import ReverseRBAC from '../model/ReverseRBAC';
import ReverseRBACOutput from '../model/ReverseRBACOutput';
import Role from '../model/Role';
import RollbackSecret from '../model/RollbackSecret';
import RollbackSecretOutput from '../model/RollbackSecretOutput';
import RotateKeyOutput from '../model/RotateKeyOutput';
import RotateSecret from '../model/RotateSecret';
import RotatedSecretOutput from '../model/RotatedSecretOutput';
import SetItemState from '../model/SetItemState';
import SetRoleRule from '../model/SetRoleRule';
import ShareItem from '../model/ShareItem';
import SignGPG from '../model/SignGPG';
import SignGPGOutput from '../model/SignGPGOutput';
import SignJWTOutput from '../model/SignJWTOutput';
import SignJWTWithClassicKey from '../model/SignJWTWithClassicKey';
import SignPKCS1 from '../model/SignPKCS1';
import SignPKCS1Output from '../model/SignPKCS1Output';
import SignPKICertOutput from '../model/SignPKICertOutput';
import SignPKICertWithClassicKey from '../model/SignPKICertWithClassicKey';
import StaticCredsAuth from '../model/StaticCredsAuth';
import StaticCredsAuthOutput from '../model/StaticCredsAuthOutput';
import SystemAccessCredentialsReplyObj from '../model/SystemAccessCredentialsReplyObj';
import Target from '../model/Target';
import TmpUserData from '../model/TmpUserData';
import Tokenize from '../model/Tokenize';
import TokenizeOutput from '../model/TokenizeOutput';
import UidCreateChildToken from '../model/UidCreateChildToken';
import UidCreateChildTokenOutput from '../model/UidCreateChildTokenOutput';
import UidGenerateToken from '../model/UidGenerateToken';
import UidGenerateTokenOutput from '../model/UidGenerateTokenOutput';
import UidListChildren from '../model/UidListChildren';
import UidRevokeToken from '../model/UidRevokeToken';
import UidRotateToken from '../model/UidRotateToken';
import UidRotateTokenOutput from '../model/UidRotateTokenOutput';
import UniversalIdentityDetails from '../model/UniversalIdentityDetails';
import UpdateAWSTarget from '../model/UpdateAWSTarget';
import UpdateAWSTargetDetails from '../model/UpdateAWSTargetDetails';
import UpdateAccountSettings from '../model/UpdateAccountSettings';
import UpdateAccountSettingsOutput from '../model/UpdateAccountSettingsOutput';
import UpdateArtifactoryTarget from '../model/UpdateArtifactoryTarget';
import UpdateArtifactoryTargetOutput from '../model/UpdateArtifactoryTargetOutput';
import UpdateAssoc from '../model/UpdateAssoc';
import UpdateAuthMethod from '../model/UpdateAuthMethod';
import UpdateAuthMethodAWSIAM from '../model/UpdateAuthMethodAWSIAM';
import UpdateAuthMethodAzureAD from '../model/UpdateAuthMethodAzureAD';
import UpdateAuthMethodCert from '../model/UpdateAuthMethodCert';
import UpdateAuthMethodCertOutput from '../model/UpdateAuthMethodCertOutput';
import UpdateAuthMethodGCP from '../model/UpdateAuthMethodGCP';
import UpdateAuthMethodK8S from '../model/UpdateAuthMethodK8S';
import UpdateAuthMethodK8SOutput from '../model/UpdateAuthMethodK8SOutput';
import UpdateAuthMethodLDAP from '../model/UpdateAuthMethodLDAP';
import UpdateAuthMethodLDAPOutput from '../model/UpdateAuthMethodLDAPOutput';
import UpdateAuthMethodOAuth2 from '../model/UpdateAuthMethodOAuth2';
import UpdateAuthMethodOIDC from '../model/UpdateAuthMethodOIDC';
import UpdateAuthMethodOutput from '../model/UpdateAuthMethodOutput';
import UpdateAuthMethodSAML from '../model/UpdateAuthMethodSAML';
import UpdateAuthMethodUniversalIdentity from '../model/UpdateAuthMethodUniversalIdentity';
import UpdateAzureTarget from '../model/UpdateAzureTarget';
import UpdateAzureTargetOutput from '../model/UpdateAzureTargetOutput';
import UpdateCertificateOutput from '../model/UpdateCertificateOutput';
import UpdateCertificateValue from '../model/UpdateCertificateValue';
import UpdateDBTarget from '../model/UpdateDBTarget';
import UpdateDBTargetDetails from '../model/UpdateDBTargetDetails';
import UpdateDBTargetOutput from '../model/UpdateDBTargetOutput';
import UpdateDockerhubTarget from '../model/UpdateDockerhubTarget';
import UpdateDockerhubTargetOutput from '../model/UpdateDockerhubTargetOutput';
import UpdateEKSTarget from '../model/UpdateEKSTarget';
import UpdateEKSTargetOutput from '../model/UpdateEKSTargetOutput';
import UpdateEventForwarder from '../model/UpdateEventForwarder';
import UpdateGKETarget from '../model/UpdateGKETarget';
import UpdateGKETargetOutput from '../model/UpdateGKETargetOutput';
import UpdateGcpTarget from '../model/UpdateGcpTarget';
import UpdateGcpTargetOutput from '../model/UpdateGcpTargetOutput';
import UpdateGithubTarget from '../model/UpdateGithubTarget';
import UpdateGithubTargetOutput from '../model/UpdateGithubTargetOutput';
import UpdateItem from '../model/UpdateItem';
import UpdateItemOutput from '../model/UpdateItemOutput';
import UpdateLdapTarget from '../model/UpdateLdapTarget';
import UpdateLdapTargetDetails from '../model/UpdateLdapTargetDetails';
import UpdateLdapTargetOutput from '../model/UpdateLdapTargetOutput';
import UpdateLinkedTarget from '../model/UpdateLinkedTarget';
import UpdateNativeK8STarget from '../model/UpdateNativeK8STarget';
import UpdateNativeK8STargetOutput from '../model/UpdateNativeK8STargetOutput';
import UpdatePKICertIssuer from '../model/UpdatePKICertIssuer';
import UpdatePKICertIssuerOutput from '../model/UpdatePKICertIssuerOutput';
import UpdatePingTarget from '../model/UpdatePingTarget';
import UpdateRDPTargetDetails from '../model/UpdateRDPTargetDetails';
import UpdateRabbitMQTarget from '../model/UpdateRabbitMQTarget';
import UpdateRabbitMQTargetDetails from '../model/UpdateRabbitMQTargetDetails';
import UpdateRabbitMQTargetOutput from '../model/UpdateRabbitMQTargetOutput';
import UpdateRole from '../model/UpdateRole';
import UpdateRoleOutput from '../model/UpdateRoleOutput';
import UpdateRotatedSecret from '../model/UpdateRotatedSecret';
import UpdateRotatedSecretOutput from '../model/UpdateRotatedSecretOutput';
import UpdateRotationSettings from '../model/UpdateRotationSettings';
import UpdateSSHCertIssuer from '../model/UpdateSSHCertIssuer';
import UpdateSSHCertIssuerOutput from '../model/UpdateSSHCertIssuerOutput';
import UpdateSSHTarget from '../model/UpdateSSHTarget';
import UpdateSSHTargetDetails from '../model/UpdateSSHTargetDetails';
import UpdateSSHTargetOutput from '../model/UpdateSSHTargetOutput';
import UpdateSalesforceTarget from '../model/UpdateSalesforceTarget';
import UpdateSalesforceTargetOutput from '../model/UpdateSalesforceTargetOutput';
import UpdateSecretVal from '../model/UpdateSecretVal';
import UpdateSecretValOutput from '../model/UpdateSecretValOutput';
import UpdateTarget from '../model/UpdateTarget';
import UpdateTargetDetails from '../model/UpdateTargetDetails';
import UpdateTargetOutput from '../model/UpdateTargetOutput';
import UpdateWebTarget from '../model/UpdateWebTarget';
import UpdateWebTargetDetails from '../model/UpdateWebTargetDetails';
import UpdateWebTargetOutput from '../model/UpdateWebTargetOutput';
import UpdateWindowsTarget from '../model/UpdateWindowsTarget';
import UploadRSA from '../model/UploadRSA';
import ValidateToken from '../model/ValidateToken';
import ValidateTokenOutput from '../model/ValidateTokenOutput';
import VerifyGPG from '../model/VerifyGPG';
import VerifyJWTOutput from '../model/VerifyJWTOutput';
import VerifyJWTWithClassicKey from '../model/VerifyJWTWithClassicKey';
import VerifyPKCS1 from '../model/VerifyPKCS1';
import VerifyPKICertOutput from '../model/VerifyPKICertOutput';
import VerifyPKICertWithClassicKey from '../model/VerifyPKICertWithClassicKey';

/**
* V2 service.
* @module api/V2Api
* @version 3.2.5
*/
export default class V2Api {

    /**
    * Constructs a new V2Api. 
    * @alias module:api/V2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {module:model/AssocRoleAuthMethod} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateRoleAuthMethodAssocOutput} and HTTP response
     */
    assocRoleAuthMethodWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling assocRoleAuthMethod");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRoleAuthMethodAssocOutput;
      return this.apiClient.callApi(
        '/assoc-role-am', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AssocRoleAuthMethod} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateRoleAuthMethodAssocOutput}
     */
    assocRoleAuthMethod(body) {
      return this.assocRoleAuthMethodWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/AssocTargetItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTargetItemAssocOutput} and HTTP response
     */
    assocTargetItemWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling assocTargetItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTargetItemAssocOutput;
      return this.apiClient.callApi(
        '/assoc-target-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AssocTargetItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTargetItemAssocOutput}
     */
    assocTargetItem(body) {
      return this.assocTargetItemWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/Auth} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthOutput} and HTTP response
     */
    authWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling auth");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthOutput;
      return this.apiClient.callApi(
        '/auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/Auth} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthOutput}
     */
    auth(body) {
      return this.authWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/Configure} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConfigureOutput} and HTTP response
     */
    configureWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling configure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigureOutput;
      return this.apiClient.callApi(
        '/configure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/Configure} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConfigureOutput}
     */
    configure(body) {
      return this.configureWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/Connect} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    connectWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling connect");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/connect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/Connect} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    connect(body) {
      return this.connectWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAWSTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAWSTargetOutput} and HTTP response
     */
    createAWSTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAWSTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAWSTargetOutput;
      return this.apiClient.callApi(
        '/create-aws-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAWSTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAWSTargetOutput}
     */
    createAWSTarget(body) {
      return this.createAWSTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateArtifactoryTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateArtifactoryTargetOutput} and HTTP response
     */
    createArtifactoryTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createArtifactoryTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateArtifactoryTargetOutput;
      return this.apiClient.callApi(
        '/create-artifactory-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateArtifactoryTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateArtifactoryTargetOutput}
     */
    createArtifactoryTarget(body) {
      return this.createArtifactoryTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethod} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodOutput} and HTTP response
     */
    createAuthMethodWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethod");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodOutput;
      return this.apiClient.callApi(
        '/create-auth-method', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethod} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodOutput}
     */
    createAuthMethod(body) {
      return this.createAuthMethodWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodAWSIAM} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodAWSIAMOutput} and HTTP response
     */
    createAuthMethodAWSIAMWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodAWSIAM");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodAWSIAMOutput;
      return this.apiClient.callApi(
        '/create-auth-method-aws-iam', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodAWSIAM} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodAWSIAMOutput}
     */
    createAuthMethodAWSIAM(body) {
      return this.createAuthMethodAWSIAMWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodAzureAD} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodAzureADOutput} and HTTP response
     */
    createAuthMethodAzureADWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodAzureAD");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodAzureADOutput;
      return this.apiClient.callApi(
        '/create-auth-method-azure-ad', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodAzureAD} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodAzureADOutput}
     */
    createAuthMethodAzureAD(body) {
      return this.createAuthMethodAzureADWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodCert} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodCertOutput} and HTTP response
     */
    createAuthMethodCertWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodCert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodCertOutput;
      return this.apiClient.callApi(
        '/create-auth-method-cert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodCert} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodCertOutput}
     */
    createAuthMethodCert(body) {
      return this.createAuthMethodCertWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodGCP} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodGCPOutput} and HTTP response
     */
    createAuthMethodGCPWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodGCP");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodGCPOutput;
      return this.apiClient.callApi(
        '/create-auth-method-gcp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodGCP} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodGCPOutput}
     */
    createAuthMethodGCP(body) {
      return this.createAuthMethodGCPWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodHuawei} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodHuaweiOutput} and HTTP response
     */
    createAuthMethodHuaweiWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodHuawei");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodHuaweiOutput;
      return this.apiClient.callApi(
        '/create-auth-method-huawei', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodHuawei} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodHuaweiOutput}
     */
    createAuthMethodHuawei(body) {
      return this.createAuthMethodHuaweiWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodK8S} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodK8SOutput} and HTTP response
     */
    createAuthMethodK8SWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodK8S");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodK8SOutput;
      return this.apiClient.callApi(
        '/create-auth-method-k8s', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodK8S} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodK8SOutput}
     */
    createAuthMethodK8S(body) {
      return this.createAuthMethodK8SWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodLDAP} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodLDAPOutput} and HTTP response
     */
    createAuthMethodLDAPWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodLDAP");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodLDAPOutput;
      return this.apiClient.callApi(
        '/create-auth-method-ldap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodLDAP} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodLDAPOutput}
     */
    createAuthMethodLDAP(body) {
      return this.createAuthMethodLDAPWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodOAuth2} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodOAuth2Output} and HTTP response
     */
    createAuthMethodOAuth2WithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodOAuth2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodOAuth2Output;
      return this.apiClient.callApi(
        '/create-auth-method-oauth2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodOAuth2} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodOAuth2Output}
     */
    createAuthMethodOAuth2(body) {
      return this.createAuthMethodOAuth2WithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodOIDC} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodOIDCOutput} and HTTP response
     */
    createAuthMethodOIDCWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodOIDC");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodOIDCOutput;
      return this.apiClient.callApi(
        '/create-auth-method-oidc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodOIDC} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodOIDCOutput}
     */
    createAuthMethodOIDC(body) {
      return this.createAuthMethodOIDCWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodSAML} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodSAMLOutput} and HTTP response
     */
    createAuthMethodSAMLWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodSAML");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodSAMLOutput;
      return this.apiClient.callApi(
        '/create-auth-method-saml', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodSAML} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodSAMLOutput}
     */
    createAuthMethodSAML(body) {
      return this.createAuthMethodSAMLWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAuthMethodUniversalIdentity} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAuthMethodUniversalIdentityOutput} and HTTP response
     */
    createAuthMethodUniversalIdentityWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthMethodUniversalIdentity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthMethodUniversalIdentityOutput;
      return this.apiClient.callApi(
        '/create-auth-method-universal-identity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAuthMethodUniversalIdentity} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAuthMethodUniversalIdentityOutput}
     */
    createAuthMethodUniversalIdentity(body) {
      return this.createAuthMethodUniversalIdentityWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateAzureTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAzureTargetOutput} and HTTP response
     */
    createAzureTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAzureTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAzureTargetOutput;
      return this.apiClient.callApi(
        '/create-azure-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateAzureTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAzureTargetOutput}
     */
    createAzureTarget(body) {
      return this.createAzureTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateCertificate} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateCertificateOutput} and HTTP response
     */
    createCertificateWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCertificateOutput;
      return this.apiClient.callApi(
        '/create-certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateCertificate} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateCertificateOutput}
     */
    createCertificate(body) {
      return this.createCertificateWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateClassicKeyOutput} and HTTP response
     */
    createClassicKeyWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createClassicKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateClassicKeyOutput;
      return this.apiClient.callApi(
        '/create-classic-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateClassicKeyOutput}
     */
    createClassicKey(body) {
      return this.createClassicKeyWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateDBTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateDBTargetOutput} and HTTP response
     */
    createDBTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDBTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDBTargetOutput;
      return this.apiClient.callApi(
        '/create-db-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateDBTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateDBTargetOutput}
     */
    createDBTarget(body) {
      return this.createDBTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateDFCKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateDFCKeyOutput} and HTTP response
     */
    createDFCKeyWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDFCKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDFCKeyOutput;
      return this.apiClient.callApi(
        '/create-dfc-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateDFCKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateDFCKeyOutput}
     */
    createDFCKey(body) {
      return this.createDFCKeyWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateDockerhubTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateDockerhubTargetOutput} and HTTP response
     */
    createDockerhubTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDockerhubTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDockerhubTargetOutput;
      return this.apiClient.callApi(
        '/create-dockerhub-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateDockerhubTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateDockerhubTargetOutput}
     */
    createDockerhubTarget(body) {
      return this.createDockerhubTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateDynamicSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createDynamicSecretWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDynamicSecret");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/create-dynamic-secret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateDynamicSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createDynamicSecret(body) {
      return this.createDynamicSecretWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateEKSTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateEKSTargetOutput} and HTTP response
     */
    createEKSTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createEKSTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEKSTargetOutput;
      return this.apiClient.callApi(
        '/create-eks-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateEKSTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateEKSTargetOutput}
     */
    createEKSTarget(body) {
      return this.createEKSTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateEventForwarder} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateEventForwarderOutput} and HTTP response
     */
    createEventForwarderWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createEventForwarder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEventForwarderOutput;
      return this.apiClient.callApi(
        '/create-event-forwarder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateEventForwarder} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateEventForwarderOutput}
     */
    createEventForwarder(body) {
      return this.createEventForwarderWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateGKETarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGKETargetOutput} and HTTP response
     */
    createGKETargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createGKETarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGKETargetOutput;
      return this.apiClient.callApi(
        '/create-gke-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateGKETarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGKETargetOutput}
     */
    createGKETarget(body) {
      return this.createGKETargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateGcpTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGcpTargetOutput} and HTTP response
     */
    createGcpTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createGcpTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGcpTargetOutput;
      return this.apiClient.callApi(
        '/create-gcp-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateGcpTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGcpTargetOutput}
     */
    createGcpTarget(body) {
      return this.createGcpTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateGithubTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGithubTargetOutput} and HTTP response
     */
    createGithubTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createGithubTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGithubTargetOutput;
      return this.apiClient.callApi(
        '/create-github-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateGithubTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGithubTargetOutput}
     */
    createGithubTarget(body) {
      return this.createGithubTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateKeyOutput} and HTTP response
     */
    createKeyWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateKeyOutput;
      return this.apiClient.callApi(
        '/create-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateKeyOutput}
     */
    createKey(body) {
      return this.createKeyWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateLinkedTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateLinkedTargetOutput} and HTTP response
     */
    createLinkedTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createLinkedTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLinkedTargetOutput;
      return this.apiClient.callApi(
        '/create-linked-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateLinkedTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateLinkedTargetOutput}
     */
    createLinkedTarget(body) {
      return this.createLinkedTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateNativeK8STarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateNativeK8STargetOutput} and HTTP response
     */
    createNativeK8STargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createNativeK8STarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateNativeK8STargetOutput;
      return this.apiClient.callApi(
        '/create-k8s-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateNativeK8STarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateNativeK8STargetOutput}
     */
    createNativeK8STarget(body) {
      return this.createNativeK8STargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreatePKICertIssuer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatePKICertIssuerOutput} and HTTP response
     */
    createPKICertIssuerWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPKICertIssuer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePKICertIssuerOutput;
      return this.apiClient.callApi(
        '/create-pki-cert-issuer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreatePKICertIssuer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatePKICertIssuerOutput}
     */
    createPKICertIssuer(body) {
      return this.createPKICertIssuerWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreatePingTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatePingTargetOutput} and HTTP response
     */
    createPingTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPingTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePingTargetOutput;
      return this.apiClient.callApi(
        '/create-ping-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreatePingTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatePingTargetOutput}
     */
    createPingTarget(body) {
      return this.createPingTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateRabbitMQTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateRabbitMQTargetOutput} and HTTP response
     */
    createRabbitMQTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRabbitMQTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRabbitMQTargetOutput;
      return this.apiClient.callApi(
        '/create-rabbitmq-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateRabbitMQTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateRabbitMQTargetOutput}
     */
    createRabbitMQTarget(body) {
      return this.createRabbitMQTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateRole} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createRoleWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/create-role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateRole} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createRole(body) {
      return this.createRoleWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateRotatedSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateRotatedSecretOutput} and HTTP response
     */
    createRotatedSecretWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRotatedSecret");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRotatedSecretOutput;
      return this.apiClient.callApi(
        '/create-rotated-secret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateRotatedSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateRotatedSecretOutput}
     */
    createRotatedSecret(body) {
      return this.createRotatedSecretWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateSSHCertIssuer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSSHCertIssuerOutput} and HTTP response
     */
    createSSHCertIssuerWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSSHCertIssuer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSSHCertIssuerOutput;
      return this.apiClient.callApi(
        '/create-ssh-cert-issuer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateSSHCertIssuer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSSHCertIssuerOutput}
     */
    createSSHCertIssuer(body) {
      return this.createSSHCertIssuerWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateSSHTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSSHTargetOutput} and HTTP response
     */
    createSSHTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSSHTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSSHTargetOutput;
      return this.apiClient.callApi(
        '/create-ssh-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateSSHTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSSHTargetOutput}
     */
    createSSHTarget(body) {
      return this.createSSHTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateSalesforceTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSalesforceTargetOutput} and HTTP response
     */
    createSalesforceTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSalesforceTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSalesforceTargetOutput;
      return this.apiClient.callApi(
        '/create-salesforce-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateSalesforceTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSalesforceTargetOutput}
     */
    createSalesforceTarget(body) {
      return this.createSalesforceTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSecretOutput} and HTTP response
     */
    createSecretWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSecret");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSecretOutput;
      return this.apiClient.callApi(
        '/create-secret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSecretOutput}
     */
    createSecret(body) {
      return this.createSecretWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateTokenizer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTokenizerOutput} and HTTP response
     */
    createTokenizerWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createTokenizer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTokenizerOutput;
      return this.apiClient.callApi(
        '/create-tokenizer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateTokenizer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTokenizerOutput}
     */
    createTokenizer(body) {
      return this.createTokenizerWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateWebTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateWebTargetOutput} and HTTP response
     */
    createWebTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createWebTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWebTargetOutput;
      return this.apiClient.callApi(
        '/create-web-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateWebTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateWebTargetOutput}
     */
    createWebTarget(body) {
      return this.createWebTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateWindowsTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateWindowsTargetOutput} and HTTP response
     */
    createWindowsTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createWindowsTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWindowsTargetOutput;
      return this.apiClient.callApi(
        '/create-windows-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateWindowsTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateWindowsTargetOutput}
     */
    createWindowsTarget(body) {
      return this.createWindowsTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/CreateLdapTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateLdapTargetOutput} and HTTP response
     */
    createldapTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createldapTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLdapTargetOutput;
      return this.apiClient.callApi(
        '/create-ldap-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateLdapTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateLdapTargetOutput}
     */
    createldapTarget(body) {
      return this.createldapTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/Decrypt} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DecryptOutput} and HTTP response
     */
    decryptWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling decrypt");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DecryptOutput;
      return this.apiClient.callApi(
        '/decrypt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/Decrypt} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DecryptOutput}
     */
    decrypt(body) {
      return this.decryptWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DecryptGPG} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DecryptGPGOutput} and HTTP response
     */
    decryptGPGWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling decryptGPG");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DecryptGPGOutput;
      return this.apiClient.callApi(
        '/decrypt-gpg', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DecryptGPG} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DecryptGPGOutput}
     */
    decryptGPG(body) {
      return this.decryptGPGWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DecryptPKCS1} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DecryptPKCS1Output} and HTTP response
     */
    decryptPKCS1WithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling decryptPKCS1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DecryptPKCS1Output;
      return this.apiClient.callApi(
        '/decrypt-pkcs1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DecryptPKCS1} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DecryptPKCS1Output}
     */
    decryptPKCS1(body) {
      return this.decryptPKCS1WithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DecryptWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DecryptWithClassicKeyOutput} and HTTP response
     */
    decryptWithClassicKeyWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling decryptWithClassicKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DecryptWithClassicKeyOutput;
      return this.apiClient.callApi(
        '/decrypt-with-classic-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DecryptWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DecryptWithClassicKeyOutput}
     */
    decryptWithClassicKey(body) {
      return this.decryptWithClassicKeyWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteAuthMethod} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteAuthMethodOutput} and HTTP response
     */
    deleteAuthMethodWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteAuthMethod");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAuthMethodOutput;
      return this.apiClient.callApi(
        '/delete-auth-method', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteAuthMethod} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteAuthMethodOutput}
     */
    deleteAuthMethod(body) {
      return this.deleteAuthMethodWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteAuthMethods} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteAuthMethodsOutput} and HTTP response
     */
    deleteAuthMethodsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteAuthMethods");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAuthMethodsOutput;
      return this.apiClient.callApi(
        '/delete-auth-methods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteAuthMethods} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteAuthMethodsOutput}
     */
    deleteAuthMethods(body) {
      return this.deleteAuthMethodsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteEventForwarder} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteEventForwarderWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteEventForwarder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-event-forwarder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteEventForwarder} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteEventForwarder(body) {
      return this.deleteEventForwarderWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteItemOutput} and HTTP response
     */
    deleteItemWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteItemOutput;
      return this.apiClient.callApi(
        '/delete-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteItemOutput}
     */
    deleteItem(body) {
      return this.deleteItemWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteItems} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteItemsOutput} and HTTP response
     */
    deleteItemsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteItems");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteItemsOutput;
      return this.apiClient.callApi(
        '/delete-items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteItems} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteItemsOutput}
     */
    deleteItems(body) {
      return this.deleteItemsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteRole} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteRoleWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteRole} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteRole(body) {
      return this.deleteRoleWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteRoleAssociation} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteRoleAssociationWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteRoleAssociation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-assoc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteRoleAssociation} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteRoleAssociation(body) {
      return this.deleteRoleAssociationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteRoleRule} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteRoleRuleOutput} and HTTP response
     */
    deleteRoleRuleWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteRoleRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteRoleRuleOutput;
      return this.apiClient.callApi(
        '/delete-role-rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteRoleRule} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteRoleRuleOutput}
     */
    deleteRoleRule(body) {
      return this.deleteRoleRuleWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteRoles} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteRolesWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteRoles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteRoles} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteRoles(body) {
      return this.deleteRolesWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteTarget(body) {
      return this.deleteTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteTargetAssociation} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteTargetAssociationWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteTargetAssociation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-assoc-target-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteTargetAssociation} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteTargetAssociation(body) {
      return this.deleteTargetAssociationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DeleteTargets} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteTargetsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteTargets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/delete-targets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DeleteTargets} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteTargets(body) {
      return this.deleteTargetsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DescribeItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Item} and HTTP response
     */
    describeItemWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling describeItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Item;
      return this.apiClient.callApi(
        '/describe-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DescribeItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Item}
     */
    describeItem(body) {
      return this.describeItemWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DescribePermissions} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DescribePermissionsOutput} and HTTP response
     */
    describePermissionsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling describePermissions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribePermissionsOutput;
      return this.apiClient.callApi(
        '/describe-permissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DescribePermissions} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DescribePermissionsOutput}
     */
    describePermissions(body) {
      return this.describePermissionsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DescribeSubClaims} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DescribeSubClaimsOutput} and HTTP response
     */
    describeSubClaimsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling describeSubClaims");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeSubClaimsOutput;
      return this.apiClient.callApi(
        '/describe-sub-claims', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DescribeSubClaims} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DescribeSubClaimsOutput}
     */
    describeSubClaims(body) {
      return this.describeSubClaimsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/Detokenize} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DetokenizeOutput} and HTTP response
     */
    detokenizeWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling detokenize");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DetokenizeOutput;
      return this.apiClient.callApi(
        '/detokenize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/Detokenize} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DetokenizeOutput}
     */
    detokenize(body) {
      return this.detokenizeWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/Encrypt} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptOutput} and HTTP response
     */
    encryptWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling encrypt");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EncryptOutput;
      return this.apiClient.callApi(
        '/encrypt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/Encrypt} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptOutput}
     */
    encrypt(body) {
      return this.encryptWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/EncryptGPG} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptGPGOutput} and HTTP response
     */
    encryptGPGWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling encryptGPG");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EncryptGPGOutput;
      return this.apiClient.callApi(
        '/encrypt-gpg', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/EncryptGPG} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptGPGOutput}
     */
    encryptGPG(body) {
      return this.encryptGPGWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/EncryptWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptOutput} and HTTP response
     */
    encryptWithClassicKeyWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling encryptWithClassicKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EncryptOutput;
      return this.apiClient.callApi(
        '/encrypt-with-classic-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/EncryptWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptOutput}
     */
    encryptWithClassicKey(body) {
      return this.encryptWithClassicKeyWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ExportClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ExportClassicKeyOutput} and HTTP response
     */
    exportClassicKeyWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling exportClassicKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExportClassicKeyOutput;
      return this.apiClient.callApi(
        '/export-classic-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ExportClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ExportClassicKeyOutput}
     */
    exportClassicKey(body) {
      return this.exportClassicKeyWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateK8SAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateK8SAuthConfigOutput} and HTTP response
     */
    gatewayCreateK8SAuthConfigWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateK8SAuthConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateK8SAuthConfigOutput;
      return this.apiClient.callApi(
        '/gateway-create-k8s-auth-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateK8SAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateK8SAuthConfigOutput}
     */
    gatewayCreateK8SAuthConfig(body) {
      return this.gatewayCreateK8SAuthConfigWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigrationCreateOutput} and HTTP response
     */
    gatewayCreateMigrationWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateMigration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayMigrationCreateOutput;
      return this.apiClient.callApi(
        '/gateway-create-migration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigrationCreateOutput}
     */
    gatewayCreateMigration(body) {
      return this.gatewayCreateMigrationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerArtifactory} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerArtifactoryOutput} and HTTP response
     */
    gatewayCreateProducerArtifactoryWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerArtifactory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerArtifactoryOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-artifactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerArtifactory} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerArtifactoryOutput}
     */
    gatewayCreateProducerArtifactory(body) {
      return this.gatewayCreateProducerArtifactoryWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerAws} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerAwsOutput} and HTTP response
     */
    gatewayCreateProducerAwsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerAws");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerAwsOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-aws', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerAws} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerAwsOutput}
     */
    gatewayCreateProducerAws(body) {
      return this.gatewayCreateProducerAwsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerAzure} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerAzureOutput} and HTTP response
     */
    gatewayCreateProducerAzureWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerAzure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerAzureOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-azure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerAzure} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerAzureOutput}
     */
    gatewayCreateProducerAzure(body) {
      return this.gatewayCreateProducerAzureWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerCassandra} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerCassandraOutput} and HTTP response
     */
    gatewayCreateProducerCassandraWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerCassandra");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerCassandraOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-cassandra', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerCassandra} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerCassandraOutput}
     */
    gatewayCreateProducerCassandra(body) {
      return this.gatewayCreateProducerCassandraWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerCertificateAutomation} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerCertificateAutomationOutput} and HTTP response
     */
    gatewayCreateProducerCertificateAutomationWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerCertificateAutomation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerCertificateAutomationOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-certificate-automation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerCertificateAutomation} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerCertificateAutomationOutput}
     */
    gatewayCreateProducerCertificateAutomation(body) {
      return this.gatewayCreateProducerCertificateAutomationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GatewayCreateProducerCustom} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerCustomOutput} and HTTP response
     */
    gatewayCreateProducerCustomWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerCustomOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-custom', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GatewayCreateProducerCustom} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerCustomOutput}
     */
    gatewayCreateProducerCustom(opts) {
      return this.gatewayCreateProducerCustomWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerDockerhub} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerDockerhubOutput} and HTTP response
     */
    gatewayCreateProducerDockerhubWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerDockerhub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerDockerhubOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-dockerhub', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerDockerhub} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerDockerhubOutput}
     */
    gatewayCreateProducerDockerhub(body) {
      return this.gatewayCreateProducerDockerhubWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerEks} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerEksOutput} and HTTP response
     */
    gatewayCreateProducerEksWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerEks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerEksOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-eks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerEks} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerEksOutput}
     */
    gatewayCreateProducerEks(body) {
      return this.gatewayCreateProducerEksWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerGcp} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerGcpOutput} and HTTP response
     */
    gatewayCreateProducerGcpWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerGcp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerGcpOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-gcp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerGcp} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerGcpOutput}
     */
    gatewayCreateProducerGcp(body) {
      return this.gatewayCreateProducerGcpWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerGithub} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerGithubOutput} and HTTP response
     */
    gatewayCreateProducerGithubWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerGithub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerGithubOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-github', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerGithub} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerGithubOutput}
     */
    gatewayCreateProducerGithub(body) {
      return this.gatewayCreateProducerGithubWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerGke} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerGkeOutput} and HTTP response
     */
    gatewayCreateProducerGkeWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerGke");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerGkeOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-gke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerGke} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerGkeOutput}
     */
    gatewayCreateProducerGke(body) {
      return this.gatewayCreateProducerGkeWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerHanaDb} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerHanaDbOutput} and HTTP response
     */
    gatewayCreateProducerHanaDbWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerHanaDb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerHanaDbOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-hanadb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerHanaDb} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerHanaDbOutput}
     */
    gatewayCreateProducerHanaDb(body) {
      return this.gatewayCreateProducerHanaDbWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerLdap} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerLdapOutput} and HTTP response
     */
    gatewayCreateProducerLdapWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerLdap");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerLdapOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-ldap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerLdap} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerLdapOutput}
     */
    gatewayCreateProducerLdap(body) {
      return this.gatewayCreateProducerLdapWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerMSSQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerMSSQLOutput} and HTTP response
     */
    gatewayCreateProducerMSSQLWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerMSSQL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerMSSQLOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-mssql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerMSSQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerMSSQLOutput}
     */
    gatewayCreateProducerMSSQL(body) {
      return this.gatewayCreateProducerMSSQLWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerMongo} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerMongoOutput} and HTTP response
     */
    gatewayCreateProducerMongoWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerMongo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerMongoOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-mongo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerMongo} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerMongoOutput}
     */
    gatewayCreateProducerMongo(body) {
      return this.gatewayCreateProducerMongoWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerMySQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerMySQLOutput} and HTTP response
     */
    gatewayCreateProducerMySQLWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerMySQL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerMySQLOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-mysql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerMySQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerMySQLOutput}
     */
    gatewayCreateProducerMySQL(body) {
      return this.gatewayCreateProducerMySQLWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerNativeK8S} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerNativeK8SOutput} and HTTP response
     */
    gatewayCreateProducerNativeK8SWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerNativeK8S");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerNativeK8SOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-k8s', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerNativeK8S} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerNativeK8SOutput}
     */
    gatewayCreateProducerNativeK8S(body) {
      return this.gatewayCreateProducerNativeK8SWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerOracleDb} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerOracleDbOutput} and HTTP response
     */
    gatewayCreateProducerOracleDbWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerOracleDb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerOracleDbOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-oracle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerOracleDb} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerOracleDbOutput}
     */
    gatewayCreateProducerOracleDb(body) {
      return this.gatewayCreateProducerOracleDbWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerPing} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerPingOutput} and HTTP response
     */
    gatewayCreateProducerPingWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerPing");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerPingOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-ping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerPing} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerPingOutput}
     */
    gatewayCreateProducerPing(body) {
      return this.gatewayCreateProducerPingWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerPostgreSQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerPostgreSQLOutput} and HTTP response
     */
    gatewayCreateProducerPostgreSQLWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerPostgreSQL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerPostgreSQLOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-postgresql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerPostgreSQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerPostgreSQLOutput}
     */
    gatewayCreateProducerPostgreSQL(body) {
      return this.gatewayCreateProducerPostgreSQLWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerRabbitMQ} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerRabbitMQOutput} and HTTP response
     */
    gatewayCreateProducerRabbitMQWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerRabbitMQ");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerRabbitMQOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-rabbitmq', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerRabbitMQ} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerRabbitMQOutput}
     */
    gatewayCreateProducerRabbitMQ(body) {
      return this.gatewayCreateProducerRabbitMQWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerRdp} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerRdpOutput} and HTTP response
     */
    gatewayCreateProducerRdpWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerRdp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerRdpOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-rdp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerRdp} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerRdpOutput}
     */
    gatewayCreateProducerRdp(body) {
      return this.gatewayCreateProducerRdpWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerRedshift} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerRedshiftOutput} and HTTP response
     */
    gatewayCreateProducerRedshiftWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerRedshift");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerRedshiftOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-redshift', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerRedshift} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerRedshiftOutput}
     */
    gatewayCreateProducerRedshift(body) {
      return this.gatewayCreateProducerRedshiftWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayCreateProducerSnowflake} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCreateProducerSnowflakeOutput} and HTTP response
     */
    gatewayCreateProducerSnowflakeWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayCreateProducerSnowflake");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayCreateProducerSnowflakeOutput;
      return this.apiClient.callApi(
        '/gateway-create-producer-snowflake', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayCreateProducerSnowflake} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCreateProducerSnowflakeOutput}
     */
    gatewayCreateProducerSnowflake(body) {
      return this.gatewayCreateProducerSnowflakeWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayDeleteAllowedManagementAccess} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    gatewayDeleteAllowedManagementAccessWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayDeleteAllowedManagementAccess");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/gateway-delete-allowed-management-access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayDeleteAllowedManagementAccess} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    gatewayDeleteAllowedManagementAccess(body) {
      return this.gatewayDeleteAllowedManagementAccessWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayDeleteK8SAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayDeleteK8SAuthConfigOutput} and HTTP response
     */
    gatewayDeleteK8SAuthConfigWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayDeleteK8SAuthConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayDeleteK8SAuthConfigOutput;
      return this.apiClient.callApi(
        '/gateway-delete-k8s-auth-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayDeleteK8SAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayDeleteK8SAuthConfigOutput}
     */
    gatewayDeleteK8SAuthConfig(body) {
      return this.gatewayDeleteK8SAuthConfigWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayDeleteMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigrationDeleteOutput} and HTTP response
     */
    gatewayDeleteMigrationWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayDeleteMigration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayMigrationDeleteOutput;
      return this.apiClient.callApi(
        '/gateway-delete-migration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayDeleteMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigrationDeleteOutput}
     */
    gatewayDeleteMigration(body) {
      return this.gatewayDeleteMigrationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayDeleteProducer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayDeleteProducerOutput} and HTTP response
     */
    gatewayDeleteProducerWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayDeleteProducer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayDeleteProducerOutput;
      return this.apiClient.callApi(
        '/gateway-delete-producer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayDeleteProducer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayDeleteProducerOutput}
     */
    gatewayDeleteProducer(body) {
      return this.gatewayDeleteProducerWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayGetConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AkeylessGatewayConfig} and HTTP response
     */
    gatewayGetConfigWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayGetConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AkeylessGatewayConfig;
      return this.apiClient.callApi(
        '/gateway-get-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayGetConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AkeylessGatewayConfig}
     */
    gatewayGetConfig(body) {
      return this.gatewayGetConfigWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayGetK8SAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayGetK8SAuthConfigOutput} and HTTP response
     */
    gatewayGetK8SAuthConfigWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayGetK8SAuthConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayGetK8SAuthConfigOutput;
      return this.apiClient.callApi(
        '/gateway-get-k8s-auth-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayGetK8SAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayGetK8SAuthConfigOutput}
     */
    gatewayGetK8SAuthConfig(body) {
      return this.gatewayGetK8SAuthConfigWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayGetLdapAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayGetLdapAuthConfigOutput} and HTTP response
     */
    gatewayGetLdapAuthConfigWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayGetLdapAuthConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayGetLdapAuthConfigOutput;
      return this.apiClient.callApi(
        '/gateway-get-ldap-auth-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayGetLdapAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayGetLdapAuthConfigOutput}
     */
    gatewayGetLdapAuthConfig(body) {
      return this.gatewayGetLdapAuthConfigWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayGetMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigrationGetOutput} and HTTP response
     */
    gatewayGetMigrationWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayGetMigration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayMigrationGetOutput;
      return this.apiClient.callApi(
        '/gateway-get-migration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayGetMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigrationGetOutput}
     */
    gatewayGetMigration(body) {
      return this.gatewayGetMigrationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayGetProducer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DSProducerDetails} and HTTP response
     */
    gatewayGetProducerWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayGetProducer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DSProducerDetails;
      return this.apiClient.callApi(
        '/gateway-get-producer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayGetProducer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DSProducerDetails}
     */
    gatewayGetProducer(body) {
      return this.gatewayGetProducerWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayGetTmpUsers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TmpUserData>} and HTTP response
     */
    gatewayGetTmpUsersWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayGetTmpUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TmpUserData];
      return this.apiClient.callApi(
        '/gateway-get-producer-tmp-creds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayGetTmpUsers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TmpUserData>}
     */
    gatewayGetTmpUsers(body) {
      return this.gatewayGetTmpUsersWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayListAllowedManagementAccess} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSubAdminsListReplyObj} and HTTP response
     */
    gatewayListAllowedManagementAccessWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayListAllowedManagementAccess");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSubAdminsListReplyObj;
      return this.apiClient.callApi(
        '/gateway-list-allowed-management-access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayListAllowedManagementAccess} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSubAdminsListReplyObj}
     */
    gatewayListAllowedManagementAccess(body) {
      return this.gatewayListAllowedManagementAccessWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayListMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigrationListOutput} and HTTP response
     */
    gatewayListMigrationWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayListMigration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayMigrationListOutput;
      return this.apiClient.callApi(
        '/gateway-list-migration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayListMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigrationListOutput}
     */
    gatewayListMigration(body) {
      return this.gatewayListMigrationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayListProducers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProducersListReplyObj} and HTTP response
     */
    gatewayListProducersWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayListProducers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetProducersListReplyObj;
      return this.apiClient.callApi(
        '/gateway-list-producers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayListProducers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProducersListReplyObj}
     */
    gatewayListProducers(body) {
      return this.gatewayListProducersWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GatewayMigratePersonalItems} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigratePersonalItemsOutput} and HTTP response
     */
    gatewayMigratePersonalItemsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayMigratePersonalItemsOutput;
      return this.apiClient.callApi(
        '/gateway-migrate-personal-items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GatewayMigratePersonalItems} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigratePersonalItemsOutput}
     */
    gatewayMigratePersonalItems(opts) {
      return this.gatewayMigratePersonalItemsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayRevokeTmpUsers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    gatewayRevokeTmpUsersWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayRevokeTmpUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/gateway-revoke-producer-tmp-creds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayRevokeTmpUsers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    gatewayRevokeTmpUsers(body) {
      return this.gatewayRevokeTmpUsersWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayStartProducer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayStartProducerOutput} and HTTP response
     */
    gatewayStartProducerWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayStartProducer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayStartProducerOutput;
      return this.apiClient.callApi(
        '/gateway-start-producer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayStartProducer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayStartProducerOutput}
     */
    gatewayStartProducer(body) {
      return this.gatewayStartProducerWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayStatusMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MigrationStatusReplyObj} and HTTP response
     */
    gatewayStatusMigrationWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayStatusMigration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MigrationStatusReplyObj;
      return this.apiClient.callApi(
        '/gateway-migration-status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayStatusMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MigrationStatusReplyObj}
     */
    gatewayStatusMigration(body) {
      return this.gatewayStatusMigrationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayStopProducer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayStopProducerOutput} and HTTP response
     */
    gatewayStopProducerWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayStopProducer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayStopProducerOutput;
      return this.apiClient.callApi(
        '/gateway-stop-producer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayStopProducer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayStopProducerOutput}
     */
    gatewayStopProducer(body) {
      return this.gatewayStopProducerWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewaySyncMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigrationSyncOutput} and HTTP response
     */
    gatewaySyncMigrationWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewaySyncMigration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayMigrationSyncOutput;
      return this.apiClient.callApi(
        '/gateway-sync-migration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewaySyncMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigrationSyncOutput}
     */
    gatewaySyncMigration(body) {
      return this.gatewaySyncMigrationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateItemOutput} and HTTP response
     */
    gatewayUpdateItemWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateItemOutput;
      return this.apiClient.callApi(
        '/gateway-update-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateItemOutput}
     */
    gatewayUpdateItem(body) {
      return this.gatewayUpdateItemWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateK8SAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateK8SAuthConfigOutput} and HTTP response
     */
    gatewayUpdateK8SAuthConfigWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateK8SAuthConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateK8SAuthConfigOutput;
      return this.apiClient.callApi(
        '/gateway-update-k8s-auth-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateK8SAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateK8SAuthConfigOutput}
     */
    gatewayUpdateK8SAuthConfig(body) {
      return this.gatewayUpdateK8SAuthConfigWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateLdapAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateLdapAuthConfigOutput} and HTTP response
     */
    gatewayUpdateLdapAuthConfigWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateLdapAuthConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateLdapAuthConfigOutput;
      return this.apiClient.callApi(
        '/gateway-update-ldap-auth-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateLdapAuthConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateLdapAuthConfigOutput}
     */
    gatewayUpdateLdapAuthConfig(body) {
      return this.gatewayUpdateLdapAuthConfigWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayMigrationUpdateOutput} and HTTP response
     */
    gatewayUpdateMigrationWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateMigration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayMigrationUpdateOutput;
      return this.apiClient.callApi(
        '/gateway-update-migration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateMigration} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayMigrationUpdateOutput}
     */
    gatewayUpdateMigration(body) {
      return this.gatewayUpdateMigrationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerArtifactory} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerArtifactoryOutput} and HTTP response
     */
    gatewayUpdateProducerArtifactoryWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerArtifactory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerArtifactoryOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-artifactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerArtifactory} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerArtifactoryOutput}
     */
    gatewayUpdateProducerArtifactory(body) {
      return this.gatewayUpdateProducerArtifactoryWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerAws} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerAwsOutput} and HTTP response
     */
    gatewayUpdateProducerAwsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerAws");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerAwsOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-aws', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerAws} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerAwsOutput}
     */
    gatewayUpdateProducerAws(body) {
      return this.gatewayUpdateProducerAwsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerAzure} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerAzureOutput} and HTTP response
     */
    gatewayUpdateProducerAzureWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerAzure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerAzureOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-azure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerAzure} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerAzureOutput}
     */
    gatewayUpdateProducerAzure(body) {
      return this.gatewayUpdateProducerAzureWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerCassandra} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerCassandraOutput} and HTTP response
     */
    gatewayUpdateProducerCassandraWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerCassandra");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerCassandraOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-cassandra', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerCassandra} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerCassandraOutput}
     */
    gatewayUpdateProducerCassandra(body) {
      return this.gatewayUpdateProducerCassandraWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerCertificateAutomation} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerCertificateAutomationOutput} and HTTP response
     */
    gatewayUpdateProducerCertificateAutomationWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerCertificateAutomation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerCertificateAutomationOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-certificate-automation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerCertificateAutomation} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerCertificateAutomationOutput}
     */
    gatewayUpdateProducerCertificateAutomation(body) {
      return this.gatewayUpdateProducerCertificateAutomationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GatewayUpdateProducerCustom} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerCustomOutput} and HTTP response
     */
    gatewayUpdateProducerCustomWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerCustomOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-custom', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/GatewayUpdateProducerCustom} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerCustomOutput}
     */
    gatewayUpdateProducerCustom(opts) {
      return this.gatewayUpdateProducerCustomWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerDockerhub} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerDockerhubOutput} and HTTP response
     */
    gatewayUpdateProducerDockerhubWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerDockerhub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerDockerhubOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-dockerhub', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerDockerhub} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerDockerhubOutput}
     */
    gatewayUpdateProducerDockerhub(body) {
      return this.gatewayUpdateProducerDockerhubWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerEks} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerEksOutput} and HTTP response
     */
    gatewayUpdateProducerEksWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerEks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerEksOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-eks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerEks} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerEksOutput}
     */
    gatewayUpdateProducerEks(body) {
      return this.gatewayUpdateProducerEksWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerGcp} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerGcpOutput} and HTTP response
     */
    gatewayUpdateProducerGcpWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerGcp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerGcpOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-gcp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerGcp} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerGcpOutput}
     */
    gatewayUpdateProducerGcp(body) {
      return this.gatewayUpdateProducerGcpWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerGithub} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerGithubOutput} and HTTP response
     */
    gatewayUpdateProducerGithubWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerGithub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerGithubOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-github', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerGithub} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerGithubOutput}
     */
    gatewayUpdateProducerGithub(body) {
      return this.gatewayUpdateProducerGithubWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerGke} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerGkeOutput} and HTTP response
     */
    gatewayUpdateProducerGkeWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerGke");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerGkeOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-gke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerGke} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerGkeOutput}
     */
    gatewayUpdateProducerGke(body) {
      return this.gatewayUpdateProducerGkeWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerHanaDb} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerHanaDbOutput} and HTTP response
     */
    gatewayUpdateProducerHanaDbWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerHanaDb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerHanaDbOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-hana', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerHanaDb} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerHanaDbOutput}
     */
    gatewayUpdateProducerHanaDb(body) {
      return this.gatewayUpdateProducerHanaDbWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerLdap} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerLdapOutput} and HTTP response
     */
    gatewayUpdateProducerLdapWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerLdap");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerLdapOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-ldap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerLdap} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerLdapOutput}
     */
    gatewayUpdateProducerLdap(body) {
      return this.gatewayUpdateProducerLdapWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerMSSQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerMSSQLOutput} and HTTP response
     */
    gatewayUpdateProducerMSSQLWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerMSSQL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerMSSQLOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-mssql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerMSSQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerMSSQLOutput}
     */
    gatewayUpdateProducerMSSQL(body) {
      return this.gatewayUpdateProducerMSSQLWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerMongo} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerMongoOutput} and HTTP response
     */
    gatewayUpdateProducerMongoWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerMongo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerMongoOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-mongo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerMongo} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerMongoOutput}
     */
    gatewayUpdateProducerMongo(body) {
      return this.gatewayUpdateProducerMongoWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerMySQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerMySQLOutput} and HTTP response
     */
    gatewayUpdateProducerMySQLWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerMySQL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerMySQLOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-mysql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerMySQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerMySQLOutput}
     */
    gatewayUpdateProducerMySQL(body) {
      return this.gatewayUpdateProducerMySQLWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerNativeK8S} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerNativeK8SOutput} and HTTP response
     */
    gatewayUpdateProducerNativeK8SWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerNativeK8S");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerNativeK8SOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-k8s', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerNativeK8S} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerNativeK8SOutput}
     */
    gatewayUpdateProducerNativeK8S(body) {
      return this.gatewayUpdateProducerNativeK8SWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerOracleDb} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerOracleDbOutput} and HTTP response
     */
    gatewayUpdateProducerOracleDbWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerOracleDb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerOracleDbOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-oracle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerOracleDb} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerOracleDbOutput}
     */
    gatewayUpdateProducerOracleDb(body) {
      return this.gatewayUpdateProducerOracleDbWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerPing} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerPingOutput} and HTTP response
     */
    gatewayUpdateProducerPingWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerPing");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerPingOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-ping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerPing} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerPingOutput}
     */
    gatewayUpdateProducerPing(body) {
      return this.gatewayUpdateProducerPingWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerPostgreSQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerPostgreSQLOutput} and HTTP response
     */
    gatewayUpdateProducerPostgreSQLWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerPostgreSQL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerPostgreSQLOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-postgresql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerPostgreSQL} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerPostgreSQLOutput}
     */
    gatewayUpdateProducerPostgreSQL(body) {
      return this.gatewayUpdateProducerPostgreSQLWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerRabbitMQ} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerRabbitMQOutput} and HTTP response
     */
    gatewayUpdateProducerRabbitMQWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerRabbitMQ");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerRabbitMQOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-rabbitmq', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerRabbitMQ} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerRabbitMQOutput}
     */
    gatewayUpdateProducerRabbitMQ(body) {
      return this.gatewayUpdateProducerRabbitMQWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerRdp} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerRdpOutput} and HTTP response
     */
    gatewayUpdateProducerRdpWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerRdp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerRdpOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-rdp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerRdp} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerRdpOutput}
     */
    gatewayUpdateProducerRdp(body) {
      return this.gatewayUpdateProducerRdpWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerRedshift} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerRedshiftOutput} and HTTP response
     */
    gatewayUpdateProducerRedshiftWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerRedshift");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerRedshiftOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-redshift', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerRedshift} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerRedshiftOutput}
     */
    gatewayUpdateProducerRedshift(body) {
      return this.gatewayUpdateProducerRedshiftWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateProducerSnowflake} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateProducerSnowflakeOutput} and HTTP response
     */
    gatewayUpdateProducerSnowflakeWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateProducerSnowflake");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateProducerSnowflakeOutput;
      return this.apiClient.callApi(
        '/gateway-update-producer-snowflake', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateProducerSnowflake} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateProducerSnowflakeOutput}
     */
    gatewayUpdateProducerSnowflake(body) {
      return this.gatewayUpdateProducerSnowflakeWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateTlsCert} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayUpdateTlsCertOutput} and HTTP response
     */
    gatewayUpdateTlsCertWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateTlsCert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayUpdateTlsCertOutput;
      return this.apiClient.callApi(
        '/gateway-update-tls-cert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateTlsCert} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayUpdateTlsCertOutput}
     */
    gatewayUpdateTlsCert(body) {
      return this.gatewayUpdateTlsCertWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GatewayUpdateTmpUsers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    gatewayUpdateTmpUsersWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling gatewayUpdateTmpUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/gateway-update-producer-tmp-creds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GatewayUpdateTmpUsers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    gatewayUpdateTmpUsers(body) {
      return this.gatewayUpdateTmpUsersWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    getAccountLogoWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/get-account-logo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    getAccountLogo() {
      return this.getAccountLogoWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetAccountSettings} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAccountSettingsCommandOutput} and HTTP response
     */
    getAccountSettingsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getAccountSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAccountSettingsCommandOutput;
      return this.apiClient.callApi(
        '/get-account-settings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetAccountSettings} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAccountSettingsCommandOutput}
     */
    getAccountSettings(body) {
      return this.getAccountSettingsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetAuthMethod} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthMethod} and HTTP response
     */
    getAuthMethodWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getAuthMethod");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthMethod;
      return this.apiClient.callApi(
        '/get-auth-method', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetAuthMethod} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthMethod}
     */
    getAuthMethod(body) {
      return this.getAuthMethodWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetCertificateValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCertificateValueOutput} and HTTP response
     */
    getCertificateValueWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getCertificateValue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetCertificateValueOutput;
      return this.apiClient.callApi(
        '/get-certificate-value', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetCertificateValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCertificateValueOutput}
     */
    getCertificateValue(body) {
      return this.getCertificateValueWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetDynamicSecretValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    getDynamicSecretValueWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getDynamicSecretValue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/get-dynamic-secret-value', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetDynamicSecretValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    getDynamicSecretValue(body) {
      return this.getDynamicSecretValueWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetEventForwarder} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetEventForwarderOutput} and HTTP response
     */
    getEventForwarderWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getEventForwarder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetEventForwarderOutput;
      return this.apiClient.callApi(
        '/get-event-forwarder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetEventForwarder} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetEventForwarderOutput}
     */
    getEventForwarder(body) {
      return this.getEventForwarderWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetKubeExecCreds} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetKubeExecCredsOutput} and HTTP response
     */
    getKubeExecCredsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getKubeExecCreds");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetKubeExecCredsOutput;
      return this.apiClient.callApi(
        '/get-kube-exec-creds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetKubeExecCreds} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetKubeExecCredsOutput}
     */
    getKubeExecCreds(body) {
      return this.getKubeExecCredsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetPKICertificate} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetPKICertificateOutput} and HTTP response
     */
    getPKICertificateWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getPKICertificate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPKICertificateOutput;
      return this.apiClient.callApi(
        '/get-pki-certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetPKICertificate} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetPKICertificateOutput}
     */
    getPKICertificate(body) {
      return this.getPKICertificateWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetRSAPublic} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetRSAPublicOutput} and HTTP response
     */
    getRSAPublicWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getRSAPublic");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetRSAPublicOutput;
      return this.apiClient.callApi(
        '/get-rsa-public', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetRSAPublic} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetRSAPublicOutput}
     */
    getRSAPublic(body) {
      return this.getRSAPublicWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetRole} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Role} and HTTP response
     */
    getRoleWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/get-role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetRole} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Role}
     */
    getRole(body) {
      return this.getRoleWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetRotatedSecretValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: Object}>} and HTTP response
     */
    getRotatedSecretValueWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getRotatedSecretValue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/get-rotated-secret-value', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetRotatedSecretValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: Object}>}
     */
    getRotatedSecretValue(body) {
      return this.getRotatedSecretValueWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetSSHCertificate} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSSHCertificateOutput} and HTTP response
     */
    getSSHCertificateWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getSSHCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSSHCertificateOutput;
      return this.apiClient.callApi(
        '/get-ssh-certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetSSHCertificate} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSSHCertificateOutput}
     */
    getSSHCertificate(body) {
      return this.getSSHCertificateWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetSecretValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    getSecretValueWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getSecretValue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/get-secret-value', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetSecretValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    getSecretValue(body) {
      return this.getSecretValueWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetTags} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    getTagsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getTags");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/get-tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetTags} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    getTags(body) {
      return this.getTagsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Target} and HTTP response
     */
    getTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Target;
      return this.apiClient.callApi(
        '/get-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Target}
     */
    getTarget(body) {
      return this.getTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/GetTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTargetDetailsOutput} and HTTP response
     */
    getTargetDetailsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTargetDetailsOutput;
      return this.apiClient.callApi(
        '/get-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/GetTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTargetDetailsOutput}
     */
    getTargetDetails(body) {
      return this.getTargetDetailsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipClientDeleteRule} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KMIPClientUpdateResponse} and HTTP response
     */
    kmipClientDeleteRuleWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KMIPClientUpdateResponse;
      return this.apiClient.callApi(
        '/kmip-client-delete-rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipClientDeleteRule} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KMIPClientUpdateResponse}
     */
    kmipClientDeleteRule(opts) {
      return this.kmipClientDeleteRuleWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipClientSetRule} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KMIPClientUpdateResponse} and HTTP response
     */
    kmipClientSetRuleWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KMIPClientUpdateResponse;
      return this.apiClient.callApi(
        '/kmip-client-set-rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipClientSetRule} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KMIPClientUpdateResponse}
     */
    kmipClientSetRule(opts) {
      return this.kmipClientSetRuleWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipCreateClient} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KmipCreateClientOutput} and HTTP response
     */
    kmipCreateClientWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KmipCreateClientOutput;
      return this.apiClient.callApi(
        '/kmip-create-client', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipCreateClient} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KmipCreateClientOutput}
     */
    kmipCreateClient(opts) {
      return this.kmipCreateClientWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDeleteClient} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    kmipDeleteClientWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/kmip-delete-client', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDeleteClient} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    kmipDeleteClient(opts) {
      return this.kmipDeleteClientWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDeleteServer} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    kmipDeleteServerWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/kmip-delete-environment', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDeleteServer} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    kmipDeleteServer(opts) {
      return this.kmipDeleteServerWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDescribeClient} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KMIPClientGetResponse} and HTTP response
     */
    kmipDescribeClientWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KMIPClientGetResponse;
      return this.apiClient.callApi(
        '/kmip-get-client', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDescribeClient} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KMIPClientGetResponse}
     */
    kmipDescribeClient(opts) {
      return this.kmipDescribeClientWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDescribeServer} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KmipDescribeServerOutput} and HTTP response
     */
    kmipDescribeServerWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KmipDescribeServerOutput;
      return this.apiClient.callApi(
        '/kmip-get-environment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipDescribeServer} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KmipDescribeServerOutput}
     */
    kmipDescribeServer(opts) {
      return this.kmipDescribeServerWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipListClients} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KMIPClientListResponse} and HTTP response
     */
    kmipListClientsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KMIPClientListResponse;
      return this.apiClient.callApi(
        '/kmip-list-clients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipListClients} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KMIPClientListResponse}
     */
    kmipListClients(opts) {
      return this.kmipListClientsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipMoveServer} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KmipMoveServerOutput} and HTTP response
     */
    kmipMoveServerWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KmipMoveServerOutput;
      return this.apiClient.callApi(
        '/kmip-move-environment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipMoveServer} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KmipMoveServerOutput}
     */
    kmipMoveServer(opts) {
      return this.kmipMoveServerWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipRenewClientCertificate} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KmipRenewClientCertificateOutput} and HTTP response
     */
    kmipRenewClientCertificateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KmipRenewClientCertificateOutput;
      return this.apiClient.callApi(
        '/kmip-renew-client', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipRenewClientCertificate} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KmipRenewClientCertificateOutput}
     */
    kmipRenewClientCertificate(opts) {
      return this.kmipRenewClientCertificateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipRenewServerCertificate} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KmipRenewServerCertificateOutput} and HTTP response
     */
    kmipRenewServerCertificateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KmipRenewServerCertificateOutput;
      return this.apiClient.callApi(
        '/kmip-renew-environment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipRenewServerCertificate} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KmipRenewServerCertificateOutput}
     */
    kmipRenewServerCertificate(opts) {
      return this.kmipRenewServerCertificateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipServerSetup} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KMIPEnvironmentCreateResponse} and HTTP response
     */
    kmipServerSetupWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KMIPEnvironmentCreateResponse;
      return this.apiClient.callApi(
        '/kmip-create-environment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipServerSetup} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KMIPEnvironmentCreateResponse}
     */
    kmipServerSetup(opts) {
      return this.kmipServerSetupWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipSetServerState} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KmipSetServerStateOutput} and HTTP response
     */
    kmipSetServerStateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KmipSetServerStateOutput;
      return this.apiClient.callApi(
        '/kmip-set-environment-state', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/KmipSetServerState} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KmipSetServerStateOutput}
     */
    kmipSetServerState(opts) {
      return this.kmipSetServerStateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ListAuthMethods} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListAuthMethodsOutput} and HTTP response
     */
    listAuthMethodsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listAuthMethods");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAuthMethodsOutput;
      return this.apiClient.callApi(
        '/list-auth-methods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ListAuthMethods} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListAuthMethodsOutput}
     */
    listAuthMethods(body) {
      return this.listAuthMethodsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ListGateways} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewaysListResponse} and HTTP response
     */
    listGatewaysWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listGateways");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewaysListResponse;
      return this.apiClient.callApi(
        '/list-gateways', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ListGateways} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewaysListResponse}
     */
    listGateways(body) {
      return this.listGatewaysWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ListItems} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListItemsInPathOutput} and HTTP response
     */
    listItemsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listItems");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListItemsInPathOutput;
      return this.apiClient.callApi(
        '/list-items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ListItems} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListItemsInPathOutput}
     */
    listItems(body) {
      return this.listItemsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ListRoles} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListRolesOutput} and HTTP response
     */
    listRolesWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listRoles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListRolesOutput;
      return this.apiClient.callApi(
        '/list-roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ListRoles} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListRolesOutput}
     */
    listRoles(body) {
      return this.listRolesWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ListSRABastions} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BastionsList} and HTTP response
     */
    listSRABastionsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listSRABastions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BastionsList;
      return this.apiClient.callApi(
        '/list-sra-bastions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ListSRABastions} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BastionsList}
     */
    listSRABastions(body) {
      return this.listSRABastionsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ListSharedItems} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    listSharedItemsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listSharedItems");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/list-shared-items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ListSharedItems} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    listSharedItems(body) {
      return this.listSharedItemsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ListTargets} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTargetsOutput} and HTTP response
     */
    listTargetsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listTargets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTargetsOutput;
      return this.apiClient.callApi(
        '/list-targets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ListTargets} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTargetsOutput}
     */
    listTargets(body) {
      return this.listTargetsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/MoveObjects} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    moveObjectsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling moveObjects");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/move-objects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/MoveObjects} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    moveObjects(body) {
      return this.moveObjectsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/RawCreds} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SystemAccessCredentialsReplyObj} and HTTP response
     */
    rawCredsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SystemAccessCredentialsReplyObj;
      return this.apiClient.callApi(
        '/raw-creds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/RawCreds} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SystemAccessCredentialsReplyObj}
     */
    rawCreds(opts) {
      return this.rawCredsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RefreshKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RefreshKeyOutput} and HTTP response
     */
    refreshKeyWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling refreshKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RefreshKeyOutput;
      return this.apiClient.callApi(
        '/refresh-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RefreshKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RefreshKeyOutput}
     */
    refreshKey(body) {
      return this.refreshKeyWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RequestAccess} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RequestAccessOutput} and HTTP response
     */
    requestAccessWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling requestAccess");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RequestAccessOutput;
      return this.apiClient.callApi(
        '/request-access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RequestAccess} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RequestAccessOutput}
     */
    requestAccess(body) {
      return this.requestAccessWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ReverseRBAC} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReverseRBACOutput} and HTTP response
     */
    reverseRBACWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling reverseRBAC");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReverseRBACOutput;
      return this.apiClient.callApi(
        '/reverse-rbac', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ReverseRBAC} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ReverseRBACOutput}
     */
    reverseRBAC(body) {
      return this.reverseRBACWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    revokeCredsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/revoke-creds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    revokeCreds() {
      return this.revokeCredsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RollbackSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RollbackSecretOutput} and HTTP response
     */
    rollbackSecretWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling rollbackSecret");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RollbackSecretOutput;
      return this.apiClient.callApi(
        '/rollback-secret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RollbackSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RollbackSecretOutput}
     */
    rollbackSecret(body) {
      return this.rollbackSecretWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateRotationSettings} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotateKeyOutput} and HTTP response
     */
    rotateKeyWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling rotateKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotateKeyOutput;
      return this.apiClient.callApi(
        '/rotate-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateRotationSettings} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotateKeyOutput}
     */
    rotateKey(body) {
      return this.rotateKeyWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/RotateSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotatedSecretOutput} and HTTP response
     */
    rotateSecretWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling rotateSecret");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RotatedSecretOutput;
      return this.apiClient.callApi(
        '/gateway-rotate-secret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/RotateSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotatedSecretOutput}
     */
    rotateSecret(body) {
      return this.rotateSecretWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/SetItemState} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    setItemStateWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setItemState");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/set-item-state', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/SetItemState} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    setItemState(body) {
      return this.setItemStateWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/SetRoleRule} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    setRoleRuleWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setRoleRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/set-role-rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/SetRoleRule} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    setRoleRule(body) {
      return this.setRoleRuleWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ShareItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    shareItemWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling shareItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/share-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ShareItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    shareItem(body) {
      return this.shareItemWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/SignGPG} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignGPGOutput} and HTTP response
     */
    signGPGWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling signGPG");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignGPGOutput;
      return this.apiClient.callApi(
        '/sign-gpg', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/SignGPG} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignGPGOutput}
     */
    signGPG(body) {
      return this.signGPGWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/SignJWTWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignJWTOutput} and HTTP response
     */
    signJWTWithClassicKeyWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling signJWTWithClassicKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignJWTOutput;
      return this.apiClient.callApi(
        '/sign-jwt-with-classic-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/SignJWTWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignJWTOutput}
     */
    signJWTWithClassicKey(body) {
      return this.signJWTWithClassicKeyWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/SignPKCS1} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignPKCS1Output} and HTTP response
     */
    signPKCS1WithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling signPKCS1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignPKCS1Output;
      return this.apiClient.callApi(
        '/sign-pkcs1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/SignPKCS1} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignPKCS1Output}
     */
    signPKCS1(body) {
      return this.signPKCS1WithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/SignPKICertWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignPKICertOutput} and HTTP response
     */
    signPKICertWithClassicKeyWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling signPKICertWithClassicKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignPKICertOutput;
      return this.apiClient.callApi(
        '/sign-pki-cert-with-classic-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/SignPKICertWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignPKICertOutput}
     */
    signPKICertWithClassicKey(body) {
      return this.signPKICertWithClassicKeyWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/StaticCredsAuth} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StaticCredsAuthOutput} and HTTP response
     */
    staticCredsAuthWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling staticCredsAuth");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StaticCredsAuthOutput;
      return this.apiClient.callApi(
        '/static-creds-auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/StaticCredsAuth} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StaticCredsAuthOutput}
     */
    staticCredsAuth(body) {
      return this.staticCredsAuthWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/Tokenize} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenizeOutput} and HTTP response
     */
    tokenizeWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tokenize");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenizeOutput;
      return this.apiClient.callApi(
        '/tokenize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/Tokenize} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenizeOutput}
     */
    tokenize(body) {
      return this.tokenizeWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UidCreateChildToken} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UidCreateChildTokenOutput} and HTTP response
     */
    uidCreateChildTokenWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uidCreateChildToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UidCreateChildTokenOutput;
      return this.apiClient.callApi(
        '/uid-create-child-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UidCreateChildToken} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UidCreateChildTokenOutput}
     */
    uidCreateChildToken(body) {
      return this.uidCreateChildTokenWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UidGenerateToken} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UidGenerateTokenOutput} and HTTP response
     */
    uidGenerateTokenWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uidGenerateToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UidGenerateTokenOutput;
      return this.apiClient.callApi(
        '/uid-generate-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UidGenerateToken} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UidGenerateTokenOutput}
     */
    uidGenerateToken(body) {
      return this.uidGenerateTokenWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UidListChildren} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UniversalIdentityDetails} and HTTP response
     */
    uidListChildrenWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uidListChildren");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UniversalIdentityDetails;
      return this.apiClient.callApi(
        '/uid-list-children', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UidListChildren} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UniversalIdentityDetails}
     */
    uidListChildren(body) {
      return this.uidListChildrenWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UidRevokeToken} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    uidRevokeTokenWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uidRevokeToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/uid-revoke-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UidRevokeToken} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    uidRevokeToken(body) {
      return this.uidRevokeTokenWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UidRotateToken} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UidRotateTokenOutput} and HTTP response
     */
    uidRotateTokenWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uidRotateToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UidRotateTokenOutput;
      return this.apiClient.callApi(
        '/uid-rotate-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UidRotateToken} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UidRotateTokenOutput}
     */
    uidRotateToken(body) {
      return this.uidRotateTokenWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAWSTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateAWSTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAWSTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-aws-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAWSTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateAWSTarget(body) {
      return this.updateAWSTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAWSTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */
    updateAWSTargetDetailsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAWSTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-aws-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAWSTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */
    updateAWSTargetDetails(body) {
      return this.updateAWSTargetDetailsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAccountSettings} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateAccountSettingsOutput} and HTTP response
     */
    updateAccountSettingsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAccountSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAccountSettingsOutput;
      return this.apiClient.callApi(
        '/update-account-settings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAccountSettings} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateAccountSettingsOutput}
     */
    updateAccountSettings(body) {
      return this.updateAccountSettingsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateArtifactoryTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateArtifactoryTargetOutput} and HTTP response
     */
    updateArtifactoryTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateArtifactoryTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateArtifactoryTargetOutput;
      return this.apiClient.callApi(
        '/update-artifactory-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateArtifactoryTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateArtifactoryTargetOutput}
     */
    updateArtifactoryTarget(body) {
      return this.updateArtifactoryTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAssoc} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateAssocWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAssoc");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-assoc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAssoc} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateAssoc(body) {
      return this.updateAssocWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethod} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateAuthMethodOutput} and HTTP response
     */
    updateAuthMethodWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethod");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAuthMethodOutput;
      return this.apiClient.callApi(
        '/update-auth-method', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethod} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateAuthMethodOutput}
     */
    updateAuthMethod(body) {
      return this.updateAuthMethodWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodAWSIAM} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateAuthMethodAWSIAMWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethodAWSIAM");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-auth-method-aws-iam', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodAWSIAM} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateAuthMethodAWSIAM(body) {
      return this.updateAuthMethodAWSIAMWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodAzureAD} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateAuthMethodAzureADWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethodAzureAD");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-auth-method-azure-ad', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodAzureAD} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateAuthMethodAzureAD(body) {
      return this.updateAuthMethodAzureADWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodCert} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateAuthMethodCertOutput} and HTTP response
     */
    updateAuthMethodCertWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethodCert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAuthMethodCertOutput;
      return this.apiClient.callApi(
        '/update-auth-method-cert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodCert} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateAuthMethodCertOutput}
     */
    updateAuthMethodCert(body) {
      return this.updateAuthMethodCertWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodGCP} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateAuthMethodGCPWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethodGCP");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-auth-method-gcp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodGCP} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateAuthMethodGCP(body) {
      return this.updateAuthMethodGCPWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodK8S} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateAuthMethodK8SOutput} and HTTP response
     */
    updateAuthMethodK8SWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethodK8S");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAuthMethodK8SOutput;
      return this.apiClient.callApi(
        '/update-auth-method-k8s', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodK8S} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateAuthMethodK8SOutput}
     */
    updateAuthMethodK8S(body) {
      return this.updateAuthMethodK8SWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodLDAP} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateAuthMethodLDAPOutput} and HTTP response
     */
    updateAuthMethodLDAPWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethodLDAP");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAuthMethodLDAPOutput;
      return this.apiClient.callApi(
        '/update-auth-method-ldap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodLDAP} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateAuthMethodLDAPOutput}
     */
    updateAuthMethodLDAP(body) {
      return this.updateAuthMethodLDAPWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodOAuth2} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateAuthMethodOAuth2WithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethodOAuth2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-auth-method-oauth2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodOAuth2} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateAuthMethodOAuth2(body) {
      return this.updateAuthMethodOAuth2WithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodOIDC} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateAuthMethodOIDCWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethodOIDC");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-auth-method-oidc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodOIDC} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateAuthMethodOIDC(body) {
      return this.updateAuthMethodOIDCWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodSAML} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateAuthMethodSAMLWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethodSAML");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-auth-method-saml', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodSAML} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateAuthMethodSAML(body) {
      return this.updateAuthMethodSAMLWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAuthMethodUniversalIdentity} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateAuthMethodUniversalIdentityWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAuthMethodUniversalIdentity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-auth-method-universal-identity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAuthMethodUniversalIdentity} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateAuthMethodUniversalIdentity(body) {
      return this.updateAuthMethodUniversalIdentityWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateAzureTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateAzureTargetOutput} and HTTP response
     */
    updateAzureTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAzureTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAzureTargetOutput;
      return this.apiClient.callApi(
        '/update-azure-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateAzureTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateAzureTargetOutput}
     */
    updateAzureTarget(body) {
      return this.updateAzureTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateCertificateValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateCertificateOutput} and HTTP response
     */
    updateCertificateValueWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCertificateValue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateCertificateOutput;
      return this.apiClient.callApi(
        '/update-certificate-value', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateCertificateValue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateCertificateOutput}
     */
    updateCertificateValue(body) {
      return this.updateCertificateValueWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateDBTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateDBTargetOutput} and HTTP response
     */
    updateDBTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDBTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDBTargetOutput;
      return this.apiClient.callApi(
        '/update-db-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateDBTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateDBTargetOutput}
     */
    updateDBTarget(body) {
      return this.updateDBTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateDBTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */
    updateDBTargetDetailsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDBTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-db-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateDBTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */
    updateDBTargetDetails(body) {
      return this.updateDBTargetDetailsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateDockerhubTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateDockerhubTargetOutput} and HTTP response
     */
    updateDockerhubTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDockerhubTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDockerhubTargetOutput;
      return this.apiClient.callApi(
        '/update-dockerhub-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateDockerhubTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateDockerhubTargetOutput}
     */
    updateDockerhubTarget(body) {
      return this.updateDockerhubTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateEKSTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateEKSTargetOutput} and HTTP response
     */
    updateEKSTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateEKSTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateEKSTargetOutput;
      return this.apiClient.callApi(
        '/update-eks-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateEKSTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateEKSTargetOutput}
     */
    updateEKSTarget(body) {
      return this.updateEKSTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateEventForwarder} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateEventForwarderWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateEventForwarder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-event-forwarder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateEventForwarder} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateEventForwarder(body) {
      return this.updateEventForwarderWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateGKETarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateGKETargetOutput} and HTTP response
     */
    updateGKETargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateGKETarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGKETargetOutput;
      return this.apiClient.callApi(
        '/update-gke-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateGKETarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateGKETargetOutput}
     */
    updateGKETarget(body) {
      return this.updateGKETargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateGcpTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateGcpTargetOutput} and HTTP response
     */
    updateGcpTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateGcpTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGcpTargetOutput;
      return this.apiClient.callApi(
        '/update-gcp-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateGcpTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateGcpTargetOutput}
     */
    updateGcpTarget(body) {
      return this.updateGcpTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateGithubTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateGithubTargetOutput} and HTTP response
     */
    updateGithubTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateGithubTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGithubTargetOutput;
      return this.apiClient.callApi(
        '/update-github-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateGithubTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateGithubTargetOutput}
     */
    updateGithubTarget(body) {
      return this.updateGithubTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateItemOutput} and HTTP response
     */
    updateItemWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateItemOutput;
      return this.apiClient.callApi(
        '/update-item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateItem} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateItemOutput}
     */
    updateItem(body) {
      return this.updateItemWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateLdapTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateLdapTargetOutput} and HTTP response
     */
    updateLdapTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateLdapTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateLdapTargetOutput;
      return this.apiClient.callApi(
        '/update-ldap-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateLdapTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateLdapTargetOutput}
     */
    updateLdapTarget(body) {
      return this.updateLdapTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateLdapTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */
    updateLdapTargetDetailsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateLdapTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-ldap-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateLdapTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */
    updateLdapTargetDetails(body) {
      return this.updateLdapTargetDetailsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateLinkedTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateLinkedTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateLinkedTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-linked-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateLinkedTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateLinkedTarget(body) {
      return this.updateLinkedTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateNativeK8STarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateNativeK8STargetOutput} and HTTP response
     */
    updateNativeK8STargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateNativeK8STarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateNativeK8STargetOutput;
      return this.apiClient.callApi(
        '/update-k8s-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateNativeK8STarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateNativeK8STargetOutput}
     */
    updateNativeK8STarget(body) {
      return this.updateNativeK8STargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdatePKICertIssuer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdatePKICertIssuerOutput} and HTTP response
     */
    updatePKICertIssuerWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePKICertIssuer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatePKICertIssuerOutput;
      return this.apiClient.callApi(
        '/update-pki-cert-issuer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdatePKICertIssuer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdatePKICertIssuerOutput}
     */
    updatePKICertIssuer(body) {
      return this.updatePKICertIssuerWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdatePingTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updatePingTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePingTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-ping-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdatePingTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updatePingTarget(body) {
      return this.updatePingTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateRDPTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */
    updateRDPTargetDetailsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRDPTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-rdp-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateRDPTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */
    updateRDPTargetDetails(body) {
      return this.updateRDPTargetDetailsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateRabbitMQTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateRabbitMQTargetOutput} and HTTP response
     */
    updateRabbitMQTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRabbitMQTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRabbitMQTargetOutput;
      return this.apiClient.callApi(
        '/update-rabbitmq-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateRabbitMQTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateRabbitMQTargetOutput}
     */
    updateRabbitMQTarget(body) {
      return this.updateRabbitMQTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateRabbitMQTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */
    updateRabbitMQTargetDetailsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRabbitMQTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-rabbitmq-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateRabbitMQTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */
    updateRabbitMQTargetDetails(body) {
      return this.updateRabbitMQTargetDetailsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateRole} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateRoleOutput} and HTTP response
     */
    updateRoleWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRoleOutput;
      return this.apiClient.callApi(
        '/update-role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateRole} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateRoleOutput}
     */
    updateRole(body) {
      return this.updateRoleWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateRotatedSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateRotatedSecretOutput} and HTTP response
     */
    updateRotatedSecretWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRotatedSecret");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRotatedSecretOutput;
      return this.apiClient.callApi(
        '/update-rotated-secret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateRotatedSecret} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateRotatedSecretOutput}
     */
    updateRotatedSecret(body) {
      return this.updateRotatedSecretWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RotateKeyOutput} and HTTP response
     */
    updateRotationSettingsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RotateKeyOutput;
      return this.apiClient.callApi(
        '/update-rotation-settingsrotate-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RotateKeyOutput}
     */
    updateRotationSettings() {
      return this.updateRotationSettingsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateSSHCertIssuer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateSSHCertIssuerOutput} and HTTP response
     */
    updateSSHCertIssuerWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSSHCertIssuer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSSHCertIssuerOutput;
      return this.apiClient.callApi(
        '/update-ssh-cert-issuer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateSSHCertIssuer} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateSSHCertIssuerOutput}
     */
    updateSSHCertIssuer(body) {
      return this.updateSSHCertIssuerWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateSSHTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateSSHTargetOutput} and HTTP response
     */
    updateSSHTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSSHTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSSHTargetOutput;
      return this.apiClient.callApi(
        '/update-ssh-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateSSHTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateSSHTargetOutput}
     */
    updateSSHTarget(body) {
      return this.updateSSHTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateSSHTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */
    updateSSHTargetDetailsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSSHTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-ssh-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateSSHTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */
    updateSSHTargetDetails(body) {
      return this.updateSSHTargetDetailsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateSalesforceTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateSalesforceTargetOutput} and HTTP response
     */
    updateSalesforceTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSalesforceTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSalesforceTargetOutput;
      return this.apiClient.callApi(
        '/update-salesforce-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateSalesforceTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateSalesforceTargetOutput}
     */
    updateSalesforceTarget(body) {
      return this.updateSalesforceTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateSecretVal} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateSecretValOutput} and HTTP response
     */
    updateSecretValWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSecretVal");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSecretValOutput;
      return this.apiClient.callApi(
        '/update-secret-val', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateSecretVal} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateSecretValOutput}
     */
    updateSecretVal(body) {
      return this.updateSecretValWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */
    updateTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */
    updateTarget(body) {
      return this.updateTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */
    updateTargetDetailsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */
    updateTargetDetails(body) {
      return this.updateTargetDetailsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateWebTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateWebTargetOutput} and HTTP response
     */
    updateWebTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateWebTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateWebTargetOutput;
      return this.apiClient.callApi(
        '/update-web-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateWebTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateWebTargetOutput}
     */
    updateWebTarget(body) {
      return this.updateWebTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateWebTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateTargetOutput} and HTTP response
     */
    updateWebTargetDetailsWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateWebTargetDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTargetOutput;
      return this.apiClient.callApi(
        '/update-web-target-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateWebTargetDetails} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateTargetOutput}
     */
    updateWebTargetDetails(body) {
      return this.updateWebTargetDetailsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UpdateWindowsTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateWindowsTargetWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateWindowsTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/update-windows-target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UpdateWindowsTarget} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateWindowsTarget(body) {
      return this.updateWindowsTargetWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/UploadRSA} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    uploadRSAWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uploadRSA");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/upload-rsa', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/UploadRSA} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    uploadRSA(body) {
      return this.uploadRSAWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/ValidateToken} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ValidateTokenOutput} and HTTP response
     */
    validateTokenWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling validateToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ValidateTokenOutput;
      return this.apiClient.callApi(
        '/validate-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/ValidateToken} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ValidateTokenOutput}
     */
    validateToken(body) {
      return this.validateTokenWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/VerifyGPG} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    verifyGPGWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling verifyGPG");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/verify-gpg', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/VerifyGPG} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    verifyGPG(body) {
      return this.verifyGPGWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/VerifyJWTWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifyJWTOutput} and HTTP response
     */
    verifyJWTWithClassicKeyWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling verifyJWTWithClassicKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyJWTOutput;
      return this.apiClient.callApi(
        '/verify-jwt-with-classic-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/VerifyJWTWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifyJWTOutput}
     */
    verifyJWTWithClassicKey(body) {
      return this.verifyJWTWithClassicKeyWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/VerifyPKCS1} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    verifyPKCS1WithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling verifyPKCS1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/verify-pkcs1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/VerifyPKCS1} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    verifyPKCS1(body) {
      return this.verifyPKCS1WithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/VerifyPKICertWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifyPKICertOutput} and HTTP response
     */
    verifyPKICertWithClassicKeyWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling verifyPKICertWithClassicKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyPKICertOutput;
      return this.apiClient.callApi(
        '/verify-pki-cert-with-classic-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/VerifyPKICertWithClassicKey} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifyPKICertOutput}
     */
    verifyPKICertWithClassicKey(body) {
      return this.verifyPKICertWithClassicKeyWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
