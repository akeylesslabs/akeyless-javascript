/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VerifyDataWithClassicKey model module.
 * @module model/VerifyDataWithClassicKey
 * @version 5.0.2
 */
class VerifyDataWithClassicKey {
    /**
     * Constructs a new <code>VerifyDataWithClassicKey</code>.
     * @alias module:model/VerifyDataWithClassicKey
     * @param data {String} Data
     * @param name {String} The name of the key to use in the verification process
     * @param signature {String} The data's signature in a Base64 format.
     * @param version {Number} classic key version
     */
    constructor(data, name, signature, version) { 
        
        VerifyDataWithClassicKey.initialize(this, data, name, signature, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data, name, signature, version) { 
        obj['data'] = data;
        obj['hashed'] = false;
        obj['hashing-method'] = 'SHA256';
        obj['json'] = false;
        obj['name'] = name;
        obj['signature'] = signature;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>VerifyDataWithClassicKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VerifyDataWithClassicKey} obj Optional instance to populate.
     * @return {module:model/VerifyDataWithClassicKey} The populated <code>VerifyDataWithClassicKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VerifyDataWithClassicKey();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('display-id')) {
                obj['display-id'] = ApiClient.convertToType(data['display-id'], 'String');
            }
            if (data.hasOwnProperty('hashed')) {
                obj['hashed'] = ApiClient.convertToType(data['hashed'], 'Boolean');
            }
            if (data.hasOwnProperty('hashing-method')) {
                obj['hashing-method'] = ApiClient.convertToType(data['hashing-method'], 'String');
            }
            if (data.hasOwnProperty('json')) {
                obj['json'] = ApiClient.convertToType(data['json'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('uid-token')) {
                obj['uid-token'] = ApiClient.convertToType(data['uid-token'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VerifyDataWithClassicKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VerifyDataWithClassicKey</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VerifyDataWithClassicKey.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['display-id'] && !(typeof data['display-id'] === 'string' || data['display-id'] instanceof String)) {
            throw new Error("Expected the field `display-id` to be a primitive type in the JSON string but got " + data['display-id']);
        }
        // ensure the json data is a string
        if (data['hashing-method'] && !(typeof data['hashing-method'] === 'string' || data['hashing-method'] instanceof String)) {
            throw new Error("Expected the field `hashing-method` to be a primitive type in the JSON string but got " + data['hashing-method']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['uid-token'] && !(typeof data['uid-token'] === 'string' || data['uid-token'] instanceof String)) {
            throw new Error("Expected the field `uid-token` to be a primitive type in the JSON string but got " + data['uid-token']);
        }

        return true;
    }


}

VerifyDataWithClassicKey.RequiredProperties = ["data", "name", "signature", "version"];

/**
 * Data
 * @member {String} data
 */
VerifyDataWithClassicKey.prototype['data'] = undefined;

/**
 * The display id of the key to use in the verification process
 * @member {String} display-id
 */
VerifyDataWithClassicKey.prototype['display-id'] = undefined;

/**
 * Defines whether the data should be hashed as part of the signing. If true, the data will not be hashed
 * @member {Boolean} hashed
 * @default false
 */
VerifyDataWithClassicKey.prototype['hashed'] = false;

/**
 * HashingMethod
 * @member {String} hashing-method
 * @default 'SHA256'
 */
VerifyDataWithClassicKey.prototype['hashing-method'] = 'SHA256';

/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */
VerifyDataWithClassicKey.prototype['json'] = false;

/**
 * The name of the key to use in the verification process
 * @member {String} name
 */
VerifyDataWithClassicKey.prototype['name'] = undefined;

/**
 * The data's signature in a Base64 format.
 * @member {String} signature
 */
VerifyDataWithClassicKey.prototype['signature'] = undefined;

/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */
VerifyDataWithClassicKey.prototype['token'] = undefined;

/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */
VerifyDataWithClassicKey.prototype['uid-token'] = undefined;

/**
 * classic key version
 * @member {Number} version
 */
VerifyDataWithClassicKey.prototype['version'] = undefined;






export default VerifyDataWithClassicKey;

