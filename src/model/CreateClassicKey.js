/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateClassicKey model module.
 * @module model/CreateClassicKey
 * @version 5.0.9
 */
class CreateClassicKey {
    /**
     * Constructs a new <code>CreateClassicKey</code>.
     * CreateClassicKey is a command that creates classic key
     * @alias module:model/CreateClassicKey
     * @param alg {String} Classic Key type; options: [AES128GCM, AES256GCM, AES128SIV, AES256SIV, RSA1024, RSA2048, RSA3072, RSA4096, EC256, EC384, GPG]
     * @param name {String} ClassicKey name
     */
    constructor(alg, name) { 
        
        CreateClassicKey.initialize(this, alg, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, alg, name) { 
        obj['alg'] = alg;
        obj['hash-algorithm'] = 'SHA256';
        obj['json'] = false;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CreateClassicKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateClassicKey} obj Optional instance to populate.
     * @return {module:model/CreateClassicKey} The populated <code>CreateClassicKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateClassicKey();

            if (data.hasOwnProperty('alg')) {
                obj['alg'] = ApiClient.convertToType(data['alg'], 'String');
            }
            if (data.hasOwnProperty('auto-rotate')) {
                obj['auto-rotate'] = ApiClient.convertToType(data['auto-rotate'], 'String');
            }
            if (data.hasOwnProperty('cert-file-data')) {
                obj['cert-file-data'] = ApiClient.convertToType(data['cert-file-data'], 'String');
            }
            if (data.hasOwnProperty('certificate-common-name')) {
                obj['certificate-common-name'] = ApiClient.convertToType(data['certificate-common-name'], 'String');
            }
            if (data.hasOwnProperty('certificate-country')) {
                obj['certificate-country'] = ApiClient.convertToType(data['certificate-country'], 'String');
            }
            if (data.hasOwnProperty('certificate-digest-algo')) {
                obj['certificate-digest-algo'] = ApiClient.convertToType(data['certificate-digest-algo'], 'String');
            }
            if (data.hasOwnProperty('certificate-format')) {
                obj['certificate-format'] = ApiClient.convertToType(data['certificate-format'], 'String');
            }
            if (data.hasOwnProperty('certificate-locality')) {
                obj['certificate-locality'] = ApiClient.convertToType(data['certificate-locality'], 'String');
            }
            if (data.hasOwnProperty('certificate-organization')) {
                obj['certificate-organization'] = ApiClient.convertToType(data['certificate-organization'], 'String');
            }
            if (data.hasOwnProperty('certificate-province')) {
                obj['certificate-province'] = ApiClient.convertToType(data['certificate-province'], 'String');
            }
            if (data.hasOwnProperty('certificate-ttl')) {
                obj['certificate-ttl'] = ApiClient.convertToType(data['certificate-ttl'], 'Number');
            }
            if (data.hasOwnProperty('conf-file-data')) {
                obj['conf-file-data'] = ApiClient.convertToType(data['conf-file-data'], 'String');
            }
            if (data.hasOwnProperty('delete_protection')) {
                obj['delete_protection'] = ApiClient.convertToType(data['delete_protection'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('expiration-event-in')) {
                obj['expiration-event-in'] = ApiClient.convertToType(data['expiration-event-in'], ['String']);
            }
            if (data.hasOwnProperty('generate-self-signed-certificate')) {
                obj['generate-self-signed-certificate'] = ApiClient.convertToType(data['generate-self-signed-certificate'], 'Boolean');
            }
            if (data.hasOwnProperty('gpg-alg')) {
                obj['gpg-alg'] = ApiClient.convertToType(data['gpg-alg'], 'String');
            }
            if (data.hasOwnProperty('hash-algorithm')) {
                obj['hash-algorithm'] = ApiClient.convertToType(data['hash-algorithm'], 'String');
            }
            if (data.hasOwnProperty('json')) {
                obj['json'] = ApiClient.convertToType(data['json'], 'Boolean');
            }
            if (data.hasOwnProperty('key-data')) {
                obj['key-data'] = ApiClient.convertToType(data['key-data'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('protection-key-name')) {
                obj['protection-key-name'] = ApiClient.convertToType(data['protection-key-name'], 'String');
            }
            if (data.hasOwnProperty('rotation-event-in')) {
                obj['rotation-event-in'] = ApiClient.convertToType(data['rotation-event-in'], ['String']);
            }
            if (data.hasOwnProperty('rotation-interval')) {
                obj['rotation-interval'] = ApiClient.convertToType(data['rotation-interval'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('uid-token')) {
                obj['uid-token'] = ApiClient.convertToType(data['uid-token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateClassicKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateClassicKey</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateClassicKey.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['alg'] && !(typeof data['alg'] === 'string' || data['alg'] instanceof String)) {
            throw new Error("Expected the field `alg` to be a primitive type in the JSON string but got " + data['alg']);
        }
        // ensure the json data is a string
        if (data['auto-rotate'] && !(typeof data['auto-rotate'] === 'string' || data['auto-rotate'] instanceof String)) {
            throw new Error("Expected the field `auto-rotate` to be a primitive type in the JSON string but got " + data['auto-rotate']);
        }
        // ensure the json data is a string
        if (data['cert-file-data'] && !(typeof data['cert-file-data'] === 'string' || data['cert-file-data'] instanceof String)) {
            throw new Error("Expected the field `cert-file-data` to be a primitive type in the JSON string but got " + data['cert-file-data']);
        }
        // ensure the json data is a string
        if (data['certificate-common-name'] && !(typeof data['certificate-common-name'] === 'string' || data['certificate-common-name'] instanceof String)) {
            throw new Error("Expected the field `certificate-common-name` to be a primitive type in the JSON string but got " + data['certificate-common-name']);
        }
        // ensure the json data is a string
        if (data['certificate-country'] && !(typeof data['certificate-country'] === 'string' || data['certificate-country'] instanceof String)) {
            throw new Error("Expected the field `certificate-country` to be a primitive type in the JSON string but got " + data['certificate-country']);
        }
        // ensure the json data is a string
        if (data['certificate-digest-algo'] && !(typeof data['certificate-digest-algo'] === 'string' || data['certificate-digest-algo'] instanceof String)) {
            throw new Error("Expected the field `certificate-digest-algo` to be a primitive type in the JSON string but got " + data['certificate-digest-algo']);
        }
        // ensure the json data is a string
        if (data['certificate-format'] && !(typeof data['certificate-format'] === 'string' || data['certificate-format'] instanceof String)) {
            throw new Error("Expected the field `certificate-format` to be a primitive type in the JSON string but got " + data['certificate-format']);
        }
        // ensure the json data is a string
        if (data['certificate-locality'] && !(typeof data['certificate-locality'] === 'string' || data['certificate-locality'] instanceof String)) {
            throw new Error("Expected the field `certificate-locality` to be a primitive type in the JSON string but got " + data['certificate-locality']);
        }
        // ensure the json data is a string
        if (data['certificate-organization'] && !(typeof data['certificate-organization'] === 'string' || data['certificate-organization'] instanceof String)) {
            throw new Error("Expected the field `certificate-organization` to be a primitive type in the JSON string but got " + data['certificate-organization']);
        }
        // ensure the json data is a string
        if (data['certificate-province'] && !(typeof data['certificate-province'] === 'string' || data['certificate-province'] instanceof String)) {
            throw new Error("Expected the field `certificate-province` to be a primitive type in the JSON string but got " + data['certificate-province']);
        }
        // ensure the json data is a string
        if (data['conf-file-data'] && !(typeof data['conf-file-data'] === 'string' || data['conf-file-data'] instanceof String)) {
            throw new Error("Expected the field `conf-file-data` to be a primitive type in the JSON string but got " + data['conf-file-data']);
        }
        // ensure the json data is a string
        if (data['delete_protection'] && !(typeof data['delete_protection'] === 'string' || data['delete_protection'] instanceof String)) {
            throw new Error("Expected the field `delete_protection` to be a primitive type in the JSON string but got " + data['delete_protection']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['expiration-event-in'])) {
            throw new Error("Expected the field `expiration-event-in` to be an array in the JSON data but got " + data['expiration-event-in']);
        }
        // ensure the json data is a string
        if (data['gpg-alg'] && !(typeof data['gpg-alg'] === 'string' || data['gpg-alg'] instanceof String)) {
            throw new Error("Expected the field `gpg-alg` to be a primitive type in the JSON string but got " + data['gpg-alg']);
        }
        // ensure the json data is a string
        if (data['hash-algorithm'] && !(typeof data['hash-algorithm'] === 'string' || data['hash-algorithm'] instanceof String)) {
            throw new Error("Expected the field `hash-algorithm` to be a primitive type in the JSON string but got " + data['hash-algorithm']);
        }
        // ensure the json data is a string
        if (data['key-data'] && !(typeof data['key-data'] === 'string' || data['key-data'] instanceof String)) {
            throw new Error("Expected the field `key-data` to be a primitive type in the JSON string but got " + data['key-data']);
        }
        // ensure the json data is a string
        if (data['metadata'] && !(typeof data['metadata'] === 'string' || data['metadata'] instanceof String)) {
            throw new Error("Expected the field `metadata` to be a primitive type in the JSON string but got " + data['metadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['protection-key-name'] && !(typeof data['protection-key-name'] === 'string' || data['protection-key-name'] instanceof String)) {
            throw new Error("Expected the field `protection-key-name` to be a primitive type in the JSON string but got " + data['protection-key-name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['rotation-event-in'])) {
            throw new Error("Expected the field `rotation-event-in` to be an array in the JSON data but got " + data['rotation-event-in']);
        }
        // ensure the json data is a string
        if (data['rotation-interval'] && !(typeof data['rotation-interval'] === 'string' || data['rotation-interval'] instanceof String)) {
            throw new Error("Expected the field `rotation-interval` to be a primitive type in the JSON string but got " + data['rotation-interval']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['uid-token'] && !(typeof data['uid-token'] === 'string' || data['uid-token'] instanceof String)) {
            throw new Error("Expected the field `uid-token` to be a primitive type in the JSON string but got " + data['uid-token']);
        }

        return true;
    }


}

CreateClassicKey.RequiredProperties = ["alg", "name"];

/**
 * Classic Key type; options: [AES128GCM, AES256GCM, AES128SIV, AES256SIV, RSA1024, RSA2048, RSA3072, RSA4096, EC256, EC384, GPG]
 * @member {String} alg
 */
CreateClassicKey.prototype['alg'] = undefined;

/**
 * Whether to automatically rotate every rotation_interval days, or disable existing automatic rotation [true/false]
 * @member {String} auto-rotate
 */
CreateClassicKey.prototype['auto-rotate'] = undefined;

/**
 * Certificate in a PEM format.
 * @member {String} cert-file-data
 */
CreateClassicKey.prototype['cert-file-data'] = undefined;

/**
 * Common name for the generated certificate. Relevant only for generate-self-signed-certificate.
 * @member {String} certificate-common-name
 */
CreateClassicKey.prototype['certificate-common-name'] = undefined;

/**
 * Country name for the generated certificate. Relevant only for generate-self-signed-certificate.
 * @member {String} certificate-country
 */
CreateClassicKey.prototype['certificate-country'] = undefined;

/**
 * Digest algorithm to be used for the certificate key signing.
 * @member {String} certificate-digest-algo
 */
CreateClassicKey.prototype['certificate-digest-algo'] = undefined;

/**
 * @member {String} certificate-format
 */
CreateClassicKey.prototype['certificate-format'] = undefined;

/**
 * Locality for the generated certificate. Relevant only for generate-self-signed-certificate.
 * @member {String} certificate-locality
 */
CreateClassicKey.prototype['certificate-locality'] = undefined;

/**
 * Organization name for the generated certificate. Relevant only for generate-self-signed-certificate.
 * @member {String} certificate-organization
 */
CreateClassicKey.prototype['certificate-organization'] = undefined;

/**
 * Province name for the generated certificate. Relevant only for generate-self-signed-certificate.
 * @member {String} certificate-province
 */
CreateClassicKey.prototype['certificate-province'] = undefined;

/**
 * TTL in days for the generated certificate. Required only for generate-self-signed-certificate.
 * @member {Number} certificate-ttl
 */
CreateClassicKey.prototype['certificate-ttl'] = undefined;

/**
 * The csr config data in base64 encoding
 * @member {String} conf-file-data
 */
CreateClassicKey.prototype['conf-file-data'] = undefined;

/**
 * Protection from accidental deletion of this object [true/false]
 * @member {String} delete_protection
 */
CreateClassicKey.prototype['delete_protection'] = undefined;

/**
 * Description of the object
 * @member {String} description
 */
CreateClassicKey.prototype['description'] = undefined;

/**
 * How many days before the expiration of the certificate would you like to be notified.
 * @member {Array.<String>} expiration-event-in
 */
CreateClassicKey.prototype['expiration-event-in'] = undefined;

/**
 * Whether to generate a self signed certificate with the key. If set, --certificate-ttl must be provided.
 * @member {Boolean} generate-self-signed-certificate
 */
CreateClassicKey.prototype['generate-self-signed-certificate'] = undefined;

/**
 * gpg alg: Relevant only if GPG key type selected; options: [RSA1024, RSA2048, RSA3072, RSA4096, Ed25519]
 * @member {String} gpg-alg
 */
CreateClassicKey.prototype['gpg-alg'] = undefined;

/**
 * Specifies the hash algorithm used for the encryption key's operations, available options: [SHA256, SHA384, SHA512]
 * @member {String} hash-algorithm
 * @default 'SHA256'
 */
CreateClassicKey.prototype['hash-algorithm'] = 'SHA256';

/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */
CreateClassicKey.prototype['json'] = false;

/**
 * Base64-encoded classic key value
 * @member {String} key-data
 */
CreateClassicKey.prototype['key-data'] = undefined;

/**
 * Deprecated - use description
 * @member {String} metadata
 */
CreateClassicKey.prototype['metadata'] = undefined;

/**
 * ClassicKey name
 * @member {String} name
 */
CreateClassicKey.prototype['name'] = undefined;

/**
 * The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
 * @member {String} protection-key-name
 */
CreateClassicKey.prototype['protection-key-name'] = undefined;

/**
 * How many days before the rotation of the item would you like to be notified
 * @member {Array.<String>} rotation-event-in
 */
CreateClassicKey.prototype['rotation-event-in'] = undefined;

/**
 * The number of days to wait between every automatic rotation (1-365)
 * @member {String} rotation-interval
 */
CreateClassicKey.prototype['rotation-interval'] = undefined;

/**
 * Add tags attached to this object
 * @member {Array.<String>} tags
 */
CreateClassicKey.prototype['tags'] = undefined;

/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */
CreateClassicKey.prototype['token'] = undefined;

/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */
CreateClassicKey.prototype['uid-token'] = undefined;






export default CreateClassicKey;

