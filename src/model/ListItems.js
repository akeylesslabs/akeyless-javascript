/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ListItems model module.
 * @module model/ListItems
 * @version 5.0.5
 */
class ListItems {
    /**
     * Constructs a new <code>ListItems</code>.
     * @alias module:model/ListItems
     */
    constructor() { 
        
        ListItems.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['accessibility'] = 'regular';
        obj['auto-pagination'] = 'enabled';
        obj['json'] = false;
        obj['sra-only'] = false;
    }

    /**
     * Constructs a <code>ListItems</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListItems} obj Optional instance to populate.
     * @return {module:model/ListItems} The populated <code>ListItems</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListItems();

            if (data.hasOwnProperty('accessibility')) {
                obj['accessibility'] = ApiClient.convertToType(data['accessibility'], 'String');
            }
            if (data.hasOwnProperty('advanced-filter')) {
                obj['advanced-filter'] = ApiClient.convertToType(data['advanced-filter'], 'String');
            }
            if (data.hasOwnProperty('auto-pagination')) {
                obj['auto-pagination'] = ApiClient.convertToType(data['auto-pagination'], 'String');
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('json')) {
                obj['json'] = ApiClient.convertToType(data['json'], 'Boolean');
            }
            if (data.hasOwnProperty('minimal-view')) {
                obj['minimal-view'] = ApiClient.convertToType(data['minimal-view'], 'Boolean');
            }
            if (data.hasOwnProperty('modified-after')) {
                obj['modified-after'] = ApiClient.convertToType(data['modified-after'], 'Number');
            }
            if (data.hasOwnProperty('pagination-token')) {
                obj['pagination-token'] = ApiClient.convertToType(data['pagination-token'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('sra-only')) {
                obj['sra-only'] = ApiClient.convertToType(data['sra-only'], 'Boolean');
            }
            if (data.hasOwnProperty('sub-types')) {
                obj['sub-types'] = ApiClient.convertToType(data['sub-types'], ['String']);
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], ['String']);
            }
            if (data.hasOwnProperty('uid-token')) {
                obj['uid-token'] = ApiClient.convertToType(data['uid-token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListItems</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListItems</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accessibility'] && !(typeof data['accessibility'] === 'string' || data['accessibility'] instanceof String)) {
            throw new Error("Expected the field `accessibility` to be a primitive type in the JSON string but got " + data['accessibility']);
        }
        // ensure the json data is a string
        if (data['advanced-filter'] && !(typeof data['advanced-filter'] === 'string' || data['advanced-filter'] instanceof String)) {
            throw new Error("Expected the field `advanced-filter` to be a primitive type in the JSON string but got " + data['advanced-filter']);
        }
        // ensure the json data is a string
        if (data['auto-pagination'] && !(typeof data['auto-pagination'] === 'string' || data['auto-pagination'] instanceof String)) {
            throw new Error("Expected the field `auto-pagination` to be a primitive type in the JSON string but got " + data['auto-pagination']);
        }
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        // ensure the json data is a string
        if (data['pagination-token'] && !(typeof data['pagination-token'] === 'string' || data['pagination-token'] instanceof String)) {
            throw new Error("Expected the field `pagination-token` to be a primitive type in the JSON string but got " + data['pagination-token']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sub-types'])) {
            throw new Error("Expected the field `sub-types` to be an array in the JSON data but got " + data['sub-types']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['type'])) {
            throw new Error("Expected the field `type` to be an array in the JSON data but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uid-token'] && !(typeof data['uid-token'] === 'string' || data['uid-token'] instanceof String)) {
            throw new Error("Expected the field `uid-token` to be a primitive type in the JSON string but got " + data['uid-token']);
        }

        return true;
    }


}



/**
 * for personal password manager
 * @member {String} accessibility
 * @default 'regular'
 */
ListItems.prototype['accessibility'] = 'regular';

/**
 * Filter by item name/username/website or part of it
 * @member {String} advanced-filter
 */
ListItems.prototype['advanced-filter'] = undefined;

/**
 * Retrieve all items using pagination, when disabled retrieving only first 1000 items
 * @member {String} auto-pagination
 * @default 'enabled'
 */
ListItems.prototype['auto-pagination'] = 'enabled';

/**
 * Filter by item name or part of it
 * @member {String} filter
 */
ListItems.prototype['filter'] = undefined;

/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */
ListItems.prototype['json'] = false;

/**
 * Show only basic information of the items
 * @member {Boolean} minimal-view
 */
ListItems.prototype['minimal-view'] = undefined;

/**
 * List only secrets modified after specified date (in unix time)
 * @member {Number} modified-after
 */
ListItems.prototype['modified-after'] = undefined;

/**
 * Next page reference
 * @member {String} pagination-token
 */
ListItems.prototype['pagination-token'] = undefined;

/**
 * Path to folder
 * @member {String} path
 */
ListItems.prototype['path'] = undefined;

/**
 * Filter by items with SRA functionality enabled
 * @member {Boolean} sra-only
 * @default false
 */
ListItems.prototype['sra-only'] = false;

/**
 * @member {Array.<String>} sub-types
 */
ListItems.prototype['sub-types'] = undefined;

/**
 * Filter by item tag
 * @member {String} tag
 */
ListItems.prototype['tag'] = undefined;

/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */
ListItems.prototype['token'] = undefined;

/**
 * The item types list of the requested items. In case it is empty, all types of items will be returned. options: [key, static-secret, dynamic-secret, classic-key]
 * @member {Array.<String>} type
 */
ListItems.prototype['type'] = undefined;

/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */
ListItems.prototype['uid-token'] = undefined;






export default ListItems;

