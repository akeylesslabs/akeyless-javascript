/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CertificateStore model module.
 * @module model/CertificateStore
 * @version 5.0.9
 */
class CertificateStore {
    /**
     * Constructs a new <code>CertificateStore</code>.
     * @alias module:model/CertificateStore
     */
    constructor() { 
        
        CertificateStore.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateStore</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateStore} obj Optional instance to populate.
     * @return {module:model/CertificateStore} The populated <code>CertificateStore</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateStore();

            if (data.hasOwnProperty('certificate_pem')) {
                obj['certificate_pem'] = ApiClient.convertToType(data['certificate_pem'], 'String');
            }
            if (data.hasOwnProperty('common_name')) {
                obj['common_name'] = ApiClient.convertToType(data['common_name'], 'String');
            }
            if (data.hasOwnProperty('expiration_date')) {
                obj['expiration_date'] = ApiClient.convertToType(data['expiration_date'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateStore</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateStore</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['certificate_pem'] && !(typeof data['certificate_pem'] === 'string' || data['certificate_pem'] instanceof String)) {
            throw new Error("Expected the field `certificate_pem` to be a primitive type in the JSON string but got " + data['certificate_pem']);
        }
        // ensure the json data is a string
        if (data['common_name'] && !(typeof data['common_name'] === 'string' || data['common_name'] instanceof String)) {
            throw new Error("Expected the field `common_name` to be a primitive type in the JSON string but got " + data['common_name']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * @member {String} certificate_pem
 */
CertificateStore.prototype['certificate_pem'] = undefined;

/**
 * @member {String} common_name
 */
CertificateStore.prototype['common_name'] = undefined;

/**
 * @member {Date} expiration_date
 */
CertificateStore.prototype['expiration_date'] = undefined;

/**
 * @member {String} name
 */
CertificateStore.prototype['name'] = undefined;






export default CertificateStore;

