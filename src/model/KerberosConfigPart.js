/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KerberosConfigPart model module.
 * @module model/KerberosConfigPart
 * @version 5.0.5
 */
class KerberosConfigPart {
    /**
     * Constructs a new <code>KerberosConfigPart</code>.
     * @alias module:model/KerberosConfigPart
     */
    constructor() { 
        
        KerberosConfigPart.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KerberosConfigPart</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KerberosConfigPart} obj Optional instance to populate.
     * @return {module:model/KerberosConfigPart} The populated <code>KerberosConfigPart</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KerberosConfigPart();

            if (data.hasOwnProperty('kerberos_access_id')) {
                obj['kerberos_access_id'] = ApiClient.convertToType(data['kerberos_access_id'], 'String');
            }
            if (data.hasOwnProperty('kerberos_keytab')) {
                obj['kerberos_keytab'] = ApiClient.convertToType(data['kerberos_keytab'], 'String');
            }
            if (data.hasOwnProperty('kerberos_krb_5_conf')) {
                obj['kerberos_krb_5_conf'] = ApiClient.convertToType(data['kerberos_krb_5_conf'], 'String');
            }
            if (data.hasOwnProperty('kerberos_private_key')) {
                obj['kerberos_private_key'] = ApiClient.convertToType(data['kerberos_private_key'], 'String');
            }
            if (data.hasOwnProperty('ldap_anonymous_search')) {
                obj['ldap_anonymous_search'] = ApiClient.convertToType(data['ldap_anonymous_search'], 'Boolean');
            }
            if (data.hasOwnProperty('ldap_bind_dn')) {
                obj['ldap_bind_dn'] = ApiClient.convertToType(data['ldap_bind_dn'], 'String');
            }
            if (data.hasOwnProperty('ldap_bind_password')) {
                obj['ldap_bind_password'] = ApiClient.convertToType(data['ldap_bind_password'], 'String');
            }
            if (data.hasOwnProperty('ldap_cert')) {
                obj['ldap_cert'] = ApiClient.convertToType(data['ldap_cert'], 'String');
            }
            if (data.hasOwnProperty('ldap_group_attr')) {
                obj['ldap_group_attr'] = ApiClient.convertToType(data['ldap_group_attr'], 'String');
            }
            if (data.hasOwnProperty('ldap_group_dn')) {
                obj['ldap_group_dn'] = ApiClient.convertToType(data['ldap_group_dn'], 'String');
            }
            if (data.hasOwnProperty('ldap_group_filter')) {
                obj['ldap_group_filter'] = ApiClient.convertToType(data['ldap_group_filter'], 'String');
            }
            if (data.hasOwnProperty('ldap_url')) {
                obj['ldap_url'] = ApiClient.convertToType(data['ldap_url'], 'String');
            }
            if (data.hasOwnProperty('ldap_user_attr')) {
                obj['ldap_user_attr'] = ApiClient.convertToType(data['ldap_user_attr'], 'String');
            }
            if (data.hasOwnProperty('ldap_user_dn')) {
                obj['ldap_user_dn'] = ApiClient.convertToType(data['ldap_user_dn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KerberosConfigPart</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KerberosConfigPart</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['kerberos_access_id'] && !(typeof data['kerberos_access_id'] === 'string' || data['kerberos_access_id'] instanceof String)) {
            throw new Error("Expected the field `kerberos_access_id` to be a primitive type in the JSON string but got " + data['kerberos_access_id']);
        }
        // ensure the json data is a string
        if (data['kerberos_keytab'] && !(typeof data['kerberos_keytab'] === 'string' || data['kerberos_keytab'] instanceof String)) {
            throw new Error("Expected the field `kerberos_keytab` to be a primitive type in the JSON string but got " + data['kerberos_keytab']);
        }
        // ensure the json data is a string
        if (data['kerberos_krb_5_conf'] && !(typeof data['kerberos_krb_5_conf'] === 'string' || data['kerberos_krb_5_conf'] instanceof String)) {
            throw new Error("Expected the field `kerberos_krb_5_conf` to be a primitive type in the JSON string but got " + data['kerberos_krb_5_conf']);
        }
        // ensure the json data is a string
        if (data['kerberos_private_key'] && !(typeof data['kerberos_private_key'] === 'string' || data['kerberos_private_key'] instanceof String)) {
            throw new Error("Expected the field `kerberos_private_key` to be a primitive type in the JSON string but got " + data['kerberos_private_key']);
        }
        // ensure the json data is a string
        if (data['ldap_bind_dn'] && !(typeof data['ldap_bind_dn'] === 'string' || data['ldap_bind_dn'] instanceof String)) {
            throw new Error("Expected the field `ldap_bind_dn` to be a primitive type in the JSON string but got " + data['ldap_bind_dn']);
        }
        // ensure the json data is a string
        if (data['ldap_bind_password'] && !(typeof data['ldap_bind_password'] === 'string' || data['ldap_bind_password'] instanceof String)) {
            throw new Error("Expected the field `ldap_bind_password` to be a primitive type in the JSON string but got " + data['ldap_bind_password']);
        }
        // ensure the json data is a string
        if (data['ldap_cert'] && !(typeof data['ldap_cert'] === 'string' || data['ldap_cert'] instanceof String)) {
            throw new Error("Expected the field `ldap_cert` to be a primitive type in the JSON string but got " + data['ldap_cert']);
        }
        // ensure the json data is a string
        if (data['ldap_group_attr'] && !(typeof data['ldap_group_attr'] === 'string' || data['ldap_group_attr'] instanceof String)) {
            throw new Error("Expected the field `ldap_group_attr` to be a primitive type in the JSON string but got " + data['ldap_group_attr']);
        }
        // ensure the json data is a string
        if (data['ldap_group_dn'] && !(typeof data['ldap_group_dn'] === 'string' || data['ldap_group_dn'] instanceof String)) {
            throw new Error("Expected the field `ldap_group_dn` to be a primitive type in the JSON string but got " + data['ldap_group_dn']);
        }
        // ensure the json data is a string
        if (data['ldap_group_filter'] && !(typeof data['ldap_group_filter'] === 'string' || data['ldap_group_filter'] instanceof String)) {
            throw new Error("Expected the field `ldap_group_filter` to be a primitive type in the JSON string but got " + data['ldap_group_filter']);
        }
        // ensure the json data is a string
        if (data['ldap_url'] && !(typeof data['ldap_url'] === 'string' || data['ldap_url'] instanceof String)) {
            throw new Error("Expected the field `ldap_url` to be a primitive type in the JSON string but got " + data['ldap_url']);
        }
        // ensure the json data is a string
        if (data['ldap_user_attr'] && !(typeof data['ldap_user_attr'] === 'string' || data['ldap_user_attr'] instanceof String)) {
            throw new Error("Expected the field `ldap_user_attr` to be a primitive type in the JSON string but got " + data['ldap_user_attr']);
        }
        // ensure the json data is a string
        if (data['ldap_user_dn'] && !(typeof data['ldap_user_dn'] === 'string' || data['ldap_user_dn'] instanceof String)) {
            throw new Error("Expected the field `ldap_user_dn` to be a primitive type in the JSON string but got " + data['ldap_user_dn']);
        }

        return true;
    }


}



/**
 * @member {String} kerberos_access_id
 */
KerberosConfigPart.prototype['kerberos_access_id'] = undefined;

/**
 * @member {String} kerberos_keytab
 */
KerberosConfigPart.prototype['kerberos_keytab'] = undefined;

/**
 * @member {String} kerberos_krb_5_conf
 */
KerberosConfigPart.prototype['kerberos_krb_5_conf'] = undefined;

/**
 * @member {String} kerberos_private_key
 */
KerberosConfigPart.prototype['kerberos_private_key'] = undefined;

/**
 * @member {Boolean} ldap_anonymous_search
 */
KerberosConfigPart.prototype['ldap_anonymous_search'] = undefined;

/**
 * @member {String} ldap_bind_dn
 */
KerberosConfigPart.prototype['ldap_bind_dn'] = undefined;

/**
 * @member {String} ldap_bind_password
 */
KerberosConfigPart.prototype['ldap_bind_password'] = undefined;

/**
 * @member {String} ldap_cert
 */
KerberosConfigPart.prototype['ldap_cert'] = undefined;

/**
 * @member {String} ldap_group_attr
 */
KerberosConfigPart.prototype['ldap_group_attr'] = undefined;

/**
 * @member {String} ldap_group_dn
 */
KerberosConfigPart.prototype['ldap_group_dn'] = undefined;

/**
 * @member {String} ldap_group_filter
 */
KerberosConfigPart.prototype['ldap_group_filter'] = undefined;

/**
 * @member {String} ldap_url
 */
KerberosConfigPart.prototype['ldap_url'] = undefined;

/**
 * @member {String} ldap_user_attr
 */
KerberosConfigPart.prototype['ldap_user_attr'] = undefined;

/**
 * @member {String} ldap_user_dn
 */
KerberosConfigPart.prototype['ldap_user_dn'] = undefined;






export default KerberosConfigPart;

