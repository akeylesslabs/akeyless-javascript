/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TargetCreateSectigo model module.
 * @module model/TargetCreateSectigo
 * @version 4.3.0
 */
class TargetCreateSectigo {
    /**
     * Constructs a new <code>TargetCreateSectigo</code>.
     * targetCreateSectigo is a command that creates a new Sectigo target
     * @alias module:model/TargetCreateSectigo
     * @param certificateProfileId {Number} Certificate Profile ID in Sectigo account
     * @param customerUri {String} Customer Uri of the Sectigo account
     * @param externalRequester {String} External Requester - a comma separated list of emails
     * @param name {String} Target name
     * @param organizationId {Number} Organization ID in Sectigo account
     * @param password {String} Password of the Sectigo account user
     * @param username {String} Username of the Sectigo account
     */
    constructor(certificateProfileId, customerUri, externalRequester, name, organizationId, password, username) { 
        
        TargetCreateSectigo.initialize(this, certificateProfileId, customerUri, externalRequester, name, organizationId, password, username);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certificateProfileId, customerUri, externalRequester, name, organizationId, password, username) { 
        obj['certificate-profile-id'] = certificateProfileId;
        obj['customer-uri'] = customerUri;
        obj['external-requester'] = externalRequester;
        obj['name'] = name;
        obj['organization-id'] = organizationId;
        obj['password'] = password;
        obj['username'] = username;
    }

    /**
     * Constructs a <code>TargetCreateSectigo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TargetCreateSectigo} obj Optional instance to populate.
     * @return {module:model/TargetCreateSectigo} The populated <code>TargetCreateSectigo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TargetCreateSectigo();

            if (data.hasOwnProperty('certificate-profile-id')) {
                obj['certificate-profile-id'] = ApiClient.convertToType(data['certificate-profile-id'], 'Number');
            }
            if (data.hasOwnProperty('customer-uri')) {
                obj['customer-uri'] = ApiClient.convertToType(data['customer-uri'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('external-requester')) {
                obj['external-requester'] = ApiClient.convertToType(data['external-requester'], 'String');
            }
            if (data.hasOwnProperty('json')) {
                obj['json'] = ApiClient.convertToType(data['json'], 'Boolean');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('max-versions')) {
                obj['max-versions'] = ApiClient.convertToType(data['max-versions'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('organization-id')) {
                obj['organization-id'] = ApiClient.convertToType(data['organization-id'], 'Number');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('uid-token')) {
                obj['uid-token'] = ApiClient.convertToType(data['uid-token'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Certificate Profile ID in Sectigo account
 * @member {Number} certificate-profile-id
 */
TargetCreateSectigo.prototype['certificate-profile-id'] = undefined;

/**
 * Customer Uri of the Sectigo account
 * @member {String} customer-uri
 */
TargetCreateSectigo.prototype['customer-uri'] = undefined;

/**
 * Description of the object
 * @member {String} description
 */
TargetCreateSectigo.prototype['description'] = undefined;

/**
 * External Requester - a comma separated list of emails
 * @member {String} external-requester
 */
TargetCreateSectigo.prototype['external-requester'] = undefined;

/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */
TargetCreateSectigo.prototype['json'] = false;

/**
 * The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
 * @member {String} key
 */
TargetCreateSectigo.prototype['key'] = undefined;

/**
 * Set the maximum number of versions, limited by the account settings defaults.
 * @member {String} max-versions
 */
TargetCreateSectigo.prototype['max-versions'] = undefined;

/**
 * Target name
 * @member {String} name
 */
TargetCreateSectigo.prototype['name'] = undefined;

/**
 * Organization ID in Sectigo account
 * @member {Number} organization-id
 */
TargetCreateSectigo.prototype['organization-id'] = undefined;

/**
 * Password of the Sectigo account user
 * @member {String} password
 */
TargetCreateSectigo.prototype['password'] = undefined;

/**
 * Timeout waiting for certificate validation in Duration format (1h - 1 Hour, 20m - 20 Minutes, 33m3s - 33 Minutes and 3 Seconds), maximum 1h.
 * @member {String} timeout
 * @default '5m'
 */
TargetCreateSectigo.prototype['timeout'] = '5m';

/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */
TargetCreateSectigo.prototype['token'] = undefined;

/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */
TargetCreateSectigo.prototype['uid-token'] = undefined;

/**
 * Username of the Sectigo account
 * @member {String} username
 */
TargetCreateSectigo.prototype['username'] = undefined;






export default TargetCreateSectigo;

