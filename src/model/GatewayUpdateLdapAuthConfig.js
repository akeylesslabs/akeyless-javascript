/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GatewayUpdateLdapAuthConfig model module.
 * @module model/GatewayUpdateLdapAuthConfig
 * @version 5.0.2
 */
class GatewayUpdateLdapAuthConfig {
    /**
     * Constructs a new <code>GatewayUpdateLdapAuthConfig</code>.
     * gatewayUpdateLdapAuth is a command that updates ldap auth config
     * @alias module:model/GatewayUpdateLdapAuthConfig
     */
    constructor() { 
        
        GatewayUpdateLdapAuthConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['json'] = false;
    }

    /**
     * Constructs a <code>GatewayUpdateLdapAuthConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GatewayUpdateLdapAuthConfig} obj Optional instance to populate.
     * @return {module:model/GatewayUpdateLdapAuthConfig} The populated <code>GatewayUpdateLdapAuthConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GatewayUpdateLdapAuthConfig();

            if (data.hasOwnProperty('access-id')) {
                obj['access-id'] = ApiClient.convertToType(data['access-id'], 'String');
            }
            if (data.hasOwnProperty('bind-dn')) {
                obj['bind-dn'] = ApiClient.convertToType(data['bind-dn'], 'String');
            }
            if (data.hasOwnProperty('bind-dn-password')) {
                obj['bind-dn-password'] = ApiClient.convertToType(data['bind-dn-password'], 'String');
            }
            if (data.hasOwnProperty('group-attr')) {
                obj['group-attr'] = ApiClient.convertToType(data['group-attr'], 'String');
            }
            if (data.hasOwnProperty('group-dn')) {
                obj['group-dn'] = ApiClient.convertToType(data['group-dn'], 'String');
            }
            if (data.hasOwnProperty('group-filter')) {
                obj['group-filter'] = ApiClient.convertToType(data['group-filter'], 'String');
            }
            if (data.hasOwnProperty('json')) {
                obj['json'] = ApiClient.convertToType(data['json'], 'Boolean');
            }
            if (data.hasOwnProperty('ldap-ca-cert')) {
                obj['ldap-ca-cert'] = ApiClient.convertToType(data['ldap-ca-cert'], 'String');
            }
            if (data.hasOwnProperty('ldap-enable')) {
                obj['ldap-enable'] = ApiClient.convertToType(data['ldap-enable'], 'String');
            }
            if (data.hasOwnProperty('ldap-url')) {
                obj['ldap-url'] = ApiClient.convertToType(data['ldap-url'], 'String');
            }
            if (data.hasOwnProperty('signing-key-data')) {
                obj['signing-key-data'] = ApiClient.convertToType(data['signing-key-data'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('uid-token')) {
                obj['uid-token'] = ApiClient.convertToType(data['uid-token'], 'String');
            }
            if (data.hasOwnProperty('user-attribute')) {
                obj['user-attribute'] = ApiClient.convertToType(data['user-attribute'], 'String');
            }
            if (data.hasOwnProperty('user-dn')) {
                obj['user-dn'] = ApiClient.convertToType(data['user-dn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GatewayUpdateLdapAuthConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GatewayUpdateLdapAuthConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['access-id'] && !(typeof data['access-id'] === 'string' || data['access-id'] instanceof String)) {
            throw new Error("Expected the field `access-id` to be a primitive type in the JSON string but got " + data['access-id']);
        }
        // ensure the json data is a string
        if (data['bind-dn'] && !(typeof data['bind-dn'] === 'string' || data['bind-dn'] instanceof String)) {
            throw new Error("Expected the field `bind-dn` to be a primitive type in the JSON string but got " + data['bind-dn']);
        }
        // ensure the json data is a string
        if (data['bind-dn-password'] && !(typeof data['bind-dn-password'] === 'string' || data['bind-dn-password'] instanceof String)) {
            throw new Error("Expected the field `bind-dn-password` to be a primitive type in the JSON string but got " + data['bind-dn-password']);
        }
        // ensure the json data is a string
        if (data['group-attr'] && !(typeof data['group-attr'] === 'string' || data['group-attr'] instanceof String)) {
            throw new Error("Expected the field `group-attr` to be a primitive type in the JSON string but got " + data['group-attr']);
        }
        // ensure the json data is a string
        if (data['group-dn'] && !(typeof data['group-dn'] === 'string' || data['group-dn'] instanceof String)) {
            throw new Error("Expected the field `group-dn` to be a primitive type in the JSON string but got " + data['group-dn']);
        }
        // ensure the json data is a string
        if (data['group-filter'] && !(typeof data['group-filter'] === 'string' || data['group-filter'] instanceof String)) {
            throw new Error("Expected the field `group-filter` to be a primitive type in the JSON string but got " + data['group-filter']);
        }
        // ensure the json data is a string
        if (data['ldap-ca-cert'] && !(typeof data['ldap-ca-cert'] === 'string' || data['ldap-ca-cert'] instanceof String)) {
            throw new Error("Expected the field `ldap-ca-cert` to be a primitive type in the JSON string but got " + data['ldap-ca-cert']);
        }
        // ensure the json data is a string
        if (data['ldap-enable'] && !(typeof data['ldap-enable'] === 'string' || data['ldap-enable'] instanceof String)) {
            throw new Error("Expected the field `ldap-enable` to be a primitive type in the JSON string but got " + data['ldap-enable']);
        }
        // ensure the json data is a string
        if (data['ldap-url'] && !(typeof data['ldap-url'] === 'string' || data['ldap-url'] instanceof String)) {
            throw new Error("Expected the field `ldap-url` to be a primitive type in the JSON string but got " + data['ldap-url']);
        }
        // ensure the json data is a string
        if (data['signing-key-data'] && !(typeof data['signing-key-data'] === 'string' || data['signing-key-data'] instanceof String)) {
            throw new Error("Expected the field `signing-key-data` to be a primitive type in the JSON string but got " + data['signing-key-data']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['uid-token'] && !(typeof data['uid-token'] === 'string' || data['uid-token'] instanceof String)) {
            throw new Error("Expected the field `uid-token` to be a primitive type in the JSON string but got " + data['uid-token']);
        }
        // ensure the json data is a string
        if (data['user-attribute'] && !(typeof data['user-attribute'] === 'string' || data['user-attribute'] instanceof String)) {
            throw new Error("Expected the field `user-attribute` to be a primitive type in the JSON string but got " + data['user-attribute']);
        }
        // ensure the json data is a string
        if (data['user-dn'] && !(typeof data['user-dn'] === 'string' || data['user-dn'] instanceof String)) {
            throw new Error("Expected the field `user-dn` to be a primitive type in the JSON string but got " + data['user-dn']);
        }

        return true;
    }


}



/**
 * The access ID of the Ldap auth method
 * @member {String} access-id
 */
GatewayUpdateLdapAuthConfig.prototype['access-id'] = undefined;

/**
 * Bind DN
 * @member {String} bind-dn
 */
GatewayUpdateLdapAuthConfig.prototype['bind-dn'] = undefined;

/**
 * Bind DN Password
 * @member {String} bind-dn-password
 */
GatewayUpdateLdapAuthConfig.prototype['bind-dn-password'] = undefined;

/**
 * Group Attr
 * @member {String} group-attr
 */
GatewayUpdateLdapAuthConfig.prototype['group-attr'] = undefined;

/**
 * Group Dn
 * @member {String} group-dn
 */
GatewayUpdateLdapAuthConfig.prototype['group-dn'] = undefined;

/**
 * Group Filter
 * @member {String} group-filter
 */
GatewayUpdateLdapAuthConfig.prototype['group-filter'] = undefined;

/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */
GatewayUpdateLdapAuthConfig.prototype['json'] = false;

/**
 * LDAP CA Certificate (base64 encoded)
 * @member {String} ldap-ca-cert
 */
GatewayUpdateLdapAuthConfig.prototype['ldap-ca-cert'] = undefined;

/**
 * Enable Ldap [true/false]
 * @member {String} ldap-enable
 */
GatewayUpdateLdapAuthConfig.prototype['ldap-enable'] = undefined;

/**
 * LDAP Server URL, e.g. ldap://planetexpress.com:389
 * @member {String} ldap-url
 */
GatewayUpdateLdapAuthConfig.prototype['ldap-url'] = undefined;

/**
 * The private key (base64 encoded), associated with the public key defined in the Ldap auth
 * @member {String} signing-key-data
 */
GatewayUpdateLdapAuthConfig.prototype['signing-key-data'] = undefined;

/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */
GatewayUpdateLdapAuthConfig.prototype['token'] = undefined;

/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */
GatewayUpdateLdapAuthConfig.prototype['uid-token'] = undefined;

/**
 * User Attribute
 * @member {String} user-attribute
 */
GatewayUpdateLdapAuthConfig.prototype['user-attribute'] = undefined;

/**
 * User DN
 * @member {String} user-dn
 */
GatewayUpdateLdapAuthConfig.prototype['user-dn'] = undefined;






export default GatewayUpdateLdapAuthConfig;

