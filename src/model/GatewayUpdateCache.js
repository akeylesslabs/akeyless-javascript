/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GatewayUpdateCache model module.
 * @module model/GatewayUpdateCache
 * @version 4.2.4
 */
class GatewayUpdateCache {
    /**
     * Constructs a new <code>GatewayUpdateCache</code>.
     * gatewayUpdateCache is a command that updates cache settings
     * @alias module:model/GatewayUpdateCache
     */
    constructor() { 
        
        GatewayUpdateCache.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GatewayUpdateCache</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GatewayUpdateCache} obj Optional instance to populate.
     * @return {module:model/GatewayUpdateCache} The populated <code>GatewayUpdateCache</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GatewayUpdateCache();

            if (data.hasOwnProperty('backup-interval')) {
                obj['backup-interval'] = ApiClient.convertToType(data['backup-interval'], 'String');
            }
            if (data.hasOwnProperty('enable-cache')) {
                obj['enable-cache'] = ApiClient.convertToType(data['enable-cache'], 'String');
            }
            if (data.hasOwnProperty('enable-proactive')) {
                obj['enable-proactive'] = ApiClient.convertToType(data['enable-proactive'], 'String');
            }
            if (data.hasOwnProperty('json')) {
                obj['json'] = ApiClient.convertToType(data['json'], 'Boolean');
            }
            if (data.hasOwnProperty('minimum-fetch-interval')) {
                obj['minimum-fetch-interval'] = ApiClient.convertToType(data['minimum-fetch-interval'], 'String');
            }
            if (data.hasOwnProperty('stale-timeout')) {
                obj['stale-timeout'] = ApiClient.convertToType(data['stale-timeout'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('uid-token')) {
                obj['uid-token'] = ApiClient.convertToType(data['uid-token'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Secure backup interval in minutes. To ensure service continuity in case of power cycle and network outage secrets will be backed up periodically per backup interval
 * @member {String} backup-interval
 * @default '1'
 */
GatewayUpdateCache.prototype['backup-interval'] = '1';

/**
 * Enable cache [true/false]
 * @member {String} enable-cache
 */
GatewayUpdateCache.prototype['enable-cache'] = undefined;

/**
 * Enable proactive caching [true/false]
 * @member {String} enable-proactive
 */
GatewayUpdateCache.prototype['enable-proactive'] = undefined;

/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */
GatewayUpdateCache.prototype['json'] = false;

/**
 * When using Cache or/and Proactive Cache, additional secrets will be fetched upon requesting a secret, based on the requestor's access policy. Define minimum fetching interval to avoid over fetching in a given time frame
 * @member {String} minimum-fetch-interval
 * @default '5'
 */
GatewayUpdateCache.prototype['minimum-fetch-interval'] = '5';

/**
 * Stale timeout in minutes, cache entries which are not accessed within timeout will be removed from cache
 * @member {String} stale-timeout
 * @default '60'
 */
GatewayUpdateCache.prototype['stale-timeout'] = '60';

/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */
GatewayUpdateCache.prototype['token'] = undefined;

/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */
GatewayUpdateCache.prototype['uid-token'] = undefined;






export default GatewayUpdateCache;

