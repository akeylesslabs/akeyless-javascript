/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateSSHCertIssuer model module.
 * @module model/UpdateSSHCertIssuer
 * @version 5.0.6
 */
class UpdateSSHCertIssuer {
    /**
     * Constructs a new <code>UpdateSSHCertIssuer</code>.
     * @alias module:model/UpdateSSHCertIssuer
     * @param allowedUsers {String} Users allowed to fetch the certificate, e.g root,ubuntu
     * @param name {String} SSH certificate issuer name
     * @param signerKeyName {String} A key to sign the certificate with
     * @param ttl {Number} The requested Time To Live for the certificate, in seconds
     */
    constructor(allowedUsers, name, signerKeyName, ttl) { 
        
        UpdateSSHCertIssuer.initialize(this, allowedUsers, name, signerKeyName, ttl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, allowedUsers, name, signerKeyName, ttl) { 
        obj['allowed-users'] = allowedUsers || '-';
        obj['external-username'] = 'false';
        obj['json'] = false;
        obj['name'] = name;
        obj['signer-key-name'] = signerKeyName;
        obj['ttl'] = ttl;
    }

    /**
     * Constructs a <code>UpdateSSHCertIssuer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateSSHCertIssuer} obj Optional instance to populate.
     * @return {module:model/UpdateSSHCertIssuer} The populated <code>UpdateSSHCertIssuer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateSSHCertIssuer();

            if (data.hasOwnProperty('ProviderType')) {
                obj['ProviderType'] = ApiClient.convertToType(data['ProviderType'], 'String');
            }
            if (data.hasOwnProperty('add-tag')) {
                obj['add-tag'] = ApiClient.convertToType(data['add-tag'], ['String']);
            }
            if (data.hasOwnProperty('allowed-users')) {
                obj['allowed-users'] = ApiClient.convertToType(data['allowed-users'], 'String');
            }
            if (data.hasOwnProperty('delete_protection')) {
                obj['delete_protection'] = ApiClient.convertToType(data['delete_protection'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('extensions')) {
                obj['extensions'] = ApiClient.convertToType(data['extensions'], {'String': 'String'});
            }
            if (data.hasOwnProperty('external-username')) {
                obj['external-username'] = ApiClient.convertToType(data['external-username'], 'String');
            }
            if (data.hasOwnProperty('fixed-user-claim-keyname')) {
                obj['fixed-user-claim-keyname'] = ApiClient.convertToType(data['fixed-user-claim-keyname'], 'String');
            }
            if (data.hasOwnProperty('host-provider')) {
                obj['host-provider'] = ApiClient.convertToType(data['host-provider'], 'String');
            }
            if (data.hasOwnProperty('json')) {
                obj['json'] = ApiClient.convertToType(data['json'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('new-name')) {
                obj['new-name'] = ApiClient.convertToType(data['new-name'], 'String');
            }
            if (data.hasOwnProperty('principals')) {
                obj['principals'] = ApiClient.convertToType(data['principals'], 'String');
            }
            if (data.hasOwnProperty('rm-tag')) {
                obj['rm-tag'] = ApiClient.convertToType(data['rm-tag'], ['String']);
            }
            if (data.hasOwnProperty('secure-access-api')) {
                obj['secure-access-api'] = ApiClient.convertToType(data['secure-access-api'], 'String');
            }
            if (data.hasOwnProperty('secure-access-bastion-api')) {
                obj['secure-access-bastion-api'] = ApiClient.convertToType(data['secure-access-bastion-api'], 'String');
            }
            if (data.hasOwnProperty('secure-access-bastion-ssh')) {
                obj['secure-access-bastion-ssh'] = ApiClient.convertToType(data['secure-access-bastion-ssh'], 'String');
            }
            if (data.hasOwnProperty('secure-access-enable')) {
                obj['secure-access-enable'] = ApiClient.convertToType(data['secure-access-enable'], 'String');
            }
            if (data.hasOwnProperty('secure-access-enforce-hosts-restriction')) {
                obj['secure-access-enforce-hosts-restriction'] = ApiClient.convertToType(data['secure-access-enforce-hosts-restriction'], 'Boolean');
            }
            if (data.hasOwnProperty('secure-access-gateway')) {
                obj['secure-access-gateway'] = ApiClient.convertToType(data['secure-access-gateway'], 'String');
            }
            if (data.hasOwnProperty('secure-access-host')) {
                obj['secure-access-host'] = ApiClient.convertToType(data['secure-access-host'], ['String']);
            }
            if (data.hasOwnProperty('secure-access-ssh')) {
                obj['secure-access-ssh'] = ApiClient.convertToType(data['secure-access-ssh'], 'String');
            }
            if (data.hasOwnProperty('secure-access-ssh-creds-user')) {
                obj['secure-access-ssh-creds-user'] = ApiClient.convertToType(data['secure-access-ssh-creds-user'], 'String');
            }
            if (data.hasOwnProperty('secure-access-use-internal-bastion')) {
                obj['secure-access-use-internal-bastion'] = ApiClient.convertToType(data['secure-access-use-internal-bastion'], 'Boolean');
            }
            if (data.hasOwnProperty('secure-access-use-internal-ssh-access')) {
                obj['secure-access-use-internal-ssh-access'] = ApiClient.convertToType(data['secure-access-use-internal-ssh-access'], 'Boolean');
            }
            if (data.hasOwnProperty('signer-key-name')) {
                obj['signer-key-name'] = ApiClient.convertToType(data['signer-key-name'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'Number');
            }
            if (data.hasOwnProperty('uid-token')) {
                obj['uid-token'] = ApiClient.convertToType(data['uid-token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateSSHCertIssuer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateSSHCertIssuer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateSSHCertIssuer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ProviderType'] && !(typeof data['ProviderType'] === 'string' || data['ProviderType'] instanceof String)) {
            throw new Error("Expected the field `ProviderType` to be a primitive type in the JSON string but got " + data['ProviderType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['add-tag'])) {
            throw new Error("Expected the field `add-tag` to be an array in the JSON data but got " + data['add-tag']);
        }
        // ensure the json data is a string
        if (data['allowed-users'] && !(typeof data['allowed-users'] === 'string' || data['allowed-users'] instanceof String)) {
            throw new Error("Expected the field `allowed-users` to be a primitive type in the JSON string but got " + data['allowed-users']);
        }
        // ensure the json data is a string
        if (data['delete_protection'] && !(typeof data['delete_protection'] === 'string' || data['delete_protection'] instanceof String)) {
            throw new Error("Expected the field `delete_protection` to be a primitive type in the JSON string but got " + data['delete_protection']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['external-username'] && !(typeof data['external-username'] === 'string' || data['external-username'] instanceof String)) {
            throw new Error("Expected the field `external-username` to be a primitive type in the JSON string but got " + data['external-username']);
        }
        // ensure the json data is a string
        if (data['fixed-user-claim-keyname'] && !(typeof data['fixed-user-claim-keyname'] === 'string' || data['fixed-user-claim-keyname'] instanceof String)) {
            throw new Error("Expected the field `fixed-user-claim-keyname` to be a primitive type in the JSON string but got " + data['fixed-user-claim-keyname']);
        }
        // ensure the json data is a string
        if (data['host-provider'] && !(typeof data['host-provider'] === 'string' || data['host-provider'] instanceof String)) {
            throw new Error("Expected the field `host-provider` to be a primitive type in the JSON string but got " + data['host-provider']);
        }
        // ensure the json data is a string
        if (data['metadata'] && !(typeof data['metadata'] === 'string' || data['metadata'] instanceof String)) {
            throw new Error("Expected the field `metadata` to be a primitive type in the JSON string but got " + data['metadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['new-name'] && !(typeof data['new-name'] === 'string' || data['new-name'] instanceof String)) {
            throw new Error("Expected the field `new-name` to be a primitive type in the JSON string but got " + data['new-name']);
        }
        // ensure the json data is a string
        if (data['principals'] && !(typeof data['principals'] === 'string' || data['principals'] instanceof String)) {
            throw new Error("Expected the field `principals` to be a primitive type in the JSON string but got " + data['principals']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['rm-tag'])) {
            throw new Error("Expected the field `rm-tag` to be an array in the JSON data but got " + data['rm-tag']);
        }
        // ensure the json data is a string
        if (data['secure-access-api'] && !(typeof data['secure-access-api'] === 'string' || data['secure-access-api'] instanceof String)) {
            throw new Error("Expected the field `secure-access-api` to be a primitive type in the JSON string but got " + data['secure-access-api']);
        }
        // ensure the json data is a string
        if (data['secure-access-bastion-api'] && !(typeof data['secure-access-bastion-api'] === 'string' || data['secure-access-bastion-api'] instanceof String)) {
            throw new Error("Expected the field `secure-access-bastion-api` to be a primitive type in the JSON string but got " + data['secure-access-bastion-api']);
        }
        // ensure the json data is a string
        if (data['secure-access-bastion-ssh'] && !(typeof data['secure-access-bastion-ssh'] === 'string' || data['secure-access-bastion-ssh'] instanceof String)) {
            throw new Error("Expected the field `secure-access-bastion-ssh` to be a primitive type in the JSON string but got " + data['secure-access-bastion-ssh']);
        }
        // ensure the json data is a string
        if (data['secure-access-enable'] && !(typeof data['secure-access-enable'] === 'string' || data['secure-access-enable'] instanceof String)) {
            throw new Error("Expected the field `secure-access-enable` to be a primitive type in the JSON string but got " + data['secure-access-enable']);
        }
        // ensure the json data is a string
        if (data['secure-access-gateway'] && !(typeof data['secure-access-gateway'] === 'string' || data['secure-access-gateway'] instanceof String)) {
            throw new Error("Expected the field `secure-access-gateway` to be a primitive type in the JSON string but got " + data['secure-access-gateway']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['secure-access-host'])) {
            throw new Error("Expected the field `secure-access-host` to be an array in the JSON data but got " + data['secure-access-host']);
        }
        // ensure the json data is a string
        if (data['secure-access-ssh'] && !(typeof data['secure-access-ssh'] === 'string' || data['secure-access-ssh'] instanceof String)) {
            throw new Error("Expected the field `secure-access-ssh` to be a primitive type in the JSON string but got " + data['secure-access-ssh']);
        }
        // ensure the json data is a string
        if (data['secure-access-ssh-creds-user'] && !(typeof data['secure-access-ssh-creds-user'] === 'string' || data['secure-access-ssh-creds-user'] instanceof String)) {
            throw new Error("Expected the field `secure-access-ssh-creds-user` to be a primitive type in the JSON string but got " + data['secure-access-ssh-creds-user']);
        }
        // ensure the json data is a string
        if (data['signer-key-name'] && !(typeof data['signer-key-name'] === 'string' || data['signer-key-name'] instanceof String)) {
            throw new Error("Expected the field `signer-key-name` to be a primitive type in the JSON string but got " + data['signer-key-name']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['uid-token'] && !(typeof data['uid-token'] === 'string' || data['uid-token'] instanceof String)) {
            throw new Error("Expected the field `uid-token` to be a primitive type in the JSON string but got " + data['uid-token']);
        }

        return true;
    }


}

UpdateSSHCertIssuer.RequiredProperties = ["allowed-users", "name", "signer-key-name", "ttl"];

/**
 * @member {String} ProviderType
 */
UpdateSSHCertIssuer.prototype['ProviderType'] = undefined;

/**
 * List of the new tags that will be attached to this item
 * @member {Array.<String>} add-tag
 */
UpdateSSHCertIssuer.prototype['add-tag'] = undefined;

/**
 * Users allowed to fetch the certificate, e.g root,ubuntu
 * @member {String} allowed-users
 * @default '-'
 */
UpdateSSHCertIssuer.prototype['allowed-users'] = '-';

/**
 * Protection from accidental deletion of this object [true/false]
 * @member {String} delete_protection
 */
UpdateSSHCertIssuer.prototype['delete_protection'] = undefined;

/**
 * Description of the object
 * @member {String} description
 */
UpdateSSHCertIssuer.prototype['description'] = undefined;

/**
 * Signed certificates with extensions, e.g permit-port-forwarding=\\\"\\\"
 * @member {Object.<String, String>} extensions
 */
UpdateSSHCertIssuer.prototype['extensions'] = undefined;

/**
 * Externally provided username [true/false]
 * @member {String} external-username
 * @default 'false'
 */
UpdateSSHCertIssuer.prototype['external-username'] = 'false';

/**
 * For externally provided users, denotes the key-name of IdP claim to extract the username from (relevant only for external-username=true)
 * @member {String} fixed-user-claim-keyname
 */
UpdateSSHCertIssuer.prototype['fixed-user-claim-keyname'] = undefined;

/**
 * Host provider type [explicit/target], Default Host provider is explicit, Relevant only for Secure Remote Access of ssh cert issuer, ldap rotated secret and ldap dynamic secret
 * @member {String} host-provider
 */
UpdateSSHCertIssuer.prototype['host-provider'] = undefined;

/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */
UpdateSSHCertIssuer.prototype['json'] = false;

/**
 * Deprecated - use description
 * @member {String} metadata
 */
UpdateSSHCertIssuer.prototype['metadata'] = undefined;

/**
 * SSH certificate issuer name
 * @member {String} name
 */
UpdateSSHCertIssuer.prototype['name'] = undefined;

/**
 * New item name
 * @member {String} new-name
 */
UpdateSSHCertIssuer.prototype['new-name'] = undefined;

/**
 * Signed certificates with principal, e.g example_role1,example_role2
 * @member {String} principals
 */
UpdateSSHCertIssuer.prototype['principals'] = undefined;

/**
 * List of the existent tags that will be removed from this item
 * @member {Array.<String>} rm-tag
 */
UpdateSSHCertIssuer.prototype['rm-tag'] = undefined;

/**
 * Secure Access SSH control API endpoint. E.g. https://my.sra-server:9900
 * @member {String} secure-access-api
 */
UpdateSSHCertIssuer.prototype['secure-access-api'] = undefined;

/**
 * Deprecated. use secure-access-api
 * @member {String} secure-access-bastion-api
 */
UpdateSSHCertIssuer.prototype['secure-access-bastion-api'] = undefined;

/**
 * Deprecated. use secure-access-ssh
 * @member {String} secure-access-bastion-ssh
 */
UpdateSSHCertIssuer.prototype['secure-access-bastion-ssh'] = undefined;

/**
 * Enable/Disable secure remote access [true/false]
 * @member {String} secure-access-enable
 */
UpdateSSHCertIssuer.prototype['secure-access-enable'] = undefined;

/**
 * Enable this flag to enforce connections only to the hosts listed in --secure-access-host
 * @member {Boolean} secure-access-enforce-hosts-restriction
 */
UpdateSSHCertIssuer.prototype['secure-access-enforce-hosts-restriction'] = undefined;

/**
 * @member {String} secure-access-gateway
 */
UpdateSSHCertIssuer.prototype['secure-access-gateway'] = undefined;

/**
 * Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)
 * @member {Array.<String>} secure-access-host
 */
UpdateSSHCertIssuer.prototype['secure-access-host'] = undefined;

/**
 * Bastion's SSH server. E.g. my.sra-server:22
 * @member {String} secure-access-ssh
 */
UpdateSSHCertIssuer.prototype['secure-access-ssh'] = undefined;

/**
 * SSH username to connect to target server, must be in 'Allowed Users' list
 * @member {String} secure-access-ssh-creds-user
 */
UpdateSSHCertIssuer.prototype['secure-access-ssh-creds-user'] = undefined;

/**
 * Deprecated. Use secure-access-use-internal-ssh-access
 * @member {Boolean} secure-access-use-internal-bastion
 */
UpdateSSHCertIssuer.prototype['secure-access-use-internal-bastion'] = undefined;

/**
 * Use internal SSH Access
 * @member {Boolean} secure-access-use-internal-ssh-access
 */
UpdateSSHCertIssuer.prototype['secure-access-use-internal-ssh-access'] = undefined;

/**
 * A key to sign the certificate with
 * @member {String} signer-key-name
 */
UpdateSSHCertIssuer.prototype['signer-key-name'] = undefined;

/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */
UpdateSSHCertIssuer.prototype['token'] = undefined;

/**
 * The requested Time To Live for the certificate, in seconds
 * @member {Number} ttl
 */
UpdateSSHCertIssuer.prototype['ttl'] = undefined;

/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */
UpdateSSHCertIssuer.prototype['uid-token'] = undefined;






export default UpdateSSHCertIssuer;

