/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LdapTargetDetails model module.
 * @module model/LdapTargetDetails
 * @version 5.0.2
 */
class LdapTargetDetails {
    /**
     * Constructs a new <code>LdapTargetDetails</code>.
     * LdapTargetDetails
     * @alias module:model/LdapTargetDetails
     */
    constructor() { 
        
        LdapTargetDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LdapTargetDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LdapTargetDetails} obj Optional instance to populate.
     * @return {module:model/LdapTargetDetails} The populated <code>LdapTargetDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LdapTargetDetails();

            if (data.hasOwnProperty('implementation_type')) {
                obj['implementation_type'] = ApiClient.convertToType(data['implementation_type'], 'String');
            }
            if (data.hasOwnProperty('ldap_audience')) {
                obj['ldap_audience'] = ApiClient.convertToType(data['ldap_audience'], 'String');
            }
            if (data.hasOwnProperty('ldap_bind_dn')) {
                obj['ldap_bind_dn'] = ApiClient.convertToType(data['ldap_bind_dn'], 'String');
            }
            if (data.hasOwnProperty('ldap_bind_password')) {
                obj['ldap_bind_password'] = ApiClient.convertToType(data['ldap_bind_password'], 'String');
            }
            if (data.hasOwnProperty('ldap_certificate')) {
                obj['ldap_certificate'] = ApiClient.convertToType(data['ldap_certificate'], 'String');
            }
            if (data.hasOwnProperty('ldap_token_expiration')) {
                obj['ldap_token_expiration'] = ApiClient.convertToType(data['ldap_token_expiration'], 'String');
            }
            if (data.hasOwnProperty('ldap_url')) {
                obj['ldap_url'] = ApiClient.convertToType(data['ldap_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LdapTargetDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LdapTargetDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['implementation_type'] && !(typeof data['implementation_type'] === 'string' || data['implementation_type'] instanceof String)) {
            throw new Error("Expected the field `implementation_type` to be a primitive type in the JSON string but got " + data['implementation_type']);
        }
        // ensure the json data is a string
        if (data['ldap_audience'] && !(typeof data['ldap_audience'] === 'string' || data['ldap_audience'] instanceof String)) {
            throw new Error("Expected the field `ldap_audience` to be a primitive type in the JSON string but got " + data['ldap_audience']);
        }
        // ensure the json data is a string
        if (data['ldap_bind_dn'] && !(typeof data['ldap_bind_dn'] === 'string' || data['ldap_bind_dn'] instanceof String)) {
            throw new Error("Expected the field `ldap_bind_dn` to be a primitive type in the JSON string but got " + data['ldap_bind_dn']);
        }
        // ensure the json data is a string
        if (data['ldap_bind_password'] && !(typeof data['ldap_bind_password'] === 'string' || data['ldap_bind_password'] instanceof String)) {
            throw new Error("Expected the field `ldap_bind_password` to be a primitive type in the JSON string but got " + data['ldap_bind_password']);
        }
        // ensure the json data is a string
        if (data['ldap_certificate'] && !(typeof data['ldap_certificate'] === 'string' || data['ldap_certificate'] instanceof String)) {
            throw new Error("Expected the field `ldap_certificate` to be a primitive type in the JSON string but got " + data['ldap_certificate']);
        }
        // ensure the json data is a string
        if (data['ldap_token_expiration'] && !(typeof data['ldap_token_expiration'] === 'string' || data['ldap_token_expiration'] instanceof String)) {
            throw new Error("Expected the field `ldap_token_expiration` to be a primitive type in the JSON string but got " + data['ldap_token_expiration']);
        }
        // ensure the json data is a string
        if (data['ldap_url'] && !(typeof data['ldap_url'] === 'string' || data['ldap_url'] instanceof String)) {
            throw new Error("Expected the field `ldap_url` to be a primitive type in the JSON string but got " + data['ldap_url']);
        }

        return true;
    }


}



/**
 * @member {String} implementation_type
 */
LdapTargetDetails.prototype['implementation_type'] = undefined;

/**
 * @member {String} ldap_audience
 */
LdapTargetDetails.prototype['ldap_audience'] = undefined;

/**
 * @member {String} ldap_bind_dn
 */
LdapTargetDetails.prototype['ldap_bind_dn'] = undefined;

/**
 * @member {String} ldap_bind_password
 */
LdapTargetDetails.prototype['ldap_bind_password'] = undefined;

/**
 * @member {String} ldap_certificate
 */
LdapTargetDetails.prototype['ldap_certificate'] = undefined;

/**
 * @member {String} ldap_token_expiration
 */
LdapTargetDetails.prototype['ldap_token_expiration'] = undefined;

/**
 * @member {String} ldap_url
 */
LdapTargetDetails.prototype['ldap_url'] = undefined;






export default LdapTargetDetails;

