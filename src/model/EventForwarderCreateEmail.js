/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventForwarderCreateEmail model module.
 * @module model/EventForwarderCreateEmail
 * @version 5.0.0
 */
class EventForwarderCreateEmail {
    /**
     * Constructs a new <code>EventForwarderCreateEmail</code>.
     * eventForwarderCreateEmail is a command that creates email event forwarder
     * @alias module:model/EventForwarderCreateEmail
     * @param gatewaysEventSourceLocations {Array.<String>} Event sources
     * @param name {String} EventForwarder name
     * @param runnerType {String} 
     */
    constructor(gatewaysEventSourceLocations, name, runnerType) { 
        
        EventForwarderCreateEmail.initialize(this, gatewaysEventSourceLocations, name, runnerType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, gatewaysEventSourceLocations, name, runnerType) { 
        obj['gateways-event-source-locations'] = gatewaysEventSourceLocations;
        obj['json'] = false;
        obj['name'] = name;
        obj['runner-type'] = runnerType;
    }

    /**
     * Constructs a <code>EventForwarderCreateEmail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventForwarderCreateEmail} obj Optional instance to populate.
     * @return {module:model/EventForwarderCreateEmail} The populated <code>EventForwarderCreateEmail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventForwarderCreateEmail();

            if (data.hasOwnProperty('auth-methods-event-source-locations')) {
                obj['auth-methods-event-source-locations'] = ApiClient.convertToType(data['auth-methods-event-source-locations'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('email-to')) {
                obj['email-to'] = ApiClient.convertToType(data['email-to'], 'String');
            }
            if (data.hasOwnProperty('event-types')) {
                obj['event-types'] = ApiClient.convertToType(data['event-types'], ['String']);
            }
            if (data.hasOwnProperty('every')) {
                obj['every'] = ApiClient.convertToType(data['every'], 'String');
            }
            if (data.hasOwnProperty('gateways-event-source-locations')) {
                obj['gateways-event-source-locations'] = ApiClient.convertToType(data['gateways-event-source-locations'], ['String']);
            }
            if (data.hasOwnProperty('include-error')) {
                obj['include-error'] = ApiClient.convertToType(data['include-error'], 'String');
            }
            if (data.hasOwnProperty('items-event-source-locations')) {
                obj['items-event-source-locations'] = ApiClient.convertToType(data['items-event-source-locations'], ['String']);
            }
            if (data.hasOwnProperty('json')) {
                obj['json'] = ApiClient.convertToType(data['json'], 'Boolean');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('override-url')) {
                obj['override-url'] = ApiClient.convertToType(data['override-url'], 'String');
            }
            if (data.hasOwnProperty('runner-type')) {
                obj['runner-type'] = ApiClient.convertToType(data['runner-type'], 'String');
            }
            if (data.hasOwnProperty('targets-event-source-locations')) {
                obj['targets-event-source-locations'] = ApiClient.convertToType(data['targets-event-source-locations'], ['String']);
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('uid-token')) {
                obj['uid-token'] = ApiClient.convertToType(data['uid-token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventForwarderCreateEmail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventForwarderCreateEmail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventForwarderCreateEmail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['auth-methods-event-source-locations'])) {
            throw new Error("Expected the field `auth-methods-event-source-locations` to be an array in the JSON data but got " + data['auth-methods-event-source-locations']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['email-to'] && !(typeof data['email-to'] === 'string' || data['email-to'] instanceof String)) {
            throw new Error("Expected the field `email-to` to be a primitive type in the JSON string but got " + data['email-to']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['event-types'])) {
            throw new Error("Expected the field `event-types` to be an array in the JSON data but got " + data['event-types']);
        }
        // ensure the json data is a string
        if (data['every'] && !(typeof data['every'] === 'string' || data['every'] instanceof String)) {
            throw new Error("Expected the field `every` to be a primitive type in the JSON string but got " + data['every']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['gateways-event-source-locations'])) {
            throw new Error("Expected the field `gateways-event-source-locations` to be an array in the JSON data but got " + data['gateways-event-source-locations']);
        }
        // ensure the json data is a string
        if (data['include-error'] && !(typeof data['include-error'] === 'string' || data['include-error'] instanceof String)) {
            throw new Error("Expected the field `include-error` to be a primitive type in the JSON string but got " + data['include-error']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['items-event-source-locations'])) {
            throw new Error("Expected the field `items-event-source-locations` to be an array in the JSON data but got " + data['items-event-source-locations']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['override-url'] && !(typeof data['override-url'] === 'string' || data['override-url'] instanceof String)) {
            throw new Error("Expected the field `override-url` to be a primitive type in the JSON string but got " + data['override-url']);
        }
        // ensure the json data is a string
        if (data['runner-type'] && !(typeof data['runner-type'] === 'string' || data['runner-type'] instanceof String)) {
            throw new Error("Expected the field `runner-type` to be a primitive type in the JSON string but got " + data['runner-type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['targets-event-source-locations'])) {
            throw new Error("Expected the field `targets-event-source-locations` to be an array in the JSON data but got " + data['targets-event-source-locations']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['uid-token'] && !(typeof data['uid-token'] === 'string' || data['uid-token'] instanceof String)) {
            throw new Error("Expected the field `uid-token` to be a primitive type in the JSON string but got " + data['uid-token']);
        }

        return true;
    }


}

EventForwarderCreateEmail.RequiredProperties = ["gateways-event-source-locations", "name", "runner-type"];

/**
 * Auth Method Event sources
 * @member {Array.<String>} auth-methods-event-source-locations
 */
EventForwarderCreateEmail.prototype['auth-methods-event-source-locations'] = undefined;

/**
 * Description of the object
 * @member {String} description
 */
EventForwarderCreateEmail.prototype['description'] = undefined;

/**
 * A comma seperated list of email addresses to send event to
 * @member {String} email-to
 */
EventForwarderCreateEmail.prototype['email-to'] = undefined;

/**
 * List of event types to notify about [request-access, certificate-pending-expiration, certificate-expired, certificate-provisioning-success, certificate-provisioning-failure, auth-method-pending-expiration, auth-method-expired, next-automatic-rotation, rotated-secret-success, rotated-secret-failure, dynamic-secret-failure, multi-auth-failure, uid-rotation-failure, apply-justification, email-auth-method-approved, usage, rotation-usage, gateway-inactive, static-secret-updated, rate-limiting, usage-report, secret-sync]
 * @member {Array.<String>} event-types
 */
EventForwarderCreateEmail.prototype['event-types'] = undefined;

/**
 * Rate of periodic runner repetition in hours
 * @member {String} every
 */
EventForwarderCreateEmail.prototype['every'] = undefined;

/**
 * Event sources
 * @member {Array.<String>} gateways-event-source-locations
 */
EventForwarderCreateEmail.prototype['gateways-event-source-locations'] = undefined;

/**
 * Set this option to include event errors details [true/false]
 * @member {String} include-error
 */
EventForwarderCreateEmail.prototype['include-error'] = undefined;

/**
 * Items Event sources
 * @member {Array.<String>} items-event-source-locations
 */
EventForwarderCreateEmail.prototype['items-event-source-locations'] = undefined;

/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */
EventForwarderCreateEmail.prototype['json'] = false;

/**
 * The name of a key that used to encrypt the EventForwarder secret value (if empty, the account default protectionKey key will be used)
 * @member {String} key
 */
EventForwarderCreateEmail.prototype['key'] = undefined;

/**
 * EventForwarder name
 * @member {String} name
 */
EventForwarderCreateEmail.prototype['name'] = undefined;

/**
 * Override Akeyless default URL with your Gateway url (port 18888)
 * @member {String} override-url
 */
EventForwarderCreateEmail.prototype['override-url'] = undefined;

/**
 * @member {String} runner-type
 */
EventForwarderCreateEmail.prototype['runner-type'] = undefined;

/**
 * Targets Event sources
 * @member {Array.<String>} targets-event-source-locations
 */
EventForwarderCreateEmail.prototype['targets-event-source-locations'] = undefined;

/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */
EventForwarderCreateEmail.prototype['token'] = undefined;

/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */
EventForwarderCreateEmail.prototype['uid-token'] = undefined;






export default EventForwarderCreateEmail;

