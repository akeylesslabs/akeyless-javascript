/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateExpirationEvent from './CertificateExpirationEvent';

/**
 * The PKICertificateIssueDetails model module.
 * @module model/PKICertificateIssueDetails
 * @version 5.0.12
 */
class PKICertificateIssueDetails {
    /**
     * Constructs a new <code>PKICertificateIssueDetails</code>.
     * @alias module:model/PKICertificateIssueDetails
     */
    constructor() { 
        
        PKICertificateIssueDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PKICertificateIssueDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PKICertificateIssueDetails} obj Optional instance to populate.
     * @return {module:model/PKICertificateIssueDetails} The populated <code>PKICertificateIssueDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PKICertificateIssueDetails();

            if (data.hasOwnProperty('acme_enabled')) {
                obj['acme_enabled'] = ApiClient.convertToType(data['acme_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_any_name')) {
                obj['allow_any_name'] = ApiClient.convertToType(data['allow_any_name'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_copy_ext_from_csr')) {
                obj['allow_copy_ext_from_csr'] = ApiClient.convertToType(data['allow_copy_ext_from_csr'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_subdomains')) {
                obj['allow_subdomains'] = ApiClient.convertToType(data['allow_subdomains'], 'Boolean');
            }
            if (data.hasOwnProperty('allowed_domains_list')) {
                obj['allowed_domains_list'] = ApiClient.convertToType(data['allowed_domains_list'], ['String']);
            }
            if (data.hasOwnProperty('allowed_extra_extensions')) {
                obj['allowed_extra_extensions'] = ApiClient.convertToType(data['allowed_extra_extensions'], {'String': ['String']});
            }
            if (data.hasOwnProperty('allowed_ip_sans')) {
                obj['allowed_ip_sans'] = ApiClient.convertToType(data['allowed_ip_sans'], ['String']);
            }
            if (data.hasOwnProperty('allowed_uri_sans')) {
                obj['allowed_uri_sans'] = ApiClient.convertToType(data['allowed_uri_sans'], ['String']);
            }
            if (data.hasOwnProperty('auto_renew_certificate')) {
                obj['auto_renew_certificate'] = ApiClient.convertToType(data['auto_renew_certificate'], 'Boolean');
            }
            if (data.hasOwnProperty('basic_constraints_valid_for_non_ca')) {
                obj['basic_constraints_valid_for_non_ca'] = ApiClient.convertToType(data['basic_constraints_valid_for_non_ca'], 'Boolean');
            }
            if (data.hasOwnProperty('certificate_authority_mode')) {
                obj['certificate_authority_mode'] = ApiClient.convertToType(data['certificate_authority_mode'], 'String');
            }
            if (data.hasOwnProperty('client_flag')) {
                obj['client_flag'] = ApiClient.convertToType(data['client_flag'], 'Boolean');
            }
            if (data.hasOwnProperty('code_signing_flag')) {
                obj['code_signing_flag'] = ApiClient.convertToType(data['code_signing_flag'], 'Boolean');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], ['String']);
            }
            if (data.hasOwnProperty('create_private_crl')) {
                obj['create_private_crl'] = ApiClient.convertToType(data['create_private_crl'], 'Boolean');
            }
            if (data.hasOwnProperty('create_public_crl')) {
                obj['create_public_crl'] = ApiClient.convertToType(data['create_public_crl'], 'Boolean');
            }
            if (data.hasOwnProperty('destination_path')) {
                obj['destination_path'] = ApiClient.convertToType(data['destination_path'], 'String');
            }
            if (data.hasOwnProperty('disable_wildcards')) {
                obj['disable_wildcards'] = ApiClient.convertToType(data['disable_wildcards'], 'Boolean');
            }
            if (data.hasOwnProperty('enforce_hostnames')) {
                obj['enforce_hostnames'] = ApiClient.convertToType(data['enforce_hostnames'], 'Boolean');
            }
            if (data.hasOwnProperty('expiration_events')) {
                obj['expiration_events'] = ApiClient.convertToType(data['expiration_events'], [CertificateExpirationEvent]);
            }
            if (data.hasOwnProperty('gw_cluster_id')) {
                obj['gw_cluster_id'] = ApiClient.convertToType(data['gw_cluster_id'], 'Number');
            }
            if (data.hasOwnProperty('gw_cluster_url')) {
                obj['gw_cluster_url'] = ApiClient.convertToType(data['gw_cluster_url'], 'String');
            }
            if (data.hasOwnProperty('is_ca')) {
                obj['is_ca'] = ApiClient.convertToType(data['is_ca'], 'Boolean');
            }
            if (data.hasOwnProperty('key_bits')) {
                obj['key_bits'] = ApiClient.convertToType(data['key_bits'], 'Number');
            }
            if (data.hasOwnProperty('key_type')) {
                obj['key_type'] = ApiClient.convertToType(data['key_type'], 'String');
            }
            if (data.hasOwnProperty('key_usage_list')) {
                obj['key_usage_list'] = ApiClient.convertToType(data['key_usage_list'], ['String']);
            }
            if (data.hasOwnProperty('locality')) {
                obj['locality'] = ApiClient.convertToType(data['locality'], ['String']);
            }
            if (data.hasOwnProperty('max_path_len')) {
                obj['max_path_len'] = ApiClient.convertToType(data['max_path_len'], 'Number');
            }
            if (data.hasOwnProperty('non_critical_key_usage')) {
                obj['non_critical_key_usage'] = ApiClient.convertToType(data['non_critical_key_usage'], 'Boolean');
            }
            if (data.hasOwnProperty('not_before_duration')) {
                obj['not_before_duration'] = ApiClient.convertToType(data['not_before_duration'], 'Number');
            }
            if (data.hasOwnProperty('organization_list')) {
                obj['organization_list'] = ApiClient.convertToType(data['organization_list'], ['String']);
            }
            if (data.hasOwnProperty('organization_unit_list')) {
                obj['organization_unit_list'] = ApiClient.convertToType(data['organization_unit_list'], ['String']);
            }
            if (data.hasOwnProperty('pki_issuer_type')) {
                obj['pki_issuer_type'] = ApiClient.convertToType(data['pki_issuer_type'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], ['String']);
            }
            if (data.hasOwnProperty('protect_generated_certificates')) {
                obj['protect_generated_certificates'] = ApiClient.convertToType(data['protect_generated_certificates'], 'Boolean');
            }
            if (data.hasOwnProperty('province')) {
                obj['province'] = ApiClient.convertToType(data['province'], ['String']);
            }
            if (data.hasOwnProperty('renew_before_expiration_in_days')) {
                obj['renew_before_expiration_in_days'] = ApiClient.convertToType(data['renew_before_expiration_in_days'], 'Number');
            }
            if (data.hasOwnProperty('require_cn')) {
                obj['require_cn'] = ApiClient.convertToType(data['require_cn'], 'Boolean');
            }
            if (data.hasOwnProperty('server_flag')) {
                obj['server_flag'] = ApiClient.convertToType(data['server_flag'], 'Boolean');
            }
            if (data.hasOwnProperty('street_address')) {
                obj['street_address'] = ApiClient.convertToType(data['street_address'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PKICertificateIssueDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PKICertificateIssueDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['allowed_domains_list'])) {
            throw new Error("Expected the field `allowed_domains_list` to be an array in the JSON data but got " + data['allowed_domains_list']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowed_ip_sans'])) {
            throw new Error("Expected the field `allowed_ip_sans` to be an array in the JSON data but got " + data['allowed_ip_sans']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowed_uri_sans'])) {
            throw new Error("Expected the field `allowed_uri_sans` to be an array in the JSON data but got " + data['allowed_uri_sans']);
        }
        // ensure the json data is a string
        if (data['certificate_authority_mode'] && !(typeof data['certificate_authority_mode'] === 'string' || data['certificate_authority_mode'] instanceof String)) {
            throw new Error("Expected the field `certificate_authority_mode` to be a primitive type in the JSON string but got " + data['certificate_authority_mode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['country'])) {
            throw new Error("Expected the field `country` to be an array in the JSON data but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['destination_path'] && !(typeof data['destination_path'] === 'string' || data['destination_path'] instanceof String)) {
            throw new Error("Expected the field `destination_path` to be a primitive type in the JSON string but got " + data['destination_path']);
        }
        if (data['expiration_events']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['expiration_events'])) {
                throw new Error("Expected the field `expiration_events` to be an array in the JSON data but got " + data['expiration_events']);
            }
            // validate the optional field `expiration_events` (array)
            for (const item of data['expiration_events']) {
                CertificateExpirationEvent.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['gw_cluster_url'] && !(typeof data['gw_cluster_url'] === 'string' || data['gw_cluster_url'] instanceof String)) {
            throw new Error("Expected the field `gw_cluster_url` to be a primitive type in the JSON string but got " + data['gw_cluster_url']);
        }
        // ensure the json data is a string
        if (data['key_type'] && !(typeof data['key_type'] === 'string' || data['key_type'] instanceof String)) {
            throw new Error("Expected the field `key_type` to be a primitive type in the JSON string but got " + data['key_type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['key_usage_list'])) {
            throw new Error("Expected the field `key_usage_list` to be an array in the JSON data but got " + data['key_usage_list']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['locality'])) {
            throw new Error("Expected the field `locality` to be an array in the JSON data but got " + data['locality']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['organization_list'])) {
            throw new Error("Expected the field `organization_list` to be an array in the JSON data but got " + data['organization_list']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['organization_unit_list'])) {
            throw new Error("Expected the field `organization_unit_list` to be an array in the JSON data but got " + data['organization_unit_list']);
        }
        // ensure the json data is a string
        if (data['pki_issuer_type'] && !(typeof data['pki_issuer_type'] === 'string' || data['pki_issuer_type'] instanceof String)) {
            throw new Error("Expected the field `pki_issuer_type` to be a primitive type in the JSON string but got " + data['pki_issuer_type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['postal_code'])) {
            throw new Error("Expected the field `postal_code` to be an array in the JSON data but got " + data['postal_code']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['province'])) {
            throw new Error("Expected the field `province` to be an array in the JSON data but got " + data['province']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['street_address'])) {
            throw new Error("Expected the field `street_address` to be an array in the JSON data but got " + data['street_address']);
        }

        return true;
    }


}



/**
 * @member {Boolean} acme_enabled
 */
PKICertificateIssueDetails.prototype['acme_enabled'] = undefined;

/**
 * @member {Boolean} allow_any_name
 */
PKICertificateIssueDetails.prototype['allow_any_name'] = undefined;

/**
 * @member {Boolean} allow_copy_ext_from_csr
 */
PKICertificateIssueDetails.prototype['allow_copy_ext_from_csr'] = undefined;

/**
 * @member {Boolean} allow_subdomains
 */
PKICertificateIssueDetails.prototype['allow_subdomains'] = undefined;

/**
 * @member {Array.<String>} allowed_domains_list
 */
PKICertificateIssueDetails.prototype['allowed_domains_list'] = undefined;

/**
 * @member {Object.<String, Array.<String>>} allowed_extra_extensions
 */
PKICertificateIssueDetails.prototype['allowed_extra_extensions'] = undefined;

/**
 * @member {Array.<String>} allowed_ip_sans
 */
PKICertificateIssueDetails.prototype['allowed_ip_sans'] = undefined;

/**
 * @member {Array.<String>} allowed_uri_sans
 */
PKICertificateIssueDetails.prototype['allowed_uri_sans'] = undefined;

/**
 * @member {Boolean} auto_renew_certificate
 */
PKICertificateIssueDetails.prototype['auto_renew_certificate'] = undefined;

/**
 * @member {Boolean} basic_constraints_valid_for_non_ca
 */
PKICertificateIssueDetails.prototype['basic_constraints_valid_for_non_ca'] = undefined;

/**
 * @member {String} certificate_authority_mode
 */
PKICertificateIssueDetails.prototype['certificate_authority_mode'] = undefined;

/**
 * @member {Boolean} client_flag
 */
PKICertificateIssueDetails.prototype['client_flag'] = undefined;

/**
 * @member {Boolean} code_signing_flag
 */
PKICertificateIssueDetails.prototype['code_signing_flag'] = undefined;

/**
 * @member {Array.<String>} country
 */
PKICertificateIssueDetails.prototype['country'] = undefined;

/**
 * @member {Boolean} create_private_crl
 */
PKICertificateIssueDetails.prototype['create_private_crl'] = undefined;

/**
 * @member {Boolean} create_public_crl
 */
PKICertificateIssueDetails.prototype['create_public_crl'] = undefined;

/**
 * DestinationPath is the destination to save generated certificates
 * @member {String} destination_path
 */
PKICertificateIssueDetails.prototype['destination_path'] = undefined;

/**
 * @member {Boolean} disable_wildcards
 */
PKICertificateIssueDetails.prototype['disable_wildcards'] = undefined;

/**
 * @member {Boolean} enforce_hostnames
 */
PKICertificateIssueDetails.prototype['enforce_hostnames'] = undefined;

/**
 * ExpirationNotification holds a list of expiration notices that should be sent in case a certificate is about to expire, this value is being propagated to the Certificate resources that are created
 * @member {Array.<module:model/CertificateExpirationEvent>} expiration_events
 */
PKICertificateIssueDetails.prototype['expiration_events'] = undefined;

/**
 * @member {Number} gw_cluster_id
 */
PKICertificateIssueDetails.prototype['gw_cluster_id'] = undefined;

/**
 * GWClusterURL is required when CAMode is \"public\" and it defines the cluster URL the PKI should be issued from. The GW cluster must have permissions to read associated target's details
 * @member {String} gw_cluster_url
 */
PKICertificateIssueDetails.prototype['gw_cluster_url'] = undefined;

/**
 * @member {Boolean} is_ca
 */
PKICertificateIssueDetails.prototype['is_ca'] = undefined;

/**
 * @member {Number} key_bits
 */
PKICertificateIssueDetails.prototype['key_bits'] = undefined;

/**
 * @member {String} key_type
 */
PKICertificateIssueDetails.prototype['key_type'] = undefined;

/**
 * @member {Array.<String>} key_usage_list
 */
PKICertificateIssueDetails.prototype['key_usage_list'] = undefined;

/**
 * @member {Array.<String>} locality
 */
PKICertificateIssueDetails.prototype['locality'] = undefined;

/**
 * @member {Number} max_path_len
 */
PKICertificateIssueDetails.prototype['max_path_len'] = undefined;

/**
 * @member {Boolean} non_critical_key_usage
 */
PKICertificateIssueDetails.prototype['non_critical_key_usage'] = undefined;

/**
 * A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
 * @member {Number} not_before_duration
 */
PKICertificateIssueDetails.prototype['not_before_duration'] = undefined;

/**
 * @member {Array.<String>} organization_list
 */
PKICertificateIssueDetails.prototype['organization_list'] = undefined;

/**
 * @member {Array.<String>} organization_unit_list
 */
PKICertificateIssueDetails.prototype['organization_unit_list'] = undefined;

/**
 * @member {String} pki_issuer_type
 */
PKICertificateIssueDetails.prototype['pki_issuer_type'] = undefined;

/**
 * @member {Array.<String>} postal_code
 */
PKICertificateIssueDetails.prototype['postal_code'] = undefined;

/**
 * ProtectGeneratedCertificates dictates whether the created certificates should be protected from deletion
 * @member {Boolean} protect_generated_certificates
 */
PKICertificateIssueDetails.prototype['protect_generated_certificates'] = undefined;

/**
 * @member {Array.<String>} province
 */
PKICertificateIssueDetails.prototype['province'] = undefined;

/**
 * @member {Number} renew_before_expiration_in_days
 */
PKICertificateIssueDetails.prototype['renew_before_expiration_in_days'] = undefined;

/**
 * @member {Boolean} require_cn
 */
PKICertificateIssueDetails.prototype['require_cn'] = undefined;

/**
 * @member {Boolean} server_flag
 */
PKICertificateIssueDetails.prototype['server_flag'] = undefined;

/**
 * @member {Array.<String>} street_address
 */
PKICertificateIssueDetails.prototype['street_address'] = undefined;






export default PKICertificateIssueDetails;

