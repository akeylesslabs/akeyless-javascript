/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateLinkedTarget model module.
 * @module model/UpdateLinkedTarget
 * @version 5.0.0
 */
class UpdateLinkedTarget {
    /**
     * Constructs a new <code>UpdateLinkedTarget</code>.
     * updateLinkedTarget is a command that updates an existing target. [Deprecated: Use target-update-linked command]
     * @alias module:model/UpdateLinkedTarget
     * @param name {String} Linked Target name
     */
    constructor(name) { 
        
        UpdateLinkedTarget.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['json'] = false;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>UpdateLinkedTarget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateLinkedTarget} obj Optional instance to populate.
     * @return {module:model/UpdateLinkedTarget} The populated <code>UpdateLinkedTarget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateLinkedTarget();

            if (data.hasOwnProperty('add-hosts')) {
                obj['add-hosts'] = ApiClient.convertToType(data['add-hosts'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('hosts')) {
                obj['hosts'] = ApiClient.convertToType(data['hosts'], 'String');
            }
            if (data.hasOwnProperty('json')) {
                obj['json'] = ApiClient.convertToType(data['json'], 'Boolean');
            }
            if (data.hasOwnProperty('keep-prev-version')) {
                obj['keep-prev-version'] = ApiClient.convertToType(data['keep-prev-version'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('new-name')) {
                obj['new-name'] = ApiClient.convertToType(data['new-name'], 'String');
            }
            if (data.hasOwnProperty('parent-target-name')) {
                obj['parent-target-name'] = ApiClient.convertToType(data['parent-target-name'], 'String');
            }
            if (data.hasOwnProperty('rm-hosts')) {
                obj['rm-hosts'] = ApiClient.convertToType(data['rm-hosts'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uid-token')) {
                obj['uid-token'] = ApiClient.convertToType(data['uid-token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateLinkedTarget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateLinkedTarget</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateLinkedTarget.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['add-hosts'] && !(typeof data['add-hosts'] === 'string' || data['add-hosts'] instanceof String)) {
            throw new Error("Expected the field `add-hosts` to be a primitive type in the JSON string but got " + data['add-hosts']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['hosts'] && !(typeof data['hosts'] === 'string' || data['hosts'] instanceof String)) {
            throw new Error("Expected the field `hosts` to be a primitive type in the JSON string but got " + data['hosts']);
        }
        // ensure the json data is a string
        if (data['keep-prev-version'] && !(typeof data['keep-prev-version'] === 'string' || data['keep-prev-version'] instanceof String)) {
            throw new Error("Expected the field `keep-prev-version` to be a primitive type in the JSON string but got " + data['keep-prev-version']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['new-name'] && !(typeof data['new-name'] === 'string' || data['new-name'] instanceof String)) {
            throw new Error("Expected the field `new-name` to be a primitive type in the JSON string but got " + data['new-name']);
        }
        // ensure the json data is a string
        if (data['parent-target-name'] && !(typeof data['parent-target-name'] === 'string' || data['parent-target-name'] instanceof String)) {
            throw new Error("Expected the field `parent-target-name` to be a primitive type in the JSON string but got " + data['parent-target-name']);
        }
        // ensure the json data is a string
        if (data['rm-hosts'] && !(typeof data['rm-hosts'] === 'string' || data['rm-hosts'] instanceof String)) {
            throw new Error("Expected the field `rm-hosts` to be a primitive type in the JSON string but got " + data['rm-hosts']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uid-token'] && !(typeof data['uid-token'] === 'string' || data['uid-token'] instanceof String)) {
            throw new Error("Expected the field `uid-token` to be a primitive type in the JSON string but got " + data['uid-token']);
        }

        return true;
    }


}

UpdateLinkedTarget.RequiredProperties = ["name"];

/**
 * A comma seperated list of new server hosts and server descriptions joined by semicolon ';' that will be added to the Linked Target hosts.
 * @member {String} add-hosts
 */
UpdateLinkedTarget.prototype['add-hosts'] = undefined;

/**
 * Description of the object
 * @member {String} description
 */
UpdateLinkedTarget.prototype['description'] = undefined;

/**
 * A comma seperated list of server hosts and server descriptions joined by semicolon ';' (i.e. 'server-dev.com;My Dev server,server-prod.com;My Prod server description')
 * @member {String} hosts
 */
UpdateLinkedTarget.prototype['hosts'] = undefined;

/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */
UpdateLinkedTarget.prototype['json'] = false;

/**
 * Whether to keep previous version [true/false]. If not set, use default according to account settings
 * @member {String} keep-prev-version
 */
UpdateLinkedTarget.prototype['keep-prev-version'] = undefined;

/**
 * Linked Target name
 * @member {String} name
 */
UpdateLinkedTarget.prototype['name'] = undefined;

/**
 * New Linked Target name
 * @member {String} new-name
 */
UpdateLinkedTarget.prototype['new-name'] = undefined;

/**
 * The parent Target name
 * @member {String} parent-target-name
 */
UpdateLinkedTarget.prototype['parent-target-name'] = undefined;

/**
 * Comma separated list of existing hosts that will be removed from Linked Target hosts.
 * @member {String} rm-hosts
 */
UpdateLinkedTarget.prototype['rm-hosts'] = undefined;

/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */
UpdateLinkedTarget.prototype['token'] = undefined;

/**
 * Specifies the hosts type, relevant only when working without parent target
 * @member {String} type
 */
UpdateLinkedTarget.prototype['type'] = undefined;

/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */
UpdateLinkedTarget.prototype['uid-token'] = undefined;






export default UpdateLinkedTarget;

