/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateExpirationEvent from './CertificateExpirationEvent';
import CertificateInfo from './CertificateInfo';
import NullString from './NullString';

/**
 * The CertificateChainInfo model module.
 * @module model/CertificateChainInfo
 * @version 5.0.12
 */
class CertificateChainInfo {
    /**
     * Constructs a new <code>CertificateChainInfo</code>.
     * @alias module:model/CertificateChainInfo
     */
    constructor() { 
        
        CertificateChainInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateChainInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateChainInfo} obj Optional instance to populate.
     * @return {module:model/CertificateChainInfo} The populated <code>CertificateChainInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateChainInfo();

            if (data.hasOwnProperty('auto_renew_certificate')) {
                obj['auto_renew_certificate'] = ApiClient.convertToType(data['auto_renew_certificate'], 'Boolean');
            }
            if (data.hasOwnProperty('certificate_chain')) {
                obj['certificate_chain'] = ApiClient.convertToType(data['certificate_chain'], [CertificateInfo]);
            }
            if (data.hasOwnProperty('certificate_format')) {
                obj['certificate_format'] = ApiClient.convertToType(data['certificate_format'], 'String');
            }
            if (data.hasOwnProperty('certificate_has_private_key')) {
                obj['certificate_has_private_key'] = ApiClient.convertToType(data['certificate_has_private_key'], 'Boolean');
            }
            if (data.hasOwnProperty('certificate_issuer_gw_cluster_id')) {
                obj['certificate_issuer_gw_cluster_id'] = ApiClient.convertToType(data['certificate_issuer_gw_cluster_id'], 'Number');
            }
            if (data.hasOwnProperty('certificate_issuer_gw_cluster_url')) {
                obj['certificate_issuer_gw_cluster_url'] = ApiClient.convertToType(data['certificate_issuer_gw_cluster_url'], 'String');
            }
            if (data.hasOwnProperty('certificate_issuer_item_id')) {
                obj['certificate_issuer_item_id'] = ApiClient.convertToType(data['certificate_issuer_item_id'], 'Number');
            }
            if (data.hasOwnProperty('certificate_issuer_name')) {
                obj['certificate_issuer_name'] = ApiClient.convertToType(data['certificate_issuer_name'], 'String');
            }
            if (data.hasOwnProperty('certificate_pem')) {
                obj['certificate_pem'] = ApiClient.convertToType(data['certificate_pem'], 'String');
            }
            if (data.hasOwnProperty('certificate_status')) {
                obj['certificate_status'] = ApiClient.convertToType(data['certificate_status'], 'String');
            }
            if (data.hasOwnProperty('common_name')) {
                obj['common_name'] = ApiClient.convertToType(data['common_name'], 'String');
            }
            if (data.hasOwnProperty('error_message')) {
                obj['error_message'] = ApiClient.convertToType(data['error_message'], 'String');
            }
            if (data.hasOwnProperty('expiration_date')) {
                obj['expiration_date'] = ApiClient.convertToType(data['expiration_date'], 'Date');
            }
            if (data.hasOwnProperty('expiration_events')) {
                obj['expiration_events'] = ApiClient.convertToType(data['expiration_events'], [CertificateExpirationEvent]);
            }
            if (data.hasOwnProperty('external_ca_id')) {
                obj['external_ca_id'] = NullString.constructFromObject(data['external_ca_id']);
            }
            if (data.hasOwnProperty('issuance_status')) {
                obj['issuance_status'] = ApiClient.convertToType(data['issuance_status'], 'String');
            }
            if (data.hasOwnProperty('not_before')) {
                obj['not_before'] = ApiClient.convertToType(data['not_before'], 'Date');
            }
            if (data.hasOwnProperty('renew_before_expiration_in_days')) {
                obj['renew_before_expiration_in_days'] = ApiClient.convertToType(data['renew_before_expiration_in_days'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateChainInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateChainInfo</code>.
     */
    static validateJSON(data) {
        if (data['certificate_chain']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['certificate_chain'])) {
                throw new Error("Expected the field `certificate_chain` to be an array in the JSON data but got " + data['certificate_chain']);
            }
            // validate the optional field `certificate_chain` (array)
            for (const item of data['certificate_chain']) {
                CertificateInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['certificate_format'] && !(typeof data['certificate_format'] === 'string' || data['certificate_format'] instanceof String)) {
            throw new Error("Expected the field `certificate_format` to be a primitive type in the JSON string but got " + data['certificate_format']);
        }
        // ensure the json data is a string
        if (data['certificate_issuer_gw_cluster_url'] && !(typeof data['certificate_issuer_gw_cluster_url'] === 'string' || data['certificate_issuer_gw_cluster_url'] instanceof String)) {
            throw new Error("Expected the field `certificate_issuer_gw_cluster_url` to be a primitive type in the JSON string but got " + data['certificate_issuer_gw_cluster_url']);
        }
        // ensure the json data is a string
        if (data['certificate_issuer_name'] && !(typeof data['certificate_issuer_name'] === 'string' || data['certificate_issuer_name'] instanceof String)) {
            throw new Error("Expected the field `certificate_issuer_name` to be a primitive type in the JSON string but got " + data['certificate_issuer_name']);
        }
        // ensure the json data is a string
        if (data['certificate_pem'] && !(typeof data['certificate_pem'] === 'string' || data['certificate_pem'] instanceof String)) {
            throw new Error("Expected the field `certificate_pem` to be a primitive type in the JSON string but got " + data['certificate_pem']);
        }
        // ensure the json data is a string
        if (data['certificate_status'] && !(typeof data['certificate_status'] === 'string' || data['certificate_status'] instanceof String)) {
            throw new Error("Expected the field `certificate_status` to be a primitive type in the JSON string but got " + data['certificate_status']);
        }
        // ensure the json data is a string
        if (data['common_name'] && !(typeof data['common_name'] === 'string' || data['common_name'] instanceof String)) {
            throw new Error("Expected the field `common_name` to be a primitive type in the JSON string but got " + data['common_name']);
        }
        // ensure the json data is a string
        if (data['error_message'] && !(typeof data['error_message'] === 'string' || data['error_message'] instanceof String)) {
            throw new Error("Expected the field `error_message` to be a primitive type in the JSON string but got " + data['error_message']);
        }
        if (data['expiration_events']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['expiration_events'])) {
                throw new Error("Expected the field `expiration_events` to be an array in the JSON data but got " + data['expiration_events']);
            }
            // validate the optional field `expiration_events` (array)
            for (const item of data['expiration_events']) {
                CertificateExpirationEvent.validateJSON(item);
            };
        }
        // validate the optional field `external_ca_id`
        if (data['external_ca_id']) { // data not null
          NullString.validateJSON(data['external_ca_id']);
        }
        // ensure the json data is a string
        if (data['issuance_status'] && !(typeof data['issuance_status'] === 'string' || data['issuance_status'] instanceof String)) {
            throw new Error("Expected the field `issuance_status` to be a primitive type in the JSON string but got " + data['issuance_status']);
        }

        return true;
    }


}



/**
 * @member {Boolean} auto_renew_certificate
 */
CertificateChainInfo.prototype['auto_renew_certificate'] = undefined;

/**
 * @member {Array.<module:model/CertificateInfo>} certificate_chain
 */
CertificateChainInfo.prototype['certificate_chain'] = undefined;

/**
 * @member {String} certificate_format
 */
CertificateChainInfo.prototype['certificate_format'] = undefined;

/**
 * @member {Boolean} certificate_has_private_key
 */
CertificateChainInfo.prototype['certificate_has_private_key'] = undefined;

/**
 * @member {Number} certificate_issuer_gw_cluster_id
 */
CertificateChainInfo.prototype['certificate_issuer_gw_cluster_id'] = undefined;

/**
 * @member {String} certificate_issuer_gw_cluster_url
 */
CertificateChainInfo.prototype['certificate_issuer_gw_cluster_url'] = undefined;

/**
 * @member {Number} certificate_issuer_item_id
 */
CertificateChainInfo.prototype['certificate_issuer_item_id'] = undefined;

/**
 * @member {String} certificate_issuer_name
 */
CertificateChainInfo.prototype['certificate_issuer_name'] = undefined;

/**
 * @member {String} certificate_pem
 */
CertificateChainInfo.prototype['certificate_pem'] = undefined;

/**
 * @member {String} certificate_status
 */
CertificateChainInfo.prototype['certificate_status'] = undefined;

/**
 * @member {String} common_name
 */
CertificateChainInfo.prototype['common_name'] = undefined;

/**
 * @member {String} error_message
 */
CertificateChainInfo.prototype['error_message'] = undefined;

/**
 * @member {Date} expiration_date
 */
CertificateChainInfo.prototype['expiration_date'] = undefined;

/**
 * @member {Array.<module:model/CertificateExpirationEvent>} expiration_events
 */
CertificateChainInfo.prototype['expiration_events'] = undefined;

/**
 * @member {module:model/NullString} external_ca_id
 */
CertificateChainInfo.prototype['external_ca_id'] = undefined;

/**
 * @member {String} issuance_status
 */
CertificateChainInfo.prototype['issuance_status'] = undefined;

/**
 * @member {Date} not_before
 */
CertificateChainInfo.prototype['not_before'] = undefined;

/**
 * @member {Number} renew_before_expiration_in_days
 */
CertificateChainInfo.prototype['renew_before_expiration_in_days'] = undefined;






export default CertificateChainInfo;

