/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImportPasswords model module.
 * @module model/ImportPasswords
 * @version 5.0.7
 */
class ImportPasswords {
    /**
     * Constructs a new <code>ImportPasswords</code>.
     * importPasswords is a command that import passwords
     * @alias module:model/ImportPasswords
     * @param importPath {String} File path
     */
    constructor(importPath) { 
        
        ImportPasswords.initialize(this, importPath);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, importPath) { 
        obj['accessibility'] = 'personal';
        obj['format'] = 'LastPass';
        obj['import-path'] = importPath;
        obj['json'] = false;
        obj['target-folder'] = '/';
    }

    /**
     * Constructs a <code>ImportPasswords</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportPasswords} obj Optional instance to populate.
     * @return {module:model/ImportPasswords} The populated <code>ImportPasswords</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportPasswords();

            if (data.hasOwnProperty('accessibility')) {
                obj['accessibility'] = ApiClient.convertToType(data['accessibility'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('import-path')) {
                obj['import-path'] = ApiClient.convertToType(data['import-path'], 'String');
            }
            if (data.hasOwnProperty('json')) {
                obj['json'] = ApiClient.convertToType(data['json'], 'Boolean');
            }
            if (data.hasOwnProperty('protection_key')) {
                obj['protection_key'] = ApiClient.convertToType(data['protection_key'], 'String');
            }
            if (data.hasOwnProperty('target-folder')) {
                obj['target-folder'] = ApiClient.convertToType(data['target-folder'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('uid-token')) {
                obj['uid-token'] = ApiClient.convertToType(data['uid-token'], 'String');
            }
            if (data.hasOwnProperty('update-mode')) {
                obj['update-mode'] = ApiClient.convertToType(data['update-mode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportPasswords</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportPasswords</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImportPasswords.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accessibility'] && !(typeof data['accessibility'] === 'string' || data['accessibility'] instanceof String)) {
            throw new Error("Expected the field `accessibility` to be a primitive type in the JSON string but got " + data['accessibility']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['import-path'] && !(typeof data['import-path'] === 'string' || data['import-path'] instanceof String)) {
            throw new Error("Expected the field `import-path` to be a primitive type in the JSON string but got " + data['import-path']);
        }
        // ensure the json data is a string
        if (data['protection_key'] && !(typeof data['protection_key'] === 'string' || data['protection_key'] instanceof String)) {
            throw new Error("Expected the field `protection_key` to be a primitive type in the JSON string but got " + data['protection_key']);
        }
        // ensure the json data is a string
        if (data['target-folder'] && !(typeof data['target-folder'] === 'string' || data['target-folder'] instanceof String)) {
            throw new Error("Expected the field `target-folder` to be a primitive type in the JSON string but got " + data['target-folder']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['uid-token'] && !(typeof data['uid-token'] === 'string' || data['uid-token'] instanceof String)) {
            throw new Error("Expected the field `uid-token` to be a primitive type in the JSON string but got " + data['uid-token']);
        }
        // ensure the json data is a string
        if (data['update-mode'] && !(typeof data['update-mode'] === 'string' || data['update-mode'] instanceof String)) {
            throw new Error("Expected the field `update-mode` to be a primitive type in the JSON string but got " + data['update-mode']);
        }

        return true;
    }


}

ImportPasswords.RequiredProperties = ["import-path"];

/**
 * for personal password manager
 * @member {String} accessibility
 * @default 'personal'
 */
ImportPasswords.prototype['accessibility'] = 'personal';

/**
 * Password format type [LastPass/Chrome/Firefox/1password/keeper/bitwarden/dashlane]
 * @member {String} format
 * @default 'LastPass'
 */
ImportPasswords.prototype['format'] = 'LastPass';

/**
 * File path
 * @member {String} import-path
 */
ImportPasswords.prototype['import-path'] = undefined;

/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */
ImportPasswords.prototype['json'] = false;

/**
 * The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
 * @member {String} protection_key
 */
ImportPasswords.prototype['protection_key'] = undefined;

/**
 * Target folder for imported passwords
 * @member {String} target-folder
 * @default '/'
 */
ImportPasswords.prototype['target-folder'] = '/';

/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */
ImportPasswords.prototype['token'] = undefined;

/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */
ImportPasswords.prototype['uid-token'] = undefined;

/**
 * @member {String} update-mode
 */
ImportPasswords.prototype['update-mode'] = undefined;






export default ImportPasswords;

