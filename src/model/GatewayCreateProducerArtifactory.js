/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GatewayCreateProducerArtifactory model module.
 * @module model/GatewayCreateProducerArtifactory
 * @version 2.5.1
 */
class GatewayCreateProducerArtifactory {
    /**
     * Constructs a new <code>GatewayCreateProducerArtifactory</code>.
     * gatewayCreateProducerArtifactory is a command that creates artifactory producer
     * @alias module:model/GatewayCreateProducerArtifactory
     * @param artifactoryAdminName {String} Artifactory Admin Name
     * @param artifactoryAdminPwd {String} Artifactory Admin password
     * @param artifactoryTokenAudience {String} Token Audience
     * @param artifactoryTokenScope {String} Token Scope
     * @param baseUrl {String} Base URL
     * @param name {String} Producer name
     */
    constructor(artifactoryAdminName, artifactoryAdminPwd, artifactoryTokenAudience, artifactoryTokenScope, baseUrl, name) { 
        
        GatewayCreateProducerArtifactory.initialize(this, artifactoryAdminName, artifactoryAdminPwd, artifactoryTokenAudience, artifactoryTokenScope, baseUrl, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, artifactoryAdminName, artifactoryAdminPwd, artifactoryTokenAudience, artifactoryTokenScope, baseUrl, name) { 
        obj['artifactory-admin-name'] = artifactoryAdminName;
        obj['artifactory-admin-pwd'] = artifactoryAdminPwd;
        obj['artifactory-token-audience'] = artifactoryTokenAudience;
        obj['artifactory-token-scope'] = artifactoryTokenScope;
        obj['base-url'] = baseUrl;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>GatewayCreateProducerArtifactory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GatewayCreateProducerArtifactory} obj Optional instance to populate.
     * @return {module:model/GatewayCreateProducerArtifactory} The populated <code>GatewayCreateProducerArtifactory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GatewayCreateProducerArtifactory();

            if (data.hasOwnProperty('artifactory-admin-name')) {
                obj['artifactory-admin-name'] = ApiClient.convertToType(data['artifactory-admin-name'], 'String');
            }
            if (data.hasOwnProperty('artifactory-admin-pwd')) {
                obj['artifactory-admin-pwd'] = ApiClient.convertToType(data['artifactory-admin-pwd'], 'String');
            }
            if (data.hasOwnProperty('artifactory-token-audience')) {
                obj['artifactory-token-audience'] = ApiClient.convertToType(data['artifactory-token-audience'], 'String');
            }
            if (data.hasOwnProperty('artifactory-token-scope')) {
                obj['artifactory-token-scope'] = ApiClient.convertToType(data['artifactory-token-scope'], 'String');
            }
            if (data.hasOwnProperty('base-url')) {
                obj['base-url'] = ApiClient.convertToType(data['base-url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('producer-encryption-key-name')) {
                obj['producer-encryption-key-name'] = ApiClient.convertToType(data['producer-encryption-key-name'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('uid-token')) {
                obj['uid-token'] = ApiClient.convertToType(data['uid-token'], 'String');
            }
            if (data.hasOwnProperty('user-ttl')) {
                obj['user-ttl'] = ApiClient.convertToType(data['user-ttl'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Artifactory Admin Name
 * @member {String} artifactory-admin-name
 */
GatewayCreateProducerArtifactory.prototype['artifactory-admin-name'] = undefined;

/**
 * Artifactory Admin password
 * @member {String} artifactory-admin-pwd
 */
GatewayCreateProducerArtifactory.prototype['artifactory-admin-pwd'] = undefined;

/**
 * Token Audience
 * @member {String} artifactory-token-audience
 */
GatewayCreateProducerArtifactory.prototype['artifactory-token-audience'] = undefined;

/**
 * Token Scope
 * @member {String} artifactory-token-scope
 */
GatewayCreateProducerArtifactory.prototype['artifactory-token-scope'] = undefined;

/**
 * Base URL
 * @member {String} base-url
 */
GatewayCreateProducerArtifactory.prototype['base-url'] = undefined;

/**
 * Producer name
 * @member {String} name
 */
GatewayCreateProducerArtifactory.prototype['name'] = undefined;

/**
 * Required only when the authentication process requires a username and password
 * @member {String} password
 */
GatewayCreateProducerArtifactory.prototype['password'] = undefined;

/**
 * Dynamic producer encryption key
 * @member {String} producer-encryption-key-name
 */
GatewayCreateProducerArtifactory.prototype['producer-encryption-key-name'] = undefined;

/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */
GatewayCreateProducerArtifactory.prototype['token'] = undefined;

/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */
GatewayCreateProducerArtifactory.prototype['uid-token'] = undefined;

/**
 * User TTL
 * @member {String} user-ttl
 * @default '60m'
 */
GatewayCreateProducerArtifactory.prototype['user-ttl'] = '60m';

/**
 * Required only when the authentication process requires a username and password
 * @member {String} username
 */
GatewayCreateProducerArtifactory.prototype['username'] = undefined;






export default GatewayCreateProducerArtifactory;

