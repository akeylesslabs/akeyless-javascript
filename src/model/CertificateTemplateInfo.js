/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CertificateTemplateInfo model module.
 * @module model/CertificateTemplateInfo
 * @version 5.0.12
 */
class CertificateTemplateInfo {
    /**
     * Constructs a new <code>CertificateTemplateInfo</code>.
     * @alias module:model/CertificateTemplateInfo
     */
    constructor() { 
        
        CertificateTemplateInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateTemplateInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateTemplateInfo} obj Optional instance to populate.
     * @return {module:model/CertificateTemplateInfo} The populated <code>CertificateTemplateInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateTemplateInfo();

            if (data.hasOwnProperty('common_name')) {
                obj['common_name'] = ApiClient.convertToType(data['common_name'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('csr_cnf_base_64')) {
                obj['csr_cnf_base_64'] = ApiClient.convertToType(data['csr_cnf_base_64'], 'String');
            }
            if (data.hasOwnProperty('digest_algo')) {
                obj['digest_algo'] = ApiClient.convertToType(data['digest_algo'], 'String');
            }
            if (data.hasOwnProperty('hash_algorithm')) {
                obj['hash_algorithm'] = ApiClient.convertToType(data['hash_algorithm'], 'String');
            }
            if (data.hasOwnProperty('locality')) {
                obj['locality'] = ApiClient.convertToType(data['locality'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = ApiClient.convertToType(data['organization'], 'String');
            }
            if (data.hasOwnProperty('province')) {
                obj['province'] = ApiClient.convertToType(data['province'], 'String');
            }
            if (data.hasOwnProperty('self_signed_enabled')) {
                obj['self_signed_enabled'] = ApiClient.convertToType(data['self_signed_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateTemplateInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateTemplateInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['common_name'] && !(typeof data['common_name'] === 'string' || data['common_name'] instanceof String)) {
            throw new Error("Expected the field `common_name` to be a primitive type in the JSON string but got " + data['common_name']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['csr_cnf_base_64'] && !(typeof data['csr_cnf_base_64'] === 'string' || data['csr_cnf_base_64'] instanceof String)) {
            throw new Error("Expected the field `csr_cnf_base_64` to be a primitive type in the JSON string but got " + data['csr_cnf_base_64']);
        }
        // ensure the json data is a string
        if (data['digest_algo'] && !(typeof data['digest_algo'] === 'string' || data['digest_algo'] instanceof String)) {
            throw new Error("Expected the field `digest_algo` to be a primitive type in the JSON string but got " + data['digest_algo']);
        }
        // ensure the json data is a string
        if (data['hash_algorithm'] && !(typeof data['hash_algorithm'] === 'string' || data['hash_algorithm'] instanceof String)) {
            throw new Error("Expected the field `hash_algorithm` to be a primitive type in the JSON string but got " + data['hash_algorithm']);
        }
        // ensure the json data is a string
        if (data['locality'] && !(typeof data['locality'] === 'string' || data['locality'] instanceof String)) {
            throw new Error("Expected the field `locality` to be a primitive type in the JSON string but got " + data['locality']);
        }
        // ensure the json data is a string
        if (data['organization'] && !(typeof data['organization'] === 'string' || data['organization'] instanceof String)) {
            throw new Error("Expected the field `organization` to be a primitive type in the JSON string but got " + data['organization']);
        }
        // ensure the json data is a string
        if (data['province'] && !(typeof data['province'] === 'string' || data['province'] instanceof String)) {
            throw new Error("Expected the field `province` to be a primitive type in the JSON string but got " + data['province']);
        }

        return true;
    }


}



/**
 * @member {String} common_name
 */
CertificateTemplateInfo.prototype['common_name'] = undefined;

/**
 * @member {String} country
 */
CertificateTemplateInfo.prototype['country'] = undefined;

/**
 * @member {String} csr_cnf_base_64
 */
CertificateTemplateInfo.prototype['csr_cnf_base_64'] = undefined;

/**
 * @member {String} digest_algo
 */
CertificateTemplateInfo.prototype['digest_algo'] = undefined;

/**
 * @member {String} hash_algorithm
 */
CertificateTemplateInfo.prototype['hash_algorithm'] = undefined;

/**
 * @member {String} locality
 */
CertificateTemplateInfo.prototype['locality'] = undefined;

/**
 * @member {String} organization
 */
CertificateTemplateInfo.prototype['organization'] = undefined;

/**
 * @member {String} province
 */
CertificateTemplateInfo.prototype['province'] = undefined;

/**
 * @member {Boolean} self_signed_enabled
 */
CertificateTemplateInfo.prototype['self_signed_enabled'] = undefined;

/**
 * @member {Number} ttl
 */
CertificateTemplateInfo.prototype['ttl'] = undefined;






export default CertificateTemplateInfo;

