/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UscUpdate model module.
 * @module model/UscUpdate
 * @version 5.0.12
 */
class UscUpdate {
    /**
     * Constructs a new <code>UscUpdate</code>.
     * uscUpdate is a command that updates a secret in a Universal Secrets Connector
     * @alias module:model/UscUpdate
     * @param secretId {String} The universal secrets id (or name, for AWS, Azure, K8s or Hashi vault targets) to update
     * @param uscName {String} Name of the Universal Secrets Connector item
     * @param value {String} Value of the universal secrets item, either text or base64 encoded binary
     */
    constructor(secretId, uscName, value) { 
        
        UscUpdate.initialize(this, secretId, uscName, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, secretId, uscName, value) { 
        obj['json'] = false;
        obj['secret-id'] = secretId;
        obj['usc-name'] = uscName;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>UscUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UscUpdate} obj Optional instance to populate.
     * @return {module:model/UscUpdate} The populated <code>UscUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UscUpdate();

            if (data.hasOwnProperty('binary-value')) {
                obj['binary-value'] = ApiClient.convertToType(data['binary-value'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('json')) {
                obj['json'] = ApiClient.convertToType(data['json'], 'Boolean');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('pfx-password')) {
                obj['pfx-password'] = ApiClient.convertToType(data['pfx-password'], 'String');
            }
            if (data.hasOwnProperty('secret-id')) {
                obj['secret-id'] = ApiClient.convertToType(data['secret-id'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('uid-token')) {
                obj['uid-token'] = ApiClient.convertToType(data['uid-token'], 'String');
            }
            if (data.hasOwnProperty('usc-encryption-key')) {
                obj['usc-encryption-key'] = ApiClient.convertToType(data['usc-encryption-key'], 'String');
            }
            if (data.hasOwnProperty('usc-name')) {
                obj['usc-name'] = ApiClient.convertToType(data['usc-name'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UscUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UscUpdate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UscUpdate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['pfx-password'] && !(typeof data['pfx-password'] === 'string' || data['pfx-password'] instanceof String)) {
            throw new Error("Expected the field `pfx-password` to be a primitive type in the JSON string but got " + data['pfx-password']);
        }
        // ensure the json data is a string
        if (data['secret-id'] && !(typeof data['secret-id'] === 'string' || data['secret-id'] instanceof String)) {
            throw new Error("Expected the field `secret-id` to be a primitive type in the JSON string but got " + data['secret-id']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['uid-token'] && !(typeof data['uid-token'] === 'string' || data['uid-token'] instanceof String)) {
            throw new Error("Expected the field `uid-token` to be a primitive type in the JSON string but got " + data['uid-token']);
        }
        // ensure the json data is a string
        if (data['usc-encryption-key'] && !(typeof data['usc-encryption-key'] === 'string' || data['usc-encryption-key'] instanceof String)) {
            throw new Error("Expected the field `usc-encryption-key` to be a primitive type in the JSON string but got " + data['usc-encryption-key']);
        }
        // ensure the json data is a string
        if (data['usc-name'] && !(typeof data['usc-name'] === 'string' || data['usc-name'] instanceof String)) {
            throw new Error("Expected the field `usc-name` to be a primitive type in the JSON string but got " + data['usc-name']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

UscUpdate.RequiredProperties = ["secret-id", "usc-name", "value"];

/**
 * Use this option if the universal secrets value is a base64 encoded binary
 * @member {Boolean} binary-value
 */
UscUpdate.prototype['binary-value'] = undefined;

/**
 * Description of the universal secrets
 * @member {String} description
 */
UscUpdate.prototype['description'] = undefined;

/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */
UscUpdate.prototype['json'] = false;

/**
 * The namespace (relevant for Hashi vault target)
 * @member {String} namespace
 */
UscUpdate.prototype['namespace'] = undefined;

/**
 * Optional, the passphrase that protects the private key within the pfx certificate (Relevant only for Azure KV certificates)
 * @member {String} pfx-password
 */
UscUpdate.prototype['pfx-password'] = undefined;

/**
 * The universal secrets id (or name, for AWS, Azure, K8s or Hashi vault targets) to update
 * @member {String} secret-id
 */
UscUpdate.prototype['secret-id'] = undefined;

/**
 * Tags for the universal secrets
 * @member {Object.<String, String>} tags
 */
UscUpdate.prototype['tags'] = undefined;

/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */
UscUpdate.prototype['token'] = undefined;

/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */
UscUpdate.prototype['uid-token'] = undefined;

/**
 * Optional, The name of the remote key that used to encrypt the secret value (if empty, the default key will be used)
 * @member {String} usc-encryption-key
 */
UscUpdate.prototype['usc-encryption-key'] = undefined;

/**
 * Name of the Universal Secrets Connector item
 * @member {String} usc-name
 */
UscUpdate.prototype['usc-name'] = undefined;

/**
 * Value of the universal secrets item, either text or base64 encoded binary
 * @member {String} value
 */
UscUpdate.prototype['value'] = undefined;






export default UscUpdate;

