/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GatewayCreateProducerLdap model module.
 * @module model/GatewayCreateProducerLdap
 * @version 2.5.12
 */
class GatewayCreateProducerLdap {
    /**
     * Constructs a new <code>GatewayCreateProducerLdap</code>.
     * gatewayCreateProducerLdap is a command that creates ldap producer
     * @alias module:model/GatewayCreateProducerLdap
     * @param name {String} Producer name
     */
    constructor(name) { 
        
        GatewayCreateProducerLdap.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>GatewayCreateProducerLdap</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GatewayCreateProducerLdap} obj Optional instance to populate.
     * @return {module:model/GatewayCreateProducerLdap} The populated <code>GatewayCreateProducerLdap</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GatewayCreateProducerLdap();

            if (data.hasOwnProperty('access-id')) {
                obj['access-id'] = ApiClient.convertToType(data['access-id'], 'String');
            }
            if (data.hasOwnProperty('bind-dn')) {
                obj['bind-dn'] = ApiClient.convertToType(data['bind-dn'], 'String');
            }
            if (data.hasOwnProperty('bind-dn-password')) {
                obj['bind-dn-password'] = ApiClient.convertToType(data['bind-dn-password'], 'String');
            }
            if (data.hasOwnProperty('enable-anonym-search')) {
                obj['enable-anonym-search'] = ApiClient.convertToType(data['enable-anonym-search'], 'Boolean');
            }
            if (data.hasOwnProperty('fixed-user-only')) {
                obj['fixed-user-only'] = ApiClient.convertToType(data['fixed-user-only'], 'String');
            }
            if (data.hasOwnProperty('group-attribute')) {
                obj['group-attribute'] = ApiClient.convertToType(data['group-attribute'], 'String');
            }
            if (data.hasOwnProperty('group-dn')) {
                obj['group-dn'] = ApiClient.convertToType(data['group-dn'], 'String');
            }
            if (data.hasOwnProperty('group-filter')) {
                obj['group-filter'] = ApiClient.convertToType(data['group-filter'], 'String');
            }
            if (data.hasOwnProperty('ldap-ca-cert')) {
                obj['ldap-ca-cert'] = ApiClient.convertToType(data['ldap-ca-cert'], 'String');
            }
            if (data.hasOwnProperty('ldap-url')) {
                obj['ldap-url'] = ApiClient.convertToType(data['ldap-url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('private-key')) {
                obj['private-key'] = ApiClient.convertToType(data['private-key'], 'String');
            }
            if (data.hasOwnProperty('producer-encryption-key-name')) {
                obj['producer-encryption-key-name'] = ApiClient.convertToType(data['producer-encryption-key-name'], 'String');
            }
            if (data.hasOwnProperty('target-name')) {
                obj['target-name'] = ApiClient.convertToType(data['target-name'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('token-expiration')) {
                obj['token-expiration'] = ApiClient.convertToType(data['token-expiration'], 'String');
            }
            if (data.hasOwnProperty('uid-token')) {
                obj['uid-token'] = ApiClient.convertToType(data['uid-token'], 'String');
            }
            if (data.hasOwnProperty('user-attribute')) {
                obj['user-attribute'] = ApiClient.convertToType(data['user-attribute'], 'String');
            }
            if (data.hasOwnProperty('user-dn')) {
                obj['user-dn'] = ApiClient.convertToType(data['user-dn'], 'String');
            }
            if (data.hasOwnProperty('user-ttl')) {
                obj['user-ttl'] = ApiClient.convertToType(data['user-ttl'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Access ID
 * @member {String} access-id
 */
GatewayCreateProducerLdap.prototype['access-id'] = undefined;

/**
 * Bind DN
 * @member {String} bind-dn
 */
GatewayCreateProducerLdap.prototype['bind-dn'] = undefined;

/**
 * Bind DN Password
 * @member {String} bind-dn-password
 */
GatewayCreateProducerLdap.prototype['bind-dn-password'] = undefined;

/**
 * EnableAnonymousSearch
 * @member {Boolean} enable-anonym-search
 */
GatewayCreateProducerLdap.prototype['enable-anonym-search'] = undefined;

/**
 * Fixed user
 * @member {String} fixed-user-only
 * @default 'false'
 */
GatewayCreateProducerLdap.prototype['fixed-user-only'] = 'false';

/**
 * Group attribute
 * @member {String} group-attribute
 */
GatewayCreateProducerLdap.prototype['group-attribute'] = undefined;

/**
 * Group DN
 * @member {String} group-dn
 */
GatewayCreateProducerLdap.prototype['group-dn'] = undefined;

/**
 * Group attribute
 * @member {String} group-filter
 */
GatewayCreateProducerLdap.prototype['group-filter'] = undefined;

/**
 * CA Certificate File Content
 * @member {String} ldap-ca-cert
 */
GatewayCreateProducerLdap.prototype['ldap-ca-cert'] = undefined;

/**
 * LDAP Server URL
 * @member {String} ldap-url
 */
GatewayCreateProducerLdap.prototype['ldap-url'] = undefined;

/**
 * Producer name
 * @member {String} name
 */
GatewayCreateProducerLdap.prototype['name'] = undefined;

/**
 * Required only when the authentication process requires a username and password
 * @member {String} password
 */
GatewayCreateProducerLdap.prototype['password'] = undefined;

/**
 * Base64-encoded ldap private key text
 * @member {String} private-key
 */
GatewayCreateProducerLdap.prototype['private-key'] = undefined;

/**
 * Dynamic producer encryption key
 * @member {String} producer-encryption-key-name
 */
GatewayCreateProducerLdap.prototype['producer-encryption-key-name'] = undefined;

/**
 * Target name
 * @member {String} target-name
 */
GatewayCreateProducerLdap.prototype['target-name'] = undefined;

/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */
GatewayCreateProducerLdap.prototype['token'] = undefined;

/**
 * Token expiration
 * @member {String} token-expiration
 */
GatewayCreateProducerLdap.prototype['token-expiration'] = undefined;

/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */
GatewayCreateProducerLdap.prototype['uid-token'] = undefined;

/**
 * User Attribute
 * @member {String} user-attribute
 */
GatewayCreateProducerLdap.prototype['user-attribute'] = undefined;

/**
 * User DN
 * @member {String} user-dn
 */
GatewayCreateProducerLdap.prototype['user-dn'] = undefined;

/**
 * User TTL
 * @member {String} user-ttl
 * @default '60m'
 */
GatewayCreateProducerLdap.prototype['user-ttl'] = '60m';

/**
 * Required only when the authentication process requires a username and password
 * @member {String} username
 */
GatewayCreateProducerLdap.prototype['username'] = undefined;






export default GatewayCreateProducerLdap;

