/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DecryptFile model module.
 * @module model/DecryptFile
 * @version 0.0.1
 */
class DecryptFile {
    /**
     * Constructs a new <code>DecryptFile</code>.
     * @alias module:model/DecryptFile
     * @param inputFile {String} Path to the file to be decrypted. If not provided, the content will be taken from stdin
     * @param keyName {String} The name of the key to use in the decryption process
     */
    constructor(inputFile, keyName) { 
        
        DecryptFile.initialize(this, inputFile, keyName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, inputFile, keyName) { 
        obj['InputFile'] = inputFile;
        obj['KeyName'] = keyName;
    }

    /**
     * Constructs a <code>DecryptFile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DecryptFile} obj Optional instance to populate.
     * @return {module:model/DecryptFile} The populated <code>DecryptFile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DecryptFile();

            if (data.hasOwnProperty('EncContext')) {
                obj['EncContext'] = ApiClient.convertToType(data['EncContext'], {'String': 'String'});
            }
            if (data.hasOwnProperty('InputFile')) {
                obj['InputFile'] = ApiClient.convertToType(data['InputFile'], 'String');
            }
            if (data.hasOwnProperty('KeyName')) {
                obj['KeyName'] = ApiClient.convertToType(data['KeyName'], 'String');
            }
            if (data.hasOwnProperty('OutputFilePath')) {
                obj['OutputFilePath'] = ApiClient.convertToType(data['OutputFilePath'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('uid-token')) {
                obj['uid-token'] = ApiClient.convertToType(data['uid-token'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The encryption context. If this was specified in the encrypt command, it must be specified here or the decryption operation will fail
 * @member {Object.<String, String>} EncContext
 */
DecryptFile.prototype['EncContext'] = undefined;

/**
 * Path to the file to be decrypted. If not provided, the content will be taken from stdin
 * @member {String} InputFile
 */
DecryptFile.prototype['InputFile'] = undefined;

/**
 * The name of the key to use in the decryption process
 * @member {String} KeyName
 */
DecryptFile.prototype['KeyName'] = undefined;

/**
 * Path to the output file. If not provided, the output will be sent to stdout
 * @member {String} OutputFilePath
 */
DecryptFile.prototype['OutputFilePath'] = undefined;

/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */
DecryptFile.prototype['token'] = undefined;

/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */
DecryptFile.prototype['uid-token'] = undefined;






export default DecryptFile;

