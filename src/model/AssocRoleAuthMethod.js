/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssocRoleAuthMethod model module.
 * @module model/AssocRoleAuthMethod
 * @version 5.0.10
 */
class AssocRoleAuthMethod {
    /**
     * Constructs a new <code>AssocRoleAuthMethod</code>.
     * assocRoleAuthMethod is a command that creates an association between role and auth method.
     * @alias module:model/AssocRoleAuthMethod
     * @param amName {String} The auth method to associate
     * @param roleName {String} The role to associate
     */
    constructor(amName, roleName) { 
        
        AssocRoleAuthMethod.initialize(this, amName, roleName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amName, roleName) { 
        obj['am-name'] = amName;
        obj['case-sensitive'] = 'true';
        obj['json'] = false;
        obj['role-name'] = roleName;
    }

    /**
     * Constructs a <code>AssocRoleAuthMethod</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssocRoleAuthMethod} obj Optional instance to populate.
     * @return {module:model/AssocRoleAuthMethod} The populated <code>AssocRoleAuthMethod</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssocRoleAuthMethod();

            if (data.hasOwnProperty('am-name')) {
                obj['am-name'] = ApiClient.convertToType(data['am-name'], 'String');
            }
            if (data.hasOwnProperty('case-sensitive')) {
                obj['case-sensitive'] = ApiClient.convertToType(data['case-sensitive'], 'String');
            }
            if (data.hasOwnProperty('json')) {
                obj['json'] = ApiClient.convertToType(data['json'], 'Boolean');
            }
            if (data.hasOwnProperty('role-name')) {
                obj['role-name'] = ApiClient.convertToType(data['role-name'], 'String');
            }
            if (data.hasOwnProperty('sub-claims')) {
                obj['sub-claims'] = ApiClient.convertToType(data['sub-claims'], {'String': 'String'});
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('uid-token')) {
                obj['uid-token'] = ApiClient.convertToType(data['uid-token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssocRoleAuthMethod</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssocRoleAuthMethod</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AssocRoleAuthMethod.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['am-name'] && !(typeof data['am-name'] === 'string' || data['am-name'] instanceof String)) {
            throw new Error("Expected the field `am-name` to be a primitive type in the JSON string but got " + data['am-name']);
        }
        // ensure the json data is a string
        if (data['case-sensitive'] && !(typeof data['case-sensitive'] === 'string' || data['case-sensitive'] instanceof String)) {
            throw new Error("Expected the field `case-sensitive` to be a primitive type in the JSON string but got " + data['case-sensitive']);
        }
        // ensure the json data is a string
        if (data['role-name'] && !(typeof data['role-name'] === 'string' || data['role-name'] instanceof String)) {
            throw new Error("Expected the field `role-name` to be a primitive type in the JSON string but got " + data['role-name']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['uid-token'] && !(typeof data['uid-token'] === 'string' || data['uid-token'] instanceof String)) {
            throw new Error("Expected the field `uid-token` to be a primitive type in the JSON string but got " + data['uid-token']);
        }

        return true;
    }


}

AssocRoleAuthMethod.RequiredProperties = ["am-name", "role-name"];

/**
 * The auth method to associate
 * @member {String} am-name
 */
AssocRoleAuthMethod.prototype['am-name'] = undefined;

/**
 * Treat sub claims as case-sensitive [true/false]
 * @member {String} case-sensitive
 * @default 'true'
 */
AssocRoleAuthMethod.prototype['case-sensitive'] = 'true';

/**
 * Set output format to JSON
 * @member {Boolean} json
 * @default false
 */
AssocRoleAuthMethod.prototype['json'] = false;

/**
 * The role to associate
 * @member {String} role-name
 */
AssocRoleAuthMethod.prototype['role-name'] = undefined;

/**
 * key/val of sub claims, e.g group=admins,developers
 * @member {Object.<String, String>} sub-claims
 */
AssocRoleAuthMethod.prototype['sub-claims'] = undefined;

/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */
AssocRoleAuthMethod.prototype['token'] = undefined;

/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */
AssocRoleAuthMethod.prototype['uid-token'] = undefined;






export default AssocRoleAuthMethod;

