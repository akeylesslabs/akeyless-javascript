/**
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateTokenizer model module.
 * @module model/UpdateTokenizer
 * @version 2.16.8
 */
class UpdateTokenizer {
    /**
     * Constructs a new <code>UpdateTokenizer</code>.
     * updateTokenizer is a command that updates a tokenizer item
     * @alias module:model/UpdateTokenizer
     * @param name {String} Current item name
     * @param templateType {String} Which template type this tokenizer is used for [SSN,CreditCard,USPhoneNumber,Email,Regexp]
     * @param tokenizerType {String} Tokenizer type
     */
    constructor(name, templateType, tokenizerType) { 
        
        UpdateTokenizer.initialize(this, name, templateType, tokenizerType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, templateType, tokenizerType) { 
        obj['name'] = name;
        obj['template-type'] = templateType;
        obj['tokenizer-type'] = tokenizerType;
    }

    /**
     * Constructs a <code>UpdateTokenizer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateTokenizer} obj Optional instance to populate.
     * @return {module:model/UpdateTokenizer} The populated <code>UpdateTokenizer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateTokenizer();

            if (data.hasOwnProperty('add-tag')) {
                obj['add-tag'] = ApiClient.convertToType(data['add-tag'], ['String']);
            }
            if (data.hasOwnProperty('alphabet')) {
                obj['alphabet'] = ApiClient.convertToType(data['alphabet'], 'String');
            }
            if (data.hasOwnProperty('decryption-template')) {
                obj['decryption-template'] = ApiClient.convertToType(data['decryption-template'], 'String');
            }
            if (data.hasOwnProperty('delete_protection')) {
                obj['delete_protection'] = ApiClient.convertToType(data['delete_protection'], 'String');
            }
            if (data.hasOwnProperty('encryption-key-name')) {
                obj['encryption-key-name'] = ApiClient.convertToType(data['encryption-key-name'], 'String');
            }
            if (data.hasOwnProperty('encryption-template')) {
                obj['encryption-template'] = ApiClient.convertToType(data['encryption-template'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('new-metadata')) {
                obj['new-metadata'] = ApiClient.convertToType(data['new-metadata'], 'String');
            }
            if (data.hasOwnProperty('new-name')) {
                obj['new-name'] = ApiClient.convertToType(data['new-name'], 'String');
            }
            if (data.hasOwnProperty('pattern')) {
                obj['pattern'] = ApiClient.convertToType(data['pattern'], 'String');
            }
            if (data.hasOwnProperty('rm-tag')) {
                obj['rm-tag'] = ApiClient.convertToType(data['rm-tag'], ['String']);
            }
            if (data.hasOwnProperty('template-type')) {
                obj['template-type'] = ApiClient.convertToType(data['template-type'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('tokenizer-type')) {
                obj['tokenizer-type'] = ApiClient.convertToType(data['tokenizer-type'], 'String');
            }
            if (data.hasOwnProperty('tweak-type')) {
                obj['tweak-type'] = ApiClient.convertToType(data['tweak-type'], 'String');
            }
            if (data.hasOwnProperty('uid-token')) {
                obj['uid-token'] = ApiClient.convertToType(data['uid-token'], 'String');
            }
        }
        return obj;
    }


}

/**
 * List of the new tags that will be attached to this item
 * @member {Array.<String>} add-tag
 */
UpdateTokenizer.prototype['add-tag'] = undefined;

/**
 * Alphabet to use in regexp vaultless tokenization
 * @member {String} alphabet
 */
UpdateTokenizer.prototype['alphabet'] = undefined;

/**
 * The Decryption output template to use in regexp vaultless tokenization
 * @member {String} decryption-template
 */
UpdateTokenizer.prototype['decryption-template'] = undefined;

/**
 * @member {String} delete_protection
 */
UpdateTokenizer.prototype['delete_protection'] = undefined;

/**
 * AES key name to use in vaultless tokenization
 * @member {String} encryption-key-name
 */
UpdateTokenizer.prototype['encryption-key-name'] = undefined;

/**
 * The Encryption output template to use in regexp vaultless tokenization
 * @member {String} encryption-template
 */
UpdateTokenizer.prototype['encryption-template'] = undefined;

/**
 * Current item name
 * @member {String} name
 */
UpdateTokenizer.prototype['name'] = undefined;

/**
 * New item metadata
 * @member {String} new-metadata
 * @default 'default_metadata'
 */
UpdateTokenizer.prototype['new-metadata'] = 'default_metadata';

/**
 * New item name
 * @member {String} new-name
 */
UpdateTokenizer.prototype['new-name'] = undefined;

/**
 * Pattern to use in regexp vaultless tokenization
 * @member {String} pattern
 */
UpdateTokenizer.prototype['pattern'] = undefined;

/**
 * List of the existent tags that will be removed from this item
 * @member {Array.<String>} rm-tag
 */
UpdateTokenizer.prototype['rm-tag'] = undefined;

/**
 * Which template type this tokenizer is used for [SSN,CreditCard,USPhoneNumber,Email,Regexp]
 * @member {String} template-type
 */
UpdateTokenizer.prototype['template-type'] = undefined;

/**
 * Authentication token (see `/auth` and `/configure`)
 * @member {String} token
 */
UpdateTokenizer.prototype['token'] = undefined;

/**
 * Tokenizer type
 * @member {String} tokenizer-type
 */
UpdateTokenizer.prototype['tokenizer-type'] = undefined;

/**
 * The tweak type to use in vaultless tokenization [Supplied, Generated, Internal, Masking]
 * @member {String} tweak-type
 */
UpdateTokenizer.prototype['tweak-type'] = undefined;

/**
 * The universal identity token, Required only for universal_identity authentication
 * @member {String} uid-token
 */
UpdateTokenizer.prototype['uid-token'] = undefined;






export default UpdateTokenizer;

